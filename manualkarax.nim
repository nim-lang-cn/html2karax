import karax/[karaxdsl,vdom, karax, vstyles]
import translations

proc createDom():VNode = 
  buildHtml tdiv(class="document",id="documentId"):    
    text t "\x0A  "    
    tdiv(class="container"):      
      text t "\x0A    "      
      h1(class="title"):        
        text t "Nim Manual"      
      text t "\x0A    "      
      tdiv(class="row"):        
        text t "\x0A  "        
        tdiv(class="three columns"):          
          text t "\x0A  "          
          tdiv(id="global-links"):            
            text t "\x0A    "            
            ul(class="simple-boot"):              
              text t "\x0A      "              
              li():                
                text t "\x0A        "                
                a(href="manual.html"):                  
                  text t "Manual"                
                text t "\x0A      "              
              text t "\x0A      "              
              li():                
                text t "\x0A        "                
                a(href="lib.html"):                  
                  text t "Standard library"                
                text t "\x0A      "              
              text t "\x0A      "              
              li():                
                text t "\x0A        "                
                a(href="theindex.html"):                  
                  text t "Index"                
                text t "\x0A      "              
              text t "\x0A    "            
            text t "\x0A  "          
          text t "\x0A  "          
          tdiv(id="searchInputDiv"):            
            text t "\x0A    "            
            text t "Search: "            
            text t "\x0A  "          
          text t "\x0A  "          
          ul(class="simple simple-toc",id="toc-list"):            
            text t "\x0A"            
            li():              
              a(class="reference",id="about-this-document_toc",href="#about-this-document"):                
                text t "About this document"            
            text t "\x0A"            
            li():              
              a(class="reference",id="definitions_toc",href="#definitions"):                
                text t "Definitions"            
            text t "\x0A"            
            li():              
              a(class="reference",id="lexical-analysis_toc",href="#lexical-analysis"):                
                text t "Lexical Analysis"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="lexical-analysis-encoding_toc",href="#lexical-analysis-encoding"):                  
                  text t "Encoding"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-indentation_toc",href="#lexical-analysis-indentation"):                  
                  text t "Indentation"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-comments_toc",href="#lexical-analysis-comments"):                  
                  text t "Comments"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-multiline-comments_toc",href="#lexical-analysis-multiline-comments"):                  
                  text t "Multiline comments"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-identifiers-amp-keywords_toc",href="#lexical-analysis-identifiers-amp-keywords"):                  
                  text t "Identifiers "                  
                  text t "&"                  
                  text t " "                  
                  text t "Keywords"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-identifier-equality_toc",href="#lexical-analysis-identifier-equality"):                  
                  text t "Identifier equality"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-string-literals_toc",href="#lexical-analysis-string-literals"):                  
                  text t "String literals"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-triple-quoted-string-literals_toc",href="#lexical-analysis-triple-quoted-string-literals"):                  
                  text t "Triple quoted string literals"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-raw-string-literals_toc",href="#lexical-analysis-raw-string-literals"):                  
                  text t "Raw string literals"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-generalized-raw-string-literals_toc",href="#lexical-analysis-generalized-raw-string-literals"):                  
                  text t "Generalized raw string literals"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-character-literals_toc",href="#lexical-analysis-character-literals"):                  
                  text t "Character literals"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-numerical-constants_toc",href="#lexical-analysis-numerical-constants"):                  
                  text t "Numerical constants"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-operators_toc",href="#lexical-analysis-operators"):                  
                  text t "Operators"              
              text t "\x0A"              
              li():                
                a(class="reference",id="lexical-analysis-other-tokens_toc",href="#lexical-analysis-other-tokens"):                  
                  text t "Other tokens"              
              text t "\x0A"            
            li():              
              a(class="reference",id="syntax_toc",href="#syntax"):                
                text t "Syntax"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="syntax-associativity_toc",href="#syntax-associativity"):                  
                  text t "Associativity"              
              text t "\x0A"              
              li():                
                a(class="reference",id="syntax-precedence_toc",href="#syntax-precedence"):                  
                  text t "Precedence"              
              text t "\x0A"              
              li():                
                a(class="reference",id="syntax-grammar_toc",href="#syntax-grammar"):                  
                  text t "Grammar"              
              text t "\x0A"            
            li():              
              a(class="reference",id="order-of-evaluation_toc",href="#order-of-evaluation"):                
                text t "Order of evaluation"            
            text t "\x0A"            
            li():              
              a(class="reference",id="constants-and-constant-expressions_toc",href="#constants-and-constant-expressions"):                
                text t "Constants and Constant Expressions"            
            text t "\x0A"            
            li():              
              a(class="reference",id="restrictions-on-compileminustime-execution_toc",href="#restrictions-on-compileminustime-execution"):                
                text t "Restrictions on Compile-Time Execution"            
            text t "\x0A"            
            li():              
              a(class="reference",id="types_toc",href="#types"):                
                text t "Types"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="types-ordinal-types_toc",href="#types-ordinal-types"):                  
                  text t "Ordinal types"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-preminusdefined-integer-types_toc",href="#types-preminusdefined-integer-types"):                  
                  text t "Pre-defined integer types"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-subrange-types_toc",href="#types-subrange-types"):                  
                  text t "Subrange types"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-preminusdefined-floating-point-types_toc",href="#types-preminusdefined-floating-point-types"):                  
                  text t "Pre-defined floating point types"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-boolean-type_toc",href="#types-boolean-type"):                  
                  text t "Boolean type"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-character-type_toc",href="#types-character-type"):                  
                  text t "Character type"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-enumeration-types_toc",href="#types-enumeration-types"):                  
                  text t "Enumeration types"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-string-type_toc",href="#types-string-type"):                  
                  text t "String type"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-cstring-type_toc",href="#types-cstring-type"):                  
                  text t "cstring type"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-structured-types_toc",href="#types-structured-types"):                  
                  text t "Structured types"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-array-and-sequence-types_toc",href="#types-array-and-sequence-types"):                  
                  text t "Array and sequence types"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-open-arrays_toc",href="#types-open-arrays"):                  
                  text t "Open arrays"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-varargs_toc",href="#types-varargs"):                  
                  text t "Varargs"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-unchecked-arrays_toc",href="#types-unchecked-arrays"):                  
                  text t "Unchecked arrays"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-tuples-and-object-types_toc",href="#types-tuples-and-object-types"):                  
                  text t "Tuples and object types"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-object-construction_toc",href="#types-object-construction"):                  
                  text t "Object construction"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-object-variants_toc",href="#types-object-variants"):                  
                  text t "Object variants"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-set-type_toc",href="#types-set-type"):                  
                  text t "Set type"              
              text t "\x0A"              
              ul(class="simple"):                
                li():                  
                  a(class="reference",id="set-type-bit-fields_toc",href="#set-type-bit-fields"):                    
                    text t "Bit fields"                
                text t "\x0A"              
              li():                
                a(class="reference",id="types-reference-and-pointer-types_toc",href="#types-reference-and-pointer-types"):                  
                  text t "Reference and pointer types"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-mixing-gc-ed-memory-with-ptr_toc",href="#types-mixing-gc-ed-memory-with-ptr"):                  
                  text t "Mixing GC'ed memory with "                  
                  tt(class="docutils literal"):                    
                    span(class="pre"):                      
                      text t "ptr"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-not-nil-annotation_toc",href="#types-not-nil-annotation"):                  
                  text t "Not nil annotation"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-procedural-type_toc",href="#types-procedural-type"):                  
                  text t "Procedural type"              
              text t "\x0A"              
              li():                
                a(class="reference",id="types-distinct-type_toc",href="#types-distinct-type"):                  
                  text t "Distinct type"              
              text t "\x0A"              
              ul(class="simple"):                
                li():                  
                  a(class="reference",id="distinct-type-modelling-currencies_toc",href="#distinct-type-modelling-currencies"):                    
                    text t "Modelling currencies"                
                text t "\x0A"                
                li():                  
                  a(class="reference",id="distinct-type-avoiding-sql-injection-attacks_toc",href="#distinct-type-avoiding-sql-injection-attacks"):                    
                    text t "Avoiding SQL injection attacks"                
                text t "\x0A"              
              li():                
                a(class="reference",id="types-auto-type_toc",href="#types-auto-type"):                  
                  text t "Auto type"              
              text t "\x0A"            
            li():              
              a(class="reference",id="type-relations_toc",href="#type-relations"):                
                text t "Type relations"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="type-relations-type-equality_toc",href="#type-relations-type-equality"):                  
                  text t "Type equality"              
              text t "\x0A"              
              li():                
                a(class="reference",id="type-relations-type-equality-modulo-type-distinction_toc",href="#type-relations-type-equality-modulo-type-distinction"):                  
                  text t "Type equality modulo type distinction"              
              text t "\x0A"              
              li():                
                a(class="reference",id="type-relations-subtype-relation_toc",href="#type-relations-subtype-relation"):                  
                  text t "Subtype relation"              
              text t "\x0A"              
              li():                
                a(class="reference",id="type-relations-convertible-relation_toc",href="#type-relations-convertible-relation"):                  
                  text t "Convertible relation"              
              text t "\x0A"              
              li():                
                a(class="reference",id="type-relations-assignment-compatibility_toc",href="#type-relations-assignment-compatibility"):                  
                  text t "Assignment compatibility"              
              text t "\x0A"            
            li():              
              a(class="reference",id="overloading-resolution_toc",href="#overloading-resolution"):                
                text t "Overloading resolution"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="overloading-resolution-overloading-based-on-var-t_toc",href="#overloading-resolution-overloading-based-on-var-t"):                  
                  text t "Overloading based on 'var T'"              
              text t "\x0A"              
              li():                
                a(class="reference",id="overloading-resolution-lazy-type-resolution-for-untyped_toc",href="#overloading-resolution-lazy-type-resolution-for-untyped"):                  
                  text t "Lazy type resolution for untyped"              
              text t "\x0A"              
              li():                
                a(class="reference",id="overloading-resolution-varargs-matching_toc",href="#overloading-resolution-varargs-matching"):                  
                  text t "Varargs matching"              
              text t "\x0A"            
            li():              
              a(class="reference",id="statements-and-expressions_toc",href="#statements-and-expressions"):                
                text t "Statements and expressions"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="statements-and-expressions-statement-list-expression_toc",href="#statements-and-expressions-statement-list-expression"):                  
                  text t "Statement list expression"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-discard-statement_toc",href="#statements-and-expressions-discard-statement"):                  
                  text t "Discard statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-void-context_toc",href="#statements-and-expressions-void-context"):                  
                  text t "Void context"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-var-statement_toc",href="#statements-and-expressions-var-statement"):                  
                  text t "Var statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-let-statement_toc",href="#statements-and-expressions-let-statement"):                  
                  text t "Let statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-tuple-unpacking_toc",href="#statements-and-expressions-tuple-unpacking"):                  
                  text t "Tuple unpacking"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-const-section_toc",href="#statements-and-expressions-const-section"):                  
                  text t "Const section"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-static-statementslashexpression_toc",href="#statements-and-expressions-static-statementslashexpression"):                  
                  text t "Static statement/expression"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-if-statement_toc",href="#statements-and-expressions-if-statement"):                  
                  text t "If statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-case-statement_toc",href="#statements-and-expressions-case-statement"):                  
                  text t "Case statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-when-statement_toc",href="#statements-and-expressions-when-statement"):                  
                  text t "When statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-when-nimvm-statement_toc",href="#statements-and-expressions-when-nimvm-statement"):                  
                  text t "When nimvm statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-return-statement_toc",href="#statements-and-expressions-return-statement"):                  
                  text t "Return statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-yield-statement_toc",href="#statements-and-expressions-yield-statement"):                  
                  text t "Yield statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-block-statement_toc",href="#statements-and-expressions-block-statement"):                  
                  text t "Block statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-break-statement_toc",href="#statements-and-expressions-break-statement"):                  
                  text t "Break statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-while-statement_toc",href="#statements-and-expressions-while-statement"):                  
                  text t "While statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-continue-statement_toc",href="#statements-and-expressions-continue-statement"):                  
                  text t "Continue statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-assembler-statement_toc",href="#statements-and-expressions-assembler-statement"):                  
                  text t "Assembler statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-using-statement_toc",href="#statements-and-expressions-using-statement"):                  
                  text t "Using statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-if-expression_toc",href="#statements-and-expressions-if-expression"):                  
                  text t "If expression"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-when-expression_toc",href="#statements-and-expressions-when-expression"):                  
                  text t "When expression"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-case-expression_toc",href="#statements-and-expressions-case-expression"):                  
                  text t "Case expression"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-block-expression_toc",href="#statements-and-expressions-block-expression"):                  
                  text t "Block expression"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-table-constructor_toc",href="#statements-and-expressions-table-constructor"):                  
                  text t "Table constructor"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-type-conversions_toc",href="#statements-and-expressions-type-conversions"):                  
                  text t "Type conversions"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-type-casts_toc",href="#statements-and-expressions-type-casts"):                  
                  text t "Type casts"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-the-addr-operator_toc",href="#statements-and-expressions-the-addr-operator"):                  
                  text t "The addr operator"              
              text t "\x0A"              
              li():                
                a(class="reference",id="statements-and-expressions-the-unsafeaddr-operator_toc",href="#statements-and-expressions-the-unsafeaddr-operator"):                  
                  text t "The unsafeAddr operator"              
              text t "\x0A"            
            li():              
              a(class="reference",id="procedures_toc",href="#procedures"):                
                text t "Procedures"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="procedures-export-marker_toc",href="#procedures-export-marker"):                  
                  text t "Export marker"              
              text t "\x0A"              
              li():                
                a(class="reference",id="procedures-method-call-syntax_toc",href="#procedures-method-call-syntax"):                  
                  text t "Method call syntax"              
              text t "\x0A"              
              li():                
                a(class="reference",id="procedures-properties_toc",href="#procedures-properties"):                  
                  text t "Properties"              
              text t "\x0A"              
              li():                
                a(class="reference",id="procedures-command-invocation-syntax_toc",href="#procedures-command-invocation-syntax"):                  
                  text t "Command invocation syntax"              
              text t "\x0A"              
              li():                
                a(class="reference",id="procedures-closures_toc",href="#procedures-closures"):                  
                  text t "Closures"              
              text t "\x0A"              
              ul(class="simple"):                
                li():                  
                  a(class="reference",id="closures-creating-closures-in-loops_toc",href="#closures-creating-closures-in-loops"):                    
                    text t "Creating closures in loops"                
                text t "\x0A"              
              li():                
                a(class="reference",id="procedures-anonymous-procs_toc",href="#procedures-anonymous-procs"):                  
                  text t "Anonymous Procs"              
              text t "\x0A"              
              li():                
                a(class="reference",id="procedures-func_toc",href="#procedures-func"):                  
                  text t "Func"              
              text t "\x0A"              
              li():                
                a(class="reference",id="procedures-nonoverloadable-builtins_toc",href="#procedures-nonoverloadable-builtins"):                  
                  text t "Nonoverloadable builtins"              
              text t "\x0A"              
              li():                
                a(class="reference",id="procedures-var-parameters_toc",href="#procedures-var-parameters"):                  
                  text t "Var parameters"              
              text t "\x0A"              
              li():                
                a(class="reference",id="procedures-var-return-type_toc",href="#procedures-var-return-type"):                  
                  text t "Var return type"              
              text t "\x0A"              
              ul(class="simple"):                
                li():                  
                  a(class="reference",id="var-return-type-future-directions_toc",href="#var-return-type-future-directions"):                    
                    text t "Future directions"                
                text t "\x0A"              
              li():                
                a(class="reference",id="procedures-overloading-of-the-subscript-operator_toc",href="#procedures-overloading-of-the-subscript-operator"):                  
                  text t "Overloading of the subscript operator"              
              text t "\x0A"            
            li():              
              a(class="reference",id="multiminusmethods_toc",href="#multiminusmethods"):                
                text t "Multi-methods"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="multiminusmethods-inhibit-dynamic-method-resolution-via-proccall_toc",href="#multiminusmethods-inhibit-dynamic-method-resolution-via-proccall"):                  
                  text t "Inhibit dynamic method resolution via procCall"              
              text t "\x0A"            
            li():              
              a(class="reference",id="iterators-and-the-for-statement_toc",href="#iterators-and-the-for-statement"):                
                text t "Iterators and the for statement"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="iterators-and-the-for-statement-implict-itemsslashpairs-invocations_toc",href="#iterators-and-the-for-statement-implict-itemsslashpairs-invocations"):                  
                  text t "Implict items/pairs invocations"              
              text t "\x0A"              
              li():                
                a(class="reference",id="iterators-and-the-for-statement-first-class-iterators_toc",href="#iterators-and-the-for-statement-first-class-iterators"):                  
                  text t "First class iterators"              
              text t "\x0A"            
            li():              
              a(class="reference",id="converters_toc",href="#converters"):                
                text t "Converters"            
            text t "\x0A"            
            li():              
              a(class="reference",id="type-sections_toc",href="#type-sections"):                
                text t "Type sections"            
            text t "\x0A"            
            li():              
              a(class="reference",id="exception-handling_toc",href="#exception-handling"):                
                text t "Exception handling"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="exception-handling-try-statement_toc",href="#exception-handling-try-statement"):                  
                  text t "Try statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="exception-handling-try-expression_toc",href="#exception-handling-try-expression"):                  
                  text t "Try expression"              
              text t "\x0A"              
              li():                
                a(class="reference",id="exception-handling-except-clauses_toc",href="#exception-handling-except-clauses"):                  
                  text t "Except clauses"              
              text t "\x0A"              
              li():                
                a(class="reference",id="exception-handling-defer-statement_toc",href="#exception-handling-defer-statement"):                  
                  text t "Defer statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="exception-handling-raise-statement_toc",href="#exception-handling-raise-statement"):                  
                  text t "Raise statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="exception-handling-exception-hierarchy_toc",href="#exception-handling-exception-hierarchy"):                  
                  text t "Exception hierarchy"              
              text t "\x0A"              
              li():                
                a(class="reference",id="exception-handling-imported-exceptions_toc",href="#exception-handling-imported-exceptions"):                  
                  text t "Imported exceptions"              
              text t "\x0A"            
            li():              
              a(class="reference",id="effect-system_toc",href="#effect-system"):                
                text t "Effect system"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="effect-system-exception-tracking_toc",href="#effect-system-exception-tracking"):                  
                  text t "Exception tracking"              
              text t "\x0A"              
              li():                
                a(class="reference",id="effect-system-tag-tracking_toc",href="#effect-system-tag-tracking"):                  
                  text t "Tag tracking"              
              text t "\x0A"              
              li():                
                a(class="reference",id="effect-system-effects-pragma_toc",href="#effect-system-effects-pragma"):                  
                  text t "Effects pragma"              
              text t "\x0A"            
            li():              
              a(class="reference",id="generics_toc",href="#generics"):                
                text t "Generics"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="generics-is-operator_toc",href="#generics-is-operator"):                  
                  text t "Is operator"              
              text t "\x0A"              
              li():                
                a(class="reference",id="generics-type-classes_toc",href="#generics-type-classes"):                  
                  text t "Type Classes"              
              text t "\x0A"              
              li():                
                a(class="reference",id="generics-implicit-generics_toc",href="#generics-implicit-generics"):                  
                  text t "Implicit generics"              
              text t "\x0A"              
              li():                
                a(class="reference",id="generics-generic-inference-restrictions_toc",href="#generics-generic-inference-restrictions"):                  
                  text t "Generic inference restrictions"              
              text t "\x0A"              
              li():                
                a(class="reference",id="generics-symbol-lookup-in-generics_toc",href="#generics-symbol-lookup-in-generics"):                  
                  text t "Symbol lookup in generics"              
              text t "\x0A"              
              ul(class="simple"):                
                li():                  
                  a(class="reference",id="symbol-lookup-in-generics-open-and-closed-symbols_toc",href="#symbol-lookup-in-generics-open-and-closed-symbols"):                    
                    text t "Open and Closed symbols"                
                text t "\x0A"              
              li():                
                a(class="reference",id="generics-mixin-statement_toc",href="#generics-mixin-statement"):                  
                  text t "Mixin statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="generics-bind-statement_toc",href="#generics-bind-statement"):                  
                  text t "Bind statement"              
              text t "\x0A"            
            li():              
              a(class="reference",id="templates_toc",href="#templates"):                
                text t "Templates"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="templates-typed-vs-untyped-parameters_toc",href="#templates-typed-vs-untyped-parameters"):                  
                  text t "Typed vs untyped parameters"              
              text t "\x0A"              
              li():                
                a(class="reference",id="templates-passing-a-code-block-to-a-template_toc",href="#templates-passing-a-code-block-to-a-template"):                  
                  text t "Passing a code block to a template"              
              text t "\x0A"              
              li():                
                a(class="reference",id="templates-varargs-of-untyped_toc",href="#templates-varargs-of-untyped"):                  
                  text t "Varargs of untyped"              
              text t "\x0A"              
              li():                
                a(class="reference",id="templates-symbol-binding-in-templates_toc",href="#templates-symbol-binding-in-templates"):                  
                  text t "Symbol binding in templates"              
              text t "\x0A"              
              li():                
                a(class="reference",id="templates-identifier-construction_toc",href="#templates-identifier-construction"):                  
                  text t "Identifier construction"              
              text t "\x0A"              
              li():                
                a(class="reference",id="templates-lookup-rules-for-template-parameters_toc",href="#templates-lookup-rules-for-template-parameters"):                  
                  text t "Lookup rules for template parameters"              
              text t "\x0A"              
              li():                
                a(class="reference",id="templates-hygiene-in-templates_toc",href="#templates-hygiene-in-templates"):                  
                  text t "Hygiene in templates"              
              text t "\x0A"              
              li():                
                a(class="reference",id="templates-limitations-of-the-method-call-syntax_toc",href="#templates-limitations-of-the-method-call-syntax"):                  
                  text t "Limitations of the method call syntax"              
              text t "\x0A"            
            li():              
              a(class="reference",id="macros_toc",href="#macros"):                
                text t "Macros"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="macros-debug-example_toc",href="#macros-debug-example"):                  
                  text t "Debug Example"              
              text t "\x0A"              
              li():                
                a(class="reference",id="macros-bindsym_toc",href="#macros-bindsym"):                  
                  text t "BindSym"              
              text t "\x0A"              
              li():                
                a(class="reference",id="macros-caseminusof-macro_toc",href="#macros-caseminusof-macro"):                  
                  text t "Case-Of Macro"              
              text t "\x0A"              
              li():                
                a(class="reference",id="macros-macros-as-pragmas_toc",href="#macros-macros-as-pragmas"):                  
                  text t "Macros as pragmas"              
              text t "\x0A"              
              li():                
                a(class="reference",id="macros-for-loop-macro_toc",href="#macros-for-loop-macro"):                  
                  text t "For Loop Macro"              
              text t "\x0A"            
            li():              
              a(class="reference",id="special-types_toc",href="#special-types"):                
                text t "Special Types"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="special-types-static-t_toc",href="#special-types-static-t"):                  
                  text t "static[T]"              
              text t "\x0A"              
              li():                
                a(class="reference",id="special-types-typedesc-t_toc",href="#special-types-typedesc-t"):                  
                  text t "typedesc[T]"              
              text t "\x0A"              
              li():                
                a(class="reference",id="special-types-typeof-operator_toc",href="#special-types-typeof-operator"):                  
                  text t "typeof operator"              
              text t "\x0A"            
            li():              
              a(class="reference",id="modules_toc",href="#modules"):                
                text t "Modules"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="modules-import-statement_toc",href="#modules-import-statement"):                  
                  text t "Import statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="modules-include-statement_toc",href="#modules-include-statement"):                  
                  text t "Include statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="modules-module-names-in-imports_toc",href="#modules-module-names-in-imports"):                  
                  text t "Module names in imports"              
              text t "\x0A"              
              li():                
                a(class="reference",id="modules-collective-imports-from-a-directory_toc",href="#modules-collective-imports-from-a-directory"):                  
                  text t "Collective imports from a directory"              
              text t "\x0A"              
              li():                
                a(class="reference",id="modules-pseudo-importslashinclude-paths_toc",href="#modules-pseudo-importslashinclude-paths"):                  
                  text t "Pseudo import/include paths"              
              text t "\x0A"              
              li():                
                a(class="reference",id="modules-from-import-statement_toc",href="#modules-from-import-statement"):                  
                  text t "From import statement"              
              text t "\x0A"              
              li():                
                a(class="reference",id="modules-export-statement_toc",href="#modules-export-statement"):                  
                  text t "Export statement"              
              text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="modules-scope-rules_toc",href="#modules-scope-rules"):                  
                  text t "Scope rules"              
              text t "\x0A"              
              ul(class="simple"):                
                li():                  
                  a(class="reference",id="scope-rules-block-scope_toc",href="#scope-rules-block-scope"):                    
                    text t "Block scope"                
                text t "\x0A"                
                li():                  
                  a(class="reference",id="scope-rules-tuple-or-object-scope_toc",href="#scope-rules-tuple-or-object-scope"):                    
                    text t "Tuple or object scope"                
                text t "\x0A"                
                li():                  
                  a(class="reference",id="scope-rules-module-scope_toc",href="#scope-rules-module-scope"):                    
                    text t "Module scope"                
                text t "\x0A"                
                li():                  
                  a(class="reference",id="scope-rules-code-reordering_toc",href="#scope-rules-code-reordering"):                    
                    text t "Code reordering"                
                text t "\x0A"            
            li():              
              a(class="reference",id="compiler-messages_toc",href="#compiler-messages"):                
                text t "Compiler Messages"            
            text t "\x0A"            
            li():              
              a(class="reference",id="pragmas_toc",href="#pragmas"):                
                text t "Pragmas"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="pragmas-deprecated-pragma_toc",href="#pragmas-deprecated-pragma"):                  
                  text t "deprecated pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-nosideeffect-pragma_toc",href="#pragmas-nosideeffect-pragma"):                  
                  text t "noSideEffect pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-compiletime-pragma_toc",href="#pragmas-compiletime-pragma"):                  
                  text t "compileTime pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-noreturn-pragma_toc",href="#pragmas-noreturn-pragma"):                  
                  text t "noReturn pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-acyclic-pragma_toc",href="#pragmas-acyclic-pragma"):                  
                  text t "acyclic pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-final-pragma_toc",href="#pragmas-final-pragma"):                  
                  text t "final pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-shallow-pragma_toc",href="#pragmas-shallow-pragma"):                  
                  text t "shallow pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-pure-pragma_toc",href="#pragmas-pure-pragma"):                  
                  text t "pure pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-asmnostackframe-pragma_toc",href="#pragmas-asmnostackframe-pragma"):                  
                  text t "asmNoStackFrame pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-error-pragma_toc",href="#pragmas-error-pragma"):                  
                  text t "error pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-fatal-pragma_toc",href="#pragmas-fatal-pragma"):                  
                  text t "fatal pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-warning-pragma_toc",href="#pragmas-warning-pragma"):                  
                  text t "warning pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-hint-pragma_toc",href="#pragmas-hint-pragma"):                  
                  text t "hint pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-line-pragma_toc",href="#pragmas-line-pragma"):                  
                  text t "line pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-linearscanend-pragma_toc",href="#pragmas-linearscanend-pragma"):                  
                  text t "linearScanEnd pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-computedgoto-pragma_toc",href="#pragmas-computedgoto-pragma"):                  
                  text t "computedGoto pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-unroll-pragma_toc",href="#pragmas-unroll-pragma"):                  
                  text t "unroll pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-immediate-pragma_toc",href="#pragmas-immediate-pragma"):                  
                  text t "immediate pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-compilation-option-pragmas_toc",href="#pragmas-compilation-option-pragmas"):                  
                  text t "compilation option pragmas"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-push-and-pop-pragmas_toc",href="#pragmas-push-and-pop-pragmas"):                  
                  text t "push and pop pragmas"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-register-pragma_toc",href="#pragmas-register-pragma"):                  
                  text t "register pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-global-pragma_toc",href="#pragmas-global-pragma"):                  
                  text t "global pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-pragma-pragma_toc",href="#pragmas-pragma-pragma"):                  
                  text t "pragma pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-disabling-certain-messages_toc",href="#pragmas-disabling-certain-messages"):                  
                  text t "Disabling certain messages"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-used-pragma_toc",href="#pragmas-used-pragma"):                  
                  text t "used pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="pragmas-experimental-pragma_toc",href="#pragmas-experimental-pragma"):                  
                  text t "experimental pragma"              
              text t "\x0A"            
            li():              
              a(class="reference",id="implementation-specific-pragmas_toc",href="#implementation-specific-pragmas"):                
                text t "Implementation Specific Pragmas"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="implementation-specific-pragmas-bitsize-pragma_toc",href="#implementation-specific-pragmas-bitsize-pragma"):                  
                  text t "Bitsize pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-volatile-pragma_toc",href="#implementation-specific-pragmas-volatile-pragma"):                  
                  text t "Volatile pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-nodecl-pragma_toc",href="#implementation-specific-pragmas-nodecl-pragma"):                  
                  text t "NoDecl pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-header-pragma_toc",href="#implementation-specific-pragmas-header-pragma"):                  
                  text t "Header pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-incompletestruct-pragma_toc",href="#implementation-specific-pragmas-incompletestruct-pragma"):                  
                  text t "IncompleteStruct pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-compile-pragma_toc",href="#implementation-specific-pragmas-compile-pragma"):                  
                  text t "Compile pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-link-pragma_toc",href="#implementation-specific-pragmas-link-pragma"):                  
                  text t "Link pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-passc-pragma_toc",href="#implementation-specific-pragmas-passc-pragma"):                  
                  text t "PassC pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-passl-pragma_toc",href="#implementation-specific-pragmas-passl-pragma"):                  
                  text t "PassL pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-emit-pragma_toc",href="#implementation-specific-pragmas-emit-pragma"):                  
                  text t "Emit pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-importcpp-pragma_toc",href="#implementation-specific-pragmas-importcpp-pragma"):                  
                  text t "ImportCpp pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-importjs-pragma_toc",href="#implementation-specific-pragmas-importjs-pragma"):                  
                  text t "ImportJs pragma"              
              text t "\x0A"              
              ul(class="simple"):                
                li():                  
                  a(class="reference",id="importjs-pragma-namespaces_toc",href="#importjs-pragma-namespaces"):                    
                    text t "Namespaces"                
                text t "\x0A"                
                li():                  
                  a(class="reference",id="importjs-pragma-importcpp-for-enums_toc",href="#importjs-pragma-importcpp-for-enums"):                    
                    text t "Importcpp for enums"                
                text t "\x0A"                
                li():                  
                  a(class="reference",id="importjs-pragma-importcpp-for-procs_toc",href="#importjs-pragma-importcpp-for-procs"):                    
                    text t "Importcpp for procs"                
                text t "\x0A"                
                li():                  
                  a(class="reference",id="importjs-pragma-wrapping-constructors_toc",href="#importjs-pragma-wrapping-constructors"):                    
                    text t "Wrapping constructors"                
                text t "\x0A"                
                li():                  
                  a(class="reference",id="importjs-pragma-wrapping-destructors_toc",href="#importjs-pragma-wrapping-destructors"):                    
                    text t "Wrapping destructors"                
                text t "\x0A"                
                li():                  
                  a(class="reference",id="importjs-pragma-importcpp-for-objects_toc",href="#importjs-pragma-importcpp-for-objects"):                    
                    text t "Importcpp for objects"                
                text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-importobjc-pragma_toc",href="#implementation-specific-pragmas-importobjc-pragma"):                  
                  text t "ImportObjC pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-codegendecl-pragma_toc",href="#implementation-specific-pragmas-codegendecl-pragma"):                  
                  text t "CodegenDecl pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-injectstmt-pragma_toc",href="#implementation-specific-pragmas-injectstmt-pragma"):                  
                  text t "InjectStmt pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-compile-time-define-pragmas_toc",href="#implementation-specific-pragmas-compile-time-define-pragmas"):                  
                  text t "compile time define pragmas"              
              text t "\x0A"              
              li():                
                a(class="reference",id="implementation-specific-pragmas-custom-annotations_toc",href="#implementation-specific-pragmas-custom-annotations"):                  
                  text t "Custom annotations"              
              text t "\x0A"            
            li():              
              a(class="reference",id="foreign-function-interface_toc",href="#foreign-function-interface"):                
                text t "Foreign function interface"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="foreign-function-interface-importc-pragma_toc",href="#foreign-function-interface-importc-pragma"):                  
                  text t "Importc pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="foreign-function-interface-exportc-pragma_toc",href="#foreign-function-interface-exportc-pragma"):                  
                  text t "Exportc pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="foreign-function-interface-extern-pragma_toc",href="#foreign-function-interface-extern-pragma"):                  
                  text t "Extern pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="foreign-function-interface-bycopy-pragma_toc",href="#foreign-function-interface-bycopy-pragma"):                  
                  text t "Bycopy pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="foreign-function-interface-byref-pragma_toc",href="#foreign-function-interface-byref-pragma"):                  
                  text t "Byref pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="foreign-function-interface-varargs-pragma_toc",href="#foreign-function-interface-varargs-pragma"):                  
                  text t "Varargs pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="foreign-function-interface-union-pragma_toc",href="#foreign-function-interface-union-pragma"):                  
                  text t "Union pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="foreign-function-interface-packed-pragma_toc",href="#foreign-function-interface-packed-pragma"):                  
                  text t "Packed pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="foreign-function-interface-dynlib-pragma-for-import_toc",href="#foreign-function-interface-dynlib-pragma-for-import"):                  
                  text t "Dynlib pragma for import"              
              text t "\x0A"              
              li():                
                a(class="reference",id="foreign-function-interface-dynlib-pragma-for-export_toc",href="#foreign-function-interface-dynlib-pragma-for-export"):                  
                  text t "Dynlib pragma for export"              
              text t "\x0A"            
            li():              
              a(class="reference",id="threads_toc",href="#threads"):                
                text t "Threads"            
            text t "\x0A"            
            ul(class="simple"):              
              li():                
                a(class="reference",id="threads-thread-pragma_toc",href="#threads-thread-pragma"):                  
                  text t "Thread pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="threads-gc-safety_toc",href="#threads-gc-safety"):                  
                  text t "GC safety"              
              text t "\x0A"              
              li():                
                a(class="reference",id="threads-threadvar-pragma_toc",href="#threads-threadvar-pragma"):                  
                  text t "Threadvar pragma"              
              text t "\x0A"              
              li():                
                a(class="reference",id="threads-threads-and-exceptions_toc",href="#threads-threads-and-exceptions"):                  
                  text t "Threads and exceptions"              
              text t "\x0A"            
            text t "\x0A"          
          text t "\x0A\x0A  "        
        text t "\x0A  "        
        tdiv(class="nine columns",id="content"):          
          text t "\x0A  "          
          text t "\x0A  \x0A  "          
          p(class="module-desc"):            
            table(frame="void",rules="none",class="docinfo"):              
              tbody(valign="top"):                
                tr():                  
                  th(class="docinfo-name"):                    
                    text t "Authors:"                  
                  td():                    
                    text t " "                    
                    text t "Andreas Rumpf, Zahary Karadjov"                
                text t "\x0A"                
                tr():                  
                  th(class="docinfo-name"):                    
                    text t "Version:"                  
                  td():                    
                    text t " "                    
                    text t "1.0.0"                
                text t "\x0A"            
            blockquote():              
              p():                
                text t "\"Complexity\" seems to be a lot like \"energy\": you can transfer it from the end user to one/some of the other players, but the total amount seems to remain pretty much constant for a given task. -- Ran"            
            text t "\x0A\x0A"            
            h1():              
              a(class="toc-backref",id="about-this-document",href="#about-this-document"):                
                text t "About this document"          
          p():            
            strong():              
              text t "Note"            
            text t ": This document is a draft! Several of Nim's features may need more precise wording. This manual is constantly evolving into a proper specification."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": The experimental features of Nim are covered "            
            a(class="reference external",href="manual_experimental.html"):              
              text t "here"            
            text t "."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": Assignments, moves and destruction are specified in the "            
            a(class="reference external",href="destructors.html"):              
              text t "destructors"            
            text t " "            
            text t "document."          
          text t "\x0A"          
          p():            
            text t "This document describes the lexis, the syntax, and the semantics of the Nim language."          
          text t "\x0A"          
          p():            
            text t "To learn how to compile Nim programs and generate documentation see "            
            a(class="reference external",href="nimc.html"):              
              text t "Compiler User Guide"            
            text t " "            
            text t "and "            
            a(class="reference external",href="docgen.html"):              
              text t "DocGen Tools Guide"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "The language constructs are explained using an extended BNF, in which "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "(a)*"            
            text t " "            
            text t "means 0 or more "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t "'s, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a+"            
            text t " "            
            text t "means 1 or more "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t "'s, and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "(a)?"            
            text t " "            
            text t "means an optional "            
            em():              
              text t "a"            
            text t ". Parentheses may be used to group elements."          
          text t "\x0A"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "&"            
            text t " "            
            text t "is the lookahead operator; "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "&a"            
            text t " "            
            text t "means that an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t " "            
            text t "is expected but not consumed. It will be consumed in the following rule."          
          text t "\x0A"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "|"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "/"            
            text t " "            
            text t "symbols are used to mark alternatives and have the lowest precedence. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "/"            
            text t " "            
            text t "is the ordered choice that requires the parser to try the alternatives in the given order. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "/"            
            text t " "            
            text t "is often used to ensure the grammar is not ambiguous."          
          text t "\x0A"          
          p():            
            text t "Non-terminals start with a lowercase letter, abstract terminal symbols are in UPPERCASE. Verbatim terminal symbols (including keywords) are quoted with "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "'"            
            text t ". An example:"            
            pre():              
              text t "ifStmt = 'if' expr ':' stmts ('elif' expr ':' stmts)* ('else' stmts)?"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "The binary "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "^*"            
            text t " "            
            text t "operator is used as a shorthand for 0 or more occurrences separated by its second argument; likewise "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "^+"            
            text t " "            
            text t "means 1 or more occurrences: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a ^+ b"            
            text t " "            
            text t "is short for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a (b a)*"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a ^* b"            
            text t " "            
            text t "is short for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "(a (b a)*)?"            
            text t ". Example:"            
            pre():              
              text t "arrayConstructor = '[' expr ^* ',' ']'"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "Other parts of Nim, like scoping rules or runtime semantics, are described informally."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="definitions",href="#definitions"):              
              text t "Definitions"          
          p():            
            text t "Nim code specifies a computation that acts on a memory consisting of components called "            
            span(id="locations_1"):              
              text t "locations"            
            text t ". A variable is basically a name for a location. Each variable and location is of a certain "            
            span(id="type_1"):              
              text t "type"            
            text t ". The variable's type is called "            
            span(id="static-type_1"):              
              text t "static type"            
            text t ", the location's type is called "            
            span(id="dynamic-type_1"):              
              text t "dynamic type"            
            text t ". If the static type is not the same as the dynamic type, it is a super-type or subtype of the dynamic type."          
          text t "\x0A"          
          p():            
            text t "An "            
            span(id="identifier_1"):              
              text t "identifier"            
            text t " "            
            text t "is a symbol declared as a name for a variable, type, procedure, etc. The region of the program over which a declaration applies is called the "            
            span(id="scope_1"):              
              text t "scope"            
            text t " "            
            text t "of the declaration. Scopes can be nested. The meaning of an identifier is determined by the smallest enclosing scope in which the identifier is declared unless overloading resolution rules suggest otherwise."          
          text t "\x0A"          
          p():            
            text t "An expression specifies a computation that produces a value or location. Expressions that produce locations are called "            
            span(id="lminusvalues_1"):              
              text t "l-values"            
            text t ". An l-value can denote either a location or the value the location contains, depending on the context."          
          text t "\x0A"          
          p():            
            text t "A Nim "            
            span(id="program_1"):              
              text t "program"            
            text t " "            
            text t "consists of one or more text "            
            span(id="source-files_1"):              
              text t "source files"            
            text t " "            
            text t "containing Nim code. It is processed by a Nim "            
            span(id="compiler_1"):              
              text t "compiler"            
            text t " "            
            text t "into an "            
            span(id="executable_1"):              
              text t "executable"            
            text t ". The nature of this executable depends on the compiler implementation; it may, for example, be a native binary or JavaScript source code."          
          text t "\x0A"          
          p():            
            text t "In a typical Nim program, most of the code is compiled into the executable. However, some of the code may be executed at "            
            span(id="compile-time_1"):              
              text t "compile time"            
            text t ". This can include constant expressions, macro definitions, and Nim procedures used by macro definitions. Most of the Nim language is supported at compile time, but there are some restrictions -- see "            
            a(class="reference external",href="#restrictions-on-compileminustime-execution"):              
              text t "Restrictions on Compile-Time Execution"            
            text t " "            
            text t "for details. We use the term "            
            span(id="runtime_1"):              
              text t "runtime"            
            text t " "            
            text t "to cover both compile-time execution and code execution in the executable."          
          text t "\x0A"          
          p():            
            text t "The compiler parses Nim source code into an internal data structure called the "            
            span(id="abstract-syntax-tree_1"):              
              text t "abstract syntax tree"            
            text t " "            
            text t "("            
            span(id="ast_1"):              
              text t "AST"            
            text t "). Then, before executing the code or compiling it into the executable, it transforms the AST through "            
            span(id="semantic-analysis_1"):              
              text t "semantic analysis"            
            text t ". This adds semantic information such as expression types, identifier meanings, and in some cases expression values. An error detected during semantic analysis is called a "            
            span(id="static-error_1"):              
              text t "static error"            
            text t ". Errors described in this manual are static errors when not otherwise specified."          
          text t "\x0A"          
          p():            
            text t "A "            
            span(id="checked-runtime-error_1"):              
              text t "checked runtime error"            
            text t " "            
            text t "is an error that the implementation detects and reports at runtime. The method for reporting such errors is via "            
            em():              
              text t "raising exceptions"            
            text t " "            
            text t "or "            
            em():              
              text t "dying with a fatal error"            
            text t ". However, the implementation provides a means to disable these "            
            span(id="runtime-checks_1"):              
              text t "runtime checks"            
            text t ". See the section "            
            a(class="reference external",href="#pragmas"):              
              text t "pragmas"            
            text t " "            
            text t "for details."          
          text t "\x0A"          
          p():            
            text t "Whether a checked runtime error results in an exception or in a fatal error is implementation specific. Thus the following program is invalid; even though the code purports to catch the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "IndexError"            
            text t " "            
            text t "from an out-of-bounds array access, the compiler may instead choose to allow the program to die with a fatal error."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "array"            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "char"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "try"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="CharLit"):              
              text t "'N'"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "except"            
            text t " "            
            span(class="Identifier"):              
              text t "IndexError"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"invalid index\""          
          p():            
            text t "An "            
            span(id="unchecked-runtime-error_1"):              
              text t "unchecked runtime error"            
            text t " "            
            text t "is an error that is not guaranteed to be detected, and can cause the subsequent behavior of the computation to be arbitrary. Unchecked runtime errors cannot occur if only "            
            span(id="safe_1"):              
              text t "safe"            
            text t " "            
            text t "language features are used and if no runtime checks are disabled."          
          text t "\x0A"          
          p():            
            text t "A "            
            span(id="constant-expression_1"):              
              text t "constant expression"            
            text t " "            
            text t "is an expression whose value can be computed during semantic analysis of the code in which it appears. It is never an l-value and never has side effects. Constant expressions are not limited to the capabilities of semantic analysis, such as constant folding; they can use all Nim language features that are supported for compile-time execution. Since constant expressions can be used as an input to semantic analysis (such as for defining array bounds), this flexibility requires the compiler to interleave semantic analysis and compile-time code execution."          
          text t "\x0A"          
          p():            
            text t "It is mostly accurate to picture semantic analysis proceeding top to bottom and left to right in the source code, with compile-time code execution interleaved when necessary to compute values that are required for subsequent semantic analysis. We will see much later in this document that macro invocation not only requires this interleaving, but also creates a situation where semantic analyis does not entirely proceed top to bottom and left to right."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="lexical-analysis",href="#lexical-analysis"):              
              text t "Lexical Analysis"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-encoding",href="#lexical-analysis-encoding"):              
              text t "Encoding"          
          p():            
            text t "All Nim source files are in the UTF-8 encoding (or its ASCII subset). Other encodings are not supported. Any of the standard platform line termination sequences can be used - the Unix form using ASCII LF (linefeed), the Windows form using the ASCII sequence CR LF (return followed by linefeed), or the old Macintosh form using the ASCII CR (return) character. All of these forms can be used equally, regardless of platform."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-indentation",href="#lexical-analysis-indentation"):              
              text t "Indentation"          
          p():            
            text t "Nim's standard grammar describes an "            
            span(id="indentation-sensitive_1"):              
              text t "indentation sensitive"            
            text t " "            
            text t "language. This means that all the control structures are recognized by indentation. Indentation consists only of spaces; tabulators are not allowed."          
          text t "\x0A"          
          p():            
            text t "The indentation handling is implemented as follows: The lexer annotates the following token with the preceding number of spaces; indentation is not a separate token. This trick allows parsing of Nim with only 1 token of lookahead."          
          text t "\x0A"          
          p():            
            text t "The parser uses a stack of indentation levels: the stack consists of integers counting the spaces. The indentation information is queried at strategic places in the parser but ignored otherwise: The pseudo terminal "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "IND{>}"            
            text t " "            
            text t "denotes an indentation that consists of more spaces than the entry at the top of the stack; "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "IND{=}"            
            text t " "            
            text t "an indentation that has the same number of spaces. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "DED"            
            text t " "            
            text t "is another pseudo terminal that describes the "            
            em():              
              text t "action"            
            text t " "            
            text t "of popping a value from the stack, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "IND{>}"            
            text t " "            
            text t "then implies to push onto the stack."          
          text t "\x0A"          
          p():            
            text t "With this notation we can now easily define the core of the grammar: A block of statements (simplified example):"            
            pre():              
              text t "ifStmt = \'if\' expr \':\' stmt (IND{=} \'elif\' expr \':\' stmt)* (IND{=} \'else\' \':\' stmt)?\x0A\x0AsimpleStmt = ifStmt / ...\x0A\x0Astmt = IND{>} stmt ^+ IND{=} DED  # list of statements / simpleStmt                 # or a simple statement"            
            text t "\x0A"          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-comments",href="#lexical-analysis-comments"):              
              text t "Comments"          
          p():            
            text t "Comments start anywhere outside a string or character literal with the hash character "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "#"            
            text t ". Comments consist of a concatenation of "            
            span(id="comment-pieces_1"):              
              text t "comment pieces"            
            text t ". A comment piece starts with "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "#"            
            text t " "            
            text t "and runs until the end of the line. The end of line characters belong to the piece. If the next line only consists of a comment piece with no other tokens between it and the preceding one, it does not start a new comment:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "     "            
            span(class="Comment"):              
              text t "# This is a single comment over multiple lines."            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# The scanner merges these two pieces."            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# The comment continues here."          
          p():            
            span(id="documentation-comments_1"):              
              text t "Documentation comments"            
            text t " "            
            text t "are comments that start with two "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "##"            
            text t ". Documentation comments are tokens; they are only allowed at certain places in the input file as they belong to the syntax tree!"          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-multiline-comments",href="#lexical-analysis-multiline-comments"):              
              text t "Multiline comments"          
          p():            
            text t "Starting with version 0.13.0 of the language Nim supports multiline comments. They look like:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="LongComment"):              
              text t "#[Comment here.\x0AMultiple lines\x0Aare not a problem.]#"          
          p():            
            text t "Multiline comments support nesting:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="LongComment"):              
              text t "#[  #[ Multiline comment in already commented out code. ]#\x0Aproc p[T](x: T) = discard\x0A]#"          
          p():            
            text t "Multiline documentation comments also exist and support nesting too:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="LongComment"):              
              text t "##[Long documentation comment here. ]##"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-identifiers-amp-keywords",href="#lexical-analysis-identifiers-amp-keywords"):              
              text t "Identifiers "              
              text t "&"              
              text t " "              
              text t "Keywords"          
          p():            
            text t "Identifiers in Nim can be any string of letters, digits and underscores, with the following restrictions:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "begins with a letter"            
            text t "\x0A"            
            li():              
              text t "does not end with an underscore "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "_"            
            text t "\x0A"            
            li():              
              p():                
                text t "two immediate following underscores "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "__"                
                text t " "                
                text t "are not allowed::"              
              text t "\x0A"              
              p():                
                text t "letter ::= 'A'..'Z' | 'a'..'z' | 'x80'..'xff' digit ::= '0'..'9' IDENTIFIER ::= letter ( ['_'] (letter | digit) )*"              
              text t "\x0A"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "Currently any Unicode character with an ordinal value > 127 (non ASCII) is classified as a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "letter"            
            text t " "            
            text t "and may thus be part of an identifier but later versions of the language may assign some Unicode characters to belong to the operator characters instead."          
          text t "\x0A"          
          p():            
            text t "The following keywords are reserved and cannot be used as identifiers:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "addr"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t " "            
            span(class="Keyword"):              
              text t "as"            
            text t " "            
            span(class="Keyword"):              
              text t "asm"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "bind"            
            text t " "            
            span(class="Keyword"):              
              text t "block"            
            text t " "            
            span(class="Keyword"):              
              text t "break"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Keyword"):              
              text t "cast"            
            text t " "            
            span(class="Keyword"):              
              text t "concept"            
            text t " "            
            span(class="Keyword"):              
              text t "const"            
            text t " "            
            span(class="Keyword"):              
              text t "continue"            
            text t " "            
            span(class="Keyword"):              
              text t "converter"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "defer"            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            text t " "            
            span(class="Keyword"):              
              text t "div"            
            text t " "            
            span(class="Keyword"):              
              text t "do"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "elif"            
            text t " "            
            span(class="Keyword"):              
              text t "else"            
            text t " "            
            span(class="Keyword"):              
              text t "end"            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t " "            
            span(class="Keyword"):              
              text t "except"            
            text t " "            
            span(class="Keyword"):              
              text t "export"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "finally"            
            text t " "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Keyword"):              
              text t "from"            
            text t " "            
            span(class="Keyword"):              
              text t "func"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Keyword"):              
              text t "include"            
            text t " "            
            span(class="Keyword"):              
              text t "interface"            
            text t " "            
            span(class="Keyword"):              
              text t "is"            
            text t " "            
            span(class="Keyword"):              
              text t "isnot"            
            text t " "            
            span(class="Keyword"):              
              text t "iterator"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "macro"            
            text t " "            
            span(class="Keyword"):              
              text t "method"            
            text t " "            
            span(class="Keyword"):              
              text t "mixin"            
            text t " "            
            span(class="Keyword"):              
              text t "mod"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "nil"            
            text t " "            
            span(class="Keyword"):              
              text t "not"            
            text t " "            
            span(class="Keyword"):              
              text t "notin"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Keyword"):              
              text t "or"            
            text t " "            
            span(class="Keyword"):              
              text t "out"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "raise"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Keyword"):              
              text t "return"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "shl"            
            text t " "            
            span(class="Keyword"):              
              text t "shr"            
            text t " "            
            span(class="Keyword"):              
              text t "static"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Keyword"):              
              text t "try"            
            text t " "            
            span(class="Keyword"):              
              text t "tuple"            
            text t " "            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "using"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "when"            
            text t " "            
            span(class="Keyword"):              
              text t "while"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "xor"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "yield"            
            text t "\x0A"          
          p():            
            text t "Some keywords are unused; they are reserved for future developments of the language."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-identifier-equality",href="#lexical-analysis-identifier-equality"):              
              text t "Identifier equality"          
          p():            
            text t "Two identifiers are considered equal if the following algorithm returns true:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "sameIdentifier"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "replace"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"_\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "toLowerAscii"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "replace"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"_\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "toLowerAscii"          
          p():            
            text t "That means only the first letters are compared in a case sensitive manner. Other letters are compared case insensitively within the ASCII range and underscores are ignored."          
          text t "\x0A"          
          p():            
            text t "This rather unorthodox way to do identifier comparisons is called "            
            span(id="partial-case-insensitivity_1"):              
              text t "partial case insensitivity"            
            text t " "            
            text t "and has some advantages over the conventional case sensitivity:"          
          text t "\x0A"          
          p():            
            text t "It allows programmers to mostly use their own preferred spelling style, be it humpStyle or snake_style, and libraries written by different programmers cannot use incompatible conventions. A Nim-aware editor or IDE can show the identifiers as preferred. Another advantage is that it frees the programmer from remembering the exact spelling of an identifier. The exception with respect to the first letter allows common code like "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var foo: Foo"            
            text t " "            
            text t "to be parsed unambiguously."          
          text t "\x0A"          
          p():            
            text t "Note that this rule also applies to keywords, meaning that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "notin"            
            text t " "            
            text t "is the same as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "notIn"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "not_in"            
            text t " "            
            text t "(all-lowercase version ("            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "notin"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "isnot"            
            text t ") is the preferred way of writing keywords)."          
          text t "\x0A"          
          p():            
            text t "Historically, Nim was a fully "            
            span(id="styleminusinsensitive_1"):              
              text t "style-insensitive"            
            text t " "            
            text t "language. This meant that it was not case-sensitive and underscores were ignored and there was not even a distinction between "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "foo"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Foo"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-string-literals",href="#lexical-analysis-string-literals"):              
              text t "String literals"          
          p():            
            text t "Terminal symbol in the grammar: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "STR_LIT"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "String literals can be delimited by matching double quotes, and can contain the following "            
            span(id="escape-sequences_1"):              
              text t "escape sequences"            
            text t ":"          
          text t "\x0A"          
          table(class="docutils",border="1"):            
            tr():              
              th():                
                text t "Escape sequence"              
              th():                
                text t "Meaning"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\p"              
              td():                
                text t "platform specific newline: CRLF on Windows, LF on Unix"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\r"                
                text t ", "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\c"              
              td():                
                span(id="carriage-return_1"):                  
                  text t "carriage return"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\n"                
                text t ", "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\l"              
              td():                
                span(id="line-feed_1"):                  
                  text t "line feed"                
                text t " "                
                text t "(often called "                
                span(id="newline_1"):                  
                  text t "newline"                
                text t ")"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\f"              
              td():                
                span(id="form-feed_1"):                  
                  text t "form feed"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\t"              
              td():                
                span(id="tabulator_1"):                  
                  text t "tabulator"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\v"              
              td():                
                span(id="vertical-tabulator_1"):                  
                  text t "vertical tabulator"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\\\"              
              td():                
                span(id="backslash_1"):                  
                  text t "backslash"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\\""              
              td():                
                span(id="quotation-mark_1"):                  
                  text t "quotation mark"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\\'"              
              td():                
                span(id="apostrophe_1"):                  
                  text t "apostrophe"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\"                
                text t " "                
                text t "'0'..'9'+"              
              td():                
                span(id="character-with-decimal-value-d_1"):                  
                  text t "character with decimal value d"                
                text t "; all decimal digits directly following are used for the character"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\a"              
              td():                
                span(id="alert_1"):                  
                  text t "alert"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\b"              
              td():                
                span(id="backspace_1"):                  
                  text t "backspace"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\e"              
              td():                
                span(id="escape_1"):                  
                  text t "escape"                
                text t " "                
                span(id="esc_1"):                  
                  text t "[ESC]"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\x"                
                text t " "                
                text t "HH"              
              td():                
                span(id="character-with-hex-value-hh_1"):                  
                  text t "character with hex value HH"                
                text t "; exactly two hex digits are allowed"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\u"                
                text t " "                
                text t "HHHH"              
              td():                
                span(id="unicode-codepoint-with-hex-value-hhhh_1"):                  
                  text t "unicode codepoint with hex value HHHH"                
                text t "; exactly four hex digits are allowed"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\u"                
                text t " "                
                text t "{H+}"              
              td():                
                span(id="unicode-codepoint_1"):                  
                  text t "unicode codepoint"                
                text t "; all hex digits enclosed in "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "{}"                
                text t " "                
                text t "are used for the codepoint"            
            text t "\x0A"          
          p():            
            text t "Strings in Nim may contain any 8-bit value, even embedded zeros. However some operations may interpret the first binary zero as a terminator."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-triple-quoted-string-literals",href="#lexical-analysis-triple-quoted-string-literals"):              
              text t "Triple quoted string literals"          
          p():            
            text t "Terminal symbol in the grammar: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "TRIPLESTR_LIT"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "String literals can also be delimited by three double quotes "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "\"\"\""            
            text t " "            
            text t "... "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "\"\"\""            
            text t ". Literals in this form may run for several lines, may contain "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "\""            
            text t " "            
            text t "and do not interpret any escape sequences. For convenience, when the opening "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "\"\"\""            
            text t " "            
            text t "is followed by a newline (there may be whitespace between the opening "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "\"\"\""            
            text t " "            
            text t "and the newline), the newline (and the preceding whitespace) is not included in the string. The ending of the string literal is defined by the pattern "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "\"\"\"[^\"]"            
            text t ", so this:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="LongStringLit"):              
              text t "\"\"\"\"long string within quotes\"\"\"\""          
          p():            
            text t "Produces:"            
            pre():              
              text t "\"long string within quotes\""            
            text t "\x0A"          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-raw-string-literals",href="#lexical-analysis-raw-string-literals"):              
              text t "Raw string literals"          
          p():            
            text t "Terminal symbol in the grammar: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "RSTR_LIT"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "There are also raw string literals that are preceded with the letter "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "r"            
            text t " "            
            text t "(or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "R"            
            text t ") and are delimited by matching double quotes (just like ordinary string literals) and do not interpret the escape sequences. This is especially convenient for regular expressions or Windows paths:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "f"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "openFile"            
            span(class="Punctuation"):              
              text t "("            
            span(class="RawData"):              
              text t "r\"C:\\texts\\text.txt\""            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# a raw string, so ``\\t`` is no tab"          
          p():            
            text t "To produce a single "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "\""            
            text t " "            
            text t "within a raw string literal, it has to be doubled:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="RawData"):              
              text t "r\"a\"\""            
            span(class="RawData"):              
              text t "b\""          
          p():            
            text t "Produces:"            
            pre():              
              text t "a\"b"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "r\"\"\"\""            
            text t " "            
            text t "is not possible with this notation, because the three leading quotes introduce a triple quoted string literal. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "r\"\"\""            
            text t " "            
            text t "is the same as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "\"\"\""            
            text t " "            
            text t "since triple quoted string literals do not interpret escape sequences either."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-generalized-raw-string-literals",href="#lexical-analysis-generalized-raw-string-literals"):              
              text t "Generalized raw string literals"          
          p():            
            text t "Terminal symbols in the grammar: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "GENERALIZED_STR_LIT"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "GENERALIZED_TRIPLESTR_LIT"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "The construct "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "identifier\"string literal\""            
            text t " "            
            text t "(without whitespace between the identifier and the opening quotation mark) is a generalized raw string literal. It is a shortcut for the construct "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "identifier(r\"string literal\")"            
            text t ", so it denotes a procedure call with a raw string literal as its only argument. Generalized raw string literals are especially convenient for embedding mini languages directly into Nim (for example regular expressions)."          
          text t "\x0A"          
          p():            
            text t "The construct "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "identifier\"\"\"string literal\"\"\""            
            text t " "            
            text t "exists too. It is a shortcut for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "identifier(\"\"\"string literal\"\"\")"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-character-literals",href="#lexical-analysis-character-literals"):              
              text t "Character literals"          
          p():            
            text t "Character literals are enclosed in single quotes "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "''"            
            text t " "            
            text t "and can contain the same escape sequences as strings - with one exception: the platform dependent "            
            span(id="newline_2"):              
              text t "newline"            
            text t " "            
            text t "("            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "\\p"            
            text t ") is not allowed as it may be wider than one character (often it is the pair CR/LF for example).  Here are the valid "            
            span(id="escape-sequences_2"):              
              text t "escape sequences"            
            text t " "            
            text t "for character literals:"          
          text t "\x0A"          
          table(class="docutils",border="1"):            
            tr():              
              th():                
                text t "Escape sequence"              
              th():                
                text t "Meaning"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\r"                
                text t ", "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\c"              
              td():                
                span(id="carriage-return_2"):                  
                  text t "carriage return"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\n"                
                text t ", "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\l"              
              td():                
                span(id="line-feed_2"):                  
                  text t "line feed"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\f"              
              td():                
                span(id="form-feed_2"):                  
                  text t "form feed"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\t"              
              td():                
                span(id="tabulator_2"):                  
                  text t "tabulator"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\v"              
              td():                
                span(id="vertical-tabulator_2"):                  
                  text t "vertical tabulator"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\\\"              
              td():                
                span(id="backslash_2"):                  
                  text t "backslash"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\\""              
              td():                
                span(id="quotation-mark_2"):                  
                  text t "quotation mark"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\\'"              
              td():                
                span(id="apostrophe_2"):                  
                  text t "apostrophe"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\"                
                text t " "                
                text t "'0'..'9'+"              
              td():                
                span(id="character-with-decimal-value-d_2"):                  
                  text t "character with decimal value d"                
                text t "; all decimal digits directly following are used for the character"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\a"              
              td():                
                span(id="alert_2"):                  
                  text t "alert"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\b"              
              td():                
                span(id="backspace_2"):                  
                  text t "backspace"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\e"              
              td():                
                span(id="escape_2"):                  
                  text t "escape"                
                text t " "                
                span(id="esc_2"):                  
                  text t "[ESC]"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\\x"                
                text t " "                
                text t "HH"              
              td():                
                span(id="character-with-hex-value-hh_2"):                  
                  text t "character with hex value HH"                
                text t "; exactly two hex digits are allowed"            
            text t "\x0A"          
          p():            
            text t "A character is not an Unicode character but a single byte. The reason for this is efficiency: for the overwhelming majority of use-cases, the resulting programs will still handle UTF-8 properly as UTF-8 was specially designed for this. Another reason is that Nim can thus support "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "array[char, int]"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "set[char]"            
            text t " "            
            text t "efficiently as many algorithms rely on this feature.  The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Rune"            
            text t " "            
            text t "type is used for Unicode characters, it can represent any Unicode character. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Rune"            
            text t " "            
            text t "is declared in the "            
            a(class="reference external",href="unicode.html"):              
              text t "unicode module"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-numerical-constants",href="#lexical-analysis-numerical-constants"):              
              text t "Numerical constants"          
          p():            
            text t "Numerical constants are of a single type and have the form:"            
            pre():              
              text t "hexdigit = digit | \'A\'..\'F\' | \'a\'..\'f\'\x0Aoctdigit = \'0\'..\'7\'\x0Abindigit = \'0\'..\'1\'\x0AHEX_LIT = \'0\' (\'x\' | \'X\' ) hexdigit ( [\'_\'] hexdigit )*\x0ADEC_LIT = digit ( [\'_\'] digit )*\x0AOCT_LIT = \'0\' \'o\' octdigit ( [\'_\'] octdigit )*\x0ABIN_LIT = \'0\' (\'b\' | \'B\' ) bindigit ( [\'_\'] bindigit )*\x0A\x0AINT_LIT = HEX_LIT | DEC_LIT | OCT_LIT | BIN_LIT\x0A\x0AINT8_LIT = INT_LIT [\'\\\'\'] (\'i\' | \'I\') \'8\'\x0AINT16_LIT = INT_LIT [\'\\\'\'] (\'i\' | \'I\') \'16\'\x0AINT32_LIT = INT_LIT [\'\\\'\'] (\'i\' | \'I\') \'32\'\x0AINT64_LIT = INT_LIT [\'\\\'\'] (\'i\' | \'I\') \'64\'\x0A\x0AUINT_LIT = INT_LIT [\'\\\'\'] (\'u\' | \'U\')\x0AUINT8_LIT = INT_LIT [\'\\\'\'] (\'u\' | \'U\') \'8\'\x0AUINT16_LIT = INT_LIT [\'\\\'\'] (\'u\' | \'U\') \'16\'\x0AUINT32_LIT = INT_LIT [\'\\\'\'] (\'u\' | \'U\') \'32\'\x0AUINT64_LIT = INT_LIT [\'\\\'\'] (\'u\' | \'U\') \'64\'\x0A\x0Aexponent = (\'e\' | \'E\' ) [\'+\' | \'-\'] digit ( [\'_\'] digit )*\x0AFLOAT_LIT = digit ([\'_\'] digit)* ((\'.\' digit ([\'_\'] digit)* [exponent]) |exponent)\x0AFLOAT32_SUFFIX = (\'f\' | \'F\') [\'32\']\x0AFLOAT32_LIT = HEX_LIT \'\\\'\' FLOAT32_SUFFIX | (FLOAT_LIT | DEC_LIT | OCT_LIT | BIN_LIT) [\'\\\'\'] FLOAT32_SUFFIX\x0AFLOAT64_SUFFIX = ( (\'f\' | \'F\') \'64\' ) | \'d\' | \'D\'\x0AFLOAT64_LIT = HEX_LIT \'\\\'\' FLOAT64_SUFFIX | (FLOAT_LIT | DEC_LIT | OCT_LIT | BIN_LIT) [\'\\\'\'] FLOAT64_SUFFIX"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "As can be seen in the productions, numerical constants can contain underscores for readability. Integer and floating point literals may be given in decimal (no prefix), binary (prefix "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "0b"            
            text t "), octal (prefix "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "0o"            
            text t ") and hexadecimal (prefix "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "0x"            
            text t ") notation."          
          text t "\x0A"          
          p():            
            text t "There exists a literal for each numerical type that is defined. The suffix starting with an apostrophe (''') is called a "            
            span(id="type-suffix_1"):              
              text t "type suffix"            
            text t ". Literals without a type suffix are of an integer type, unless the literal contains a dot or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "E|e"            
            text t " "            
            text t "in which case it is of type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "float"            
            text t ". This integer type is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "int"            
            text t " "            
            text t "if the literal is in the range "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "low(i32)..high(i32)"            
            text t ", otherwise it is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "int64"            
            text t ". For notational convenience the apostrophe of a type suffix is optional if it is not ambiguous (only hexadecimal floating point literals with a type suffix can be ambiguous)."          
          text t "\x0A"          
          p():            
            text t "The type suffixes are:"          
          text t "\x0A"          
          table(class="docutils",border="1"):            
            tr():              
              th():                
                text t "Type Suffix"              
              th():                
                text t "Resulting type of literal"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'i8"              
              td():                
                text t "int8"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'i16"              
              td():                
                text t "int16"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'i32"              
              td():                
                text t "int32"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'i64"              
              td():                
                text t "int64"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'u"              
              td():                
                text t "uint"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'u8"              
              td():                
                text t "uint8"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'u16"              
              td():                
                text t "uint16"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'u32"              
              td():                
                text t "uint32"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'u64"              
              td():                
                text t "uint64"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'f"              
              td():                
                text t "float32"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'d"              
              td():                
                text t "float64"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'f32"              
              td():                
                text t "float32"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "'f64"              
              td():                
                text t "float64"            
            text t "\x0A"          
          p():            
            text t "Floating point literals may also be in binary, octal or hexadecimal notation: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "0B0_10001110100_0000101001000111101011101111111011000101001101001001'f64"            
            text t " "            
            text t "is approximately 1.72826e35 according to the IEEE floating point standard."          
          text t "\x0A"          
          p():            
            text t "Literals are bounds checked so that they fit the datatype. Non base-10 literals are used mainly for flags and bit pattern representations, therefore bounds checking is done on bit width, not value range. If the literal fits in the bit width of the datatype, it is accepted. Hence: 0b10000000'u8 == 0x80'u8 == 128, but, 0b10000000'i8 == 0x80'i8 == -1 instead of causing an overflow error."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-operators",href="#lexical-analysis-operators"):              
              text t "Operators"          
          p():            
            text t "Nim allows user defined operators. An operator is any combination of the following characters:"            
            pre():              
              text t "=     +     -     *     /     "              
              text t "<"              
              text t "     "              
              text t ">\x0A@     $     ~     "              
              text t "&"              
              text t "     "              
              text t "%     |\x0A!     ?     ^     .     :     \\"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "These keywords are also operators: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "and or not xor shl shr div mod in notin is isnot of"            
            text t "."          
          text t "\x0A"          
          p():            
            span(class="tok"):              
              text t "."            
            text t " "            
            span(class="tok"):              
              text t "="            
            text t ", "            
            span(class="tok"):              
              text t ":"            
            text t ", "            
            span(class="tok"):              
              text t "::"            
            text t " "            
            text t "are not available as general operators; they are used for other notational purposes."          
          text t "\x0A"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "*:"            
            text t " "            
            text t "is as a special case treated as the two tokens "            
            span(class="tok"):              
              text t "*"            
            text t " "            
            text t "and "            
            span(class="tok"):              
              text t ":"            
            text t " "            
            text t "(to support "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var v*: T"            
            text t ")."          
          text t "\x0A"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "not"            
            text t " "            
            text t "keyword is always a unary operator, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a not b"            
            text t " "            
            text t "is parsed as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a(not b)"            
            text t ", not as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "(a) not (b)"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="lexical-analysis-other-tokens",href="#lexical-analysis-other-tokens"):              
              text t "Other tokens"          
          p():            
            text t "The following strings denote other tokens:"            
            pre():              
              text t "`   (    )     {    }     [    ]    ,  ;   [.    .]  {.   .}  (.  .)  [:"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "The "            
            span(id="slice_1"):              
              text t "slice"            
            text t " "            
            text t "operator "            
            span(class="tok"):              
              text t ".."            
            text t " "            
            text t "takes precedence over other tokens that contain a dot: "            
            span(class="tok"):              
              text t "{..}"            
            text t " "            
            text t "are the three tokens "            
            span(class="tok"):              
              text t "{"            
            text t ", "            
            span(class="tok"):              
              text t ".."            
            text t ", "            
            span(class="tok"):              
              text t "}"            
            text t " "            
            text t "and not the two tokens "            
            span(class="tok"):              
              text t "{."            
            text t ", "            
            span(class="tok"):              
              text t ".}"            
            text t "."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="syntax",href="#syntax"):              
              text t "Syntax"          
          p():            
            text t "This section lists Nim's standard syntax. How the parser handles the indentation is already described in the "            
            a(class="reference external",href="#lexical-analysis"):              
              text t "Lexical Analysis"            
            text t " "            
            text t "section."          
          text t "\x0A"          
          p():            
            text t "Nim allows user-definable operators. Binary operators have 11 different levels of precedence."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="syntax-associativity",href="#syntax-associativity"):              
              text t "Associativity"          
          p():            
            text t "Binary operators whose first character is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "^"            
            text t " "            
            text t "are right-associative, all other binary operators are left-associative."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "^/"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "float"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "float"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# a right-associative division operator"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "/"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="DecNumber"):              
              text t "12"            
            text t " "            
            span(class="Operator"):              
              text t "^/"            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            text t " "            
            span(class="Operator"):              
              text t "^/"            
            text t " "            
            span(class="DecNumber"):              
              text t "8"            
            text t " "            
            span(class="Comment"):              
              text t "# 24.0 (4 / 8 = 0.5, then 12 / 0.5 = 24.0)"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="DecNumber"):              
              text t "12"            
            text t "  "            
            span(class="Operator"):              
              text t "/"            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            text t "  "            
            span(class="Operator"):              
              text t "/"            
            text t " "            
            span(class="DecNumber"):              
              text t "8"            
            text t " "            
            span(class="Comment"):              
              text t "# 0.375 (12 / 4 = 3.0, then 3 / 8 = 0.375)"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="syntax-precedence",href="#syntax-precedence"):              
              text t "Precedence"          
          p():            
            text t "Unary operators always bind stronger than any binary operator: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$a + b"            
            text t " "            
            text t "is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "($a) + b"            
            text t " "            
            text t "and not "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$(a + b)"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "If an unary operator's first character is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "@"            
            text t " "            
            text t "it is a "            
            span(id="sigilminuslike_1"):              
              text t "sigil-like"            
            text t " "            
            text t "operator which binds stronger than a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "primarySuffix"            
            text t ": "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "@x.abc"            
            text t " "            
            text t "is parsed as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "(@x).abc"            
            text t " "            
            text t "whereas "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$x.abc"            
            text t " "            
            text t "is parsed as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$(x.abc)"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "For binary operators that are not keywords the precedence is determined by the following rules:"          
          text t "\x0A"          
          p():            
            text t "Operators ending in either "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "->"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "~>"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "=>"            
            text t " "            
            text t "are called "            
            span(id="arrow-like_1"):              
              text t "arrow like"            
            text t ", and have the lowest precedence of all operators."          
          text t "\x0A"          
          p():            
            text t "If the operator ends with "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "="            
            text t " "            
            text t "and its first character is none of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "<"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t ">"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "!"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "="            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "~"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "?"            
            text t ", it is an "            
            em():              
              text t "assignment operator"            
            text t " "            
            text t "which has the second lowest precedence."          
          text t "\x0A"          
          p():            
            text t "Otherwise precedence is determined by the first character."          
          text t "\x0A"          
          table(class="docutils",border="1"):            
            tr():              
              th():                
                text t "Precedence level"              
              th():                
                text t "Operators"              
              th():                
                text t "First character"              
              th():                
                text t "Terminal symbol"            
            text t "\x0A"            
            tr():              
              td():                
                text t "10 (highest)"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "$ ^"              
              td():                
                text t "OP10"            
            text t "\x0A"            
            tr():              
              td():                
                text t "9"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "* / div mod shl shr %"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "* % \\ /"              
              td():                
                text t "OP9"            
            text t "\x0A"            
            tr():              
              td():                
                text t "8"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "+ -"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "+ - ~ |"              
              td():                
                text t "OP8"            
            text t "\x0A"            
            tr():              
              td():                
                text t "7"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "&"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "&"              
              td():                
                text t "OP7"            
            text t "\x0A"            
            tr():              
              td():                
                text t "6"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t ".."              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "."              
              td():                
                text t "OP6"            
            text t "\x0A"            
            tr():              
              td():                
                text t "5"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "== "                    
                    text t "<"                    
                    text t "= "                    
                    text t "<"                    
                    text t " "                    
                    text t ">= > != in notin is isnot not of"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "= "                    
                    text t "<"                    
                    text t " "                    
                    text t "> !"              
              td():                
                text t "OP5"            
            text t "\x0A"            
            tr():              
              td():                
                text t "4"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "and"              
              td():                
                text t "OP4"            
            text t "\x0A"            
            tr():              
              td():                
                text t "3"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "or xor"              
              td():                
                text t "OP3"            
            text t "\x0A"            
            tr():              
              td():                
                text t "2"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "@ : ?"              
              td():                
                text t "OP2"            
            text t "\x0A"            
            tr():              
              td():                
                text t "1"              
              td():                
                em():                  
                  text t "assignment operator"                
                text t " "                
                text t "(like "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "+="                
                text t ", "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "*="                
                text t ")"              
              td():                
                text t "OP1"            
            text t "\x0A"            
            tr():              
              td():                
                text t "0 (lowest)"              
              td():                
                em():                  
                  text t "arrow like operator"                
                text t " "                
                text t "(like "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "->"                
                text t ", "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "=>"                
                text t ")"              
              td():                
                text t "OP0"            
            text t "\x0A"          
          p():            
            text t "Whether an operator is used a prefix operator is also affected by preceding whitespace (this parsing change was introduced with version 0.13.0):"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Operator"):              
              text t "$"            
            span(class="Identifier"):              
              text t "foo"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# is parsed as"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Operator"):              
              text t "$"            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Spacing also determines whether "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "(a, b)"            
            text t " "            
            text t "is parsed as an the argument list of a call or whether it is parsed as a tuple constructor:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "echo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# pass 1 and 2 to echo"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# pass the tuple (1, 2) to echo"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="syntax-grammar",href="#syntax-grammar"):              
              text t "Grammar"          
          p():            
            text t "The grammar's start symbol is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "module"            
            text t "."          
          text t "\x0A"          
          pre():            
            text t "# This file is generated by compiler/parser.nim.\x0Amodule = stmt ^* (\';\' / IND{=})\x0Acomma = \',\' COMMENT?\x0Asemicolon = \';\' COMMENT?\x0Acolon = \':\' COMMENT?\x0Acolcom = \':\' COMMENT?\x0Aoperator =  OP0 | OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7 | OP8 | OP9 | \'or\' | \'xor\' | \'and\' | \'is\' | \'isnot\' | \'in\' | \'notin\' | \'of\' | \'div\' | \'mod\' | \'shl\' | \'shr\' | \'not\' | \'static\' | \'..\'\x0AprefixOperator = operator\x0AoptInd = COMMENT? IND?\x0AoptPar = (IND{>} | IND{=})?\x0AsimpleExpr = arrowExpr (OP0 optInd arrowExpr)* pragma?\x0AarrowExpr = assignExpr (OP1 optInd assignExpr)*\x0AassignExpr = orExpr (OP2 optInd orExpr)*\x0AorExpr = andExpr (OP3 optInd andExpr)*\x0AandExpr = cmpExpr (OP4 optInd cmpExpr)*\x0AcmpExpr = sliceExpr (OP5 optInd sliceExpr)*\x0AsliceExpr = ampExpr (OP6 optInd ampExpr)*\x0AampExpr = plusExpr (OP7 optInd plusExpr)*\x0AplusExpr = mulExpr (OP8 optInd mulExpr)*\x0AmulExpr = dollarExpr (OP9 optInd dollarExpr)*\x0AdollarExpr = primary (OP10 optInd primary)*\x0Asymbol = \'`\' (KEYW|IDENT|literal|(operator|\'(\'|\')\'|\'[\'|\']\'|\'{\'|\'}\'|\'=\')+)+ \'`\' | IDENT | KEYW\x0AexprColonEqExpr = expr (\':\'|\'=\' expr)?\x0AexprList = expr ^+ comma\x0AexprColonEqExprList = exprColonEqExpr (comma exprColonEqExpr)* (comma)?\x0AdotExpr = expr \'.\' optInd (symbol | \'[:\' exprList \']\')\x0AexplicitGenericInstantiation = \'[:\' exprList \']\' ( \'(\' exprColonEqExpr \')\' )?\x0AqualifiedIdent = symbol (\'.\' optInd symbol)?\x0AsetOrTableConstr = \'{\' ((exprColonEqExpr comma)* | \':\' ) \'}\'\x0AcastExpr = \'cast\' \'[\' optInd typeDesc optPar \']\' \'(\' optInd expr optPar \')\'\x0AparKeyw = \'discard\' | \'include\' | \'if\' | \'while\' | \'case\' | \'try\' | \'finally\' | \'except\' | \'for\' | \'block\' | \'const\' | \'let\' | \'when\' | \'var\' | \'mixin\'\x0Apar = \'(\' optInd ( "            
            text t "&parKeyw"            
            text t " "            
            text t "complexOrSimpleStmt ^+ \';\' | \';\' complexOrSimpleStmt ^+ \';\' | pragmaStmt | simpleExpr ( (\'=\' expr (\';\' complexOrSimpleStmt ^+ \';\' )? ) | (\':\' expr (\',\' exprColonEqExpr     ^+ \',\' )? ) ) ) optPar \')\'\x0Aliteral = | INT_LIT | INT8_LIT | INT16_LIT | INT32_LIT | INT64_LIT | UINT_LIT | UINT8_LIT | UINT16_LIT | UINT32_LIT | UINT64_LIT | FLOAT_LIT | FLOAT32_LIT | FLOAT64_LIT | STR_LIT | RSTR_LIT | TRIPLESTR_LIT | CHAR_LIT | NIL\x0AgeneralizedLit = GENERALIZED_STR_LIT | GENERALIZED_TRIPLESTR_LIT\x0AidentOrLiteral = generalizedLit | symbol | literal | par | arrayConstr | setOrTableConstr | castExpr\x0AtupleConstr = \'(\' optInd (exprColonEqExpr comma?)* optPar \')\'\x0AarrayConstr = \'[\' optInd (exprColonEqExpr comma?)* optPar \']\'\x0AprimarySuffix = \'(\' (exprColonEqExpr comma?)* \')\' doBlocks? | doBlocks | \'.\' optInd symbol generalizedLit? | \'[\' optInd indexExprList optPar \']\' | \'{\' optInd indexExprList optPar \'}\' | "            
            text t "&"            
            text t "( \'`\'|IDENT|literal|\'cast\'|\'addr\'|\'type\') expr # command syntax\x0AcondExpr = expr colcom expr optInd (\'elif\' expr colcom expr optInd)* \'else\' colcom expr\x0AifExpr = \'if\' condExpr\x0AwhenExpr = \'when\' condExpr\x0Apragma = \'{.\' optInd (exprColonExpr comma?)* optPar (\'.}\' | \'}\')\x0AidentVis = symbol opr?  # postfix position\x0AidentVisDot = symbol \'.\' optInd symbol opr?\x0AidentWithPragma = identVis pragma?\x0AidentWithPragmaDot = identVisDot pragma?\x0AdeclColonEquals = identWithPragma (comma identWithPragma)* comma? (\':\' optInd typeDesc)? (\'=\' optInd expr)?\x0AidentColonEquals = ident (comma ident)* comma? (\':\' optInd typeDesc)? (\'=\' optInd expr)?)\x0AinlTupleDecl = \'tuple\' [\' optInd  (identColonEquals (comma/semicolon)?)*  optPar \']\'\x0AextTupleDecl = \'tuple\' COMMENT? (IND{>} identColonEquals (IND{=} identColonEquals)*)?\x0AtupleClass = \'tuple\'\x0AparamList = \'(\' declColonEquals ^* (comma/semicolon) \')\'\x0AparamListArrow = paramList? (\'->\' optInd typeDesc)?\x0AparamListColon = paramList? (\':\' optInd typeDesc)?\x0AdoBlock = \'do\' paramListArrow pragmas? colcom stmt\x0AprocExpr = \'proc\' paramListColon pragmas? (\'=\' COMMENT? stmt)?\x0Adistinct = \'distinct\' optInd typeDesc\x0AforStmt = \'for\' (identWithPragma ^+ comma) \'in\' expr colcom stmt\x0AforExpr = forStmt\x0Aexpr = (blockExpr | ifExpr | whenExpr | caseExpr |\xC2\xA0forExpr | tryExpr) / simpleExpr\x0AtypeKeyw = \'var\' | \'out\' | \'ref\' | \'ptr\' | \'shared\' | \'tuple\' | \'proc\' | \'iterator\' | \'distinct\' | \'object\' | \'enum\'\x0Aprimary = typeKeyw typeDescK /  prefixOperator* identOrLiteral primarySuffix* / \'bind\' primary\x0AtypeDesc = simpleExpr\x0AtypeDefAux = simpleExpr | \'concept\' typeClass\x0ApostExprBlocks = \':\' stmt? ( IND{=} doBlock | IND{=} \'of\' exprList \':\' stmt | IND{=} \'elif\' expr \':\' stmt | IND{=} \'except\' exprList \':\' stmt | IND{=} \'else\' \':\' stmt )*\x0AexprStmt = simpleExpr (( \'=\' optInd expr colonBody? ) / ( expr ^+ comma doBlocks / macroColon ))?\x0AimportStmt = \'import\' optInd expr ((comma expr)* / \'except\' optInd (expr ^+ comma))\x0AincludeStmt = \'include\' optInd expr ^+ comma\x0AfromStmt = \'from\' moduleName \'import\' optInd expr (comma expr)*\x0AreturnStmt = \'return\' optInd expr?\x0AraiseStmt = \'raise\' optInd expr?\x0AyieldStmt = \'yield\' optInd expr?\x0AdiscardStmt = \'discard\' optInd expr?\x0AbreakStmt = \'break\' optInd expr?\x0AcontinueStmt = \'break\' optInd expr?\x0AcondStmt = expr colcom stmt COMMENT? (IND{=} \'elif\' expr colcom stmt)* (IND{=} \'else\' colcom stmt)?\x0AifStmt = \'if\' condStmt\x0AwhenStmt = \'when\' condStmt\x0AwhileStmt = \'while\' expr colcom stmt\x0AofBranch = \'of\' exprList colcom stmt\x0AofBranches = ofBranch (IND{=} ofBranch)* (IND{=} \'elif\' expr colcom stmt)* (IND{=} \'else\' colcom stmt)?\x0AcaseStmt = \'case\' expr \':\'? COMMENT? (IND{>} ofBranches DED | IND{=} ofBranches)\x0AtryStmt = \'try\' colcom stmt "            
            text t "&"            
            text t "(IND{=}? \'except\'|\'finally\') (IND{=}? \'except\' exprList colcom stmt)* (IND{=}? \'finally\' colcom stmt)?\x0AtryExpr = \'try\' colcom stmt "            
            text t "&"            
            text t "(optInd \'except\'|\'finally\') (optInd \'except\' exprList colcom stmt)* (optInd \'finally\' colcom stmt)?\x0AexceptBlock = \'except\' colcom stmt\x0AblockStmt = \'block\' symbol? colcom stmt\x0AblockExpr = \'block\' symbol? colcom stmt\x0AstaticStmt = \'static\' colcom stmt\x0AdeferStmt = \'defer\' colcom stmt\x0AasmStmt = \'asm\' pragma? (STR_LIT | RSTR_LIT | TRIPLESTR_LIT)\x0AgenericParam = symbol (comma symbol)* (colon expr)? (\'=\' optInd expr)?\x0AgenericParamList = \'[\' optInd genericParam ^* (comma/semicolon) optPar \']\'\x0Apattern = \'{\' stmt \'}\'\x0AindAndComment = (IND{>} COMMENT)? | COMMENT?\x0Aroutine = optInd identVis pattern? genericParamList? paramListColon pragma? (\'=\' COMMENT? stmt)? indAndComment\x0AcommentStmt = COMMENT\x0Asection(p) = COMMENT? p / (IND{>} (p / COMMENT)^+IND{=} DED)\x0Aconstant = identWithPragma (colon typeDesc)? \'=\' optInd expr indAndComment\x0Aenum = \'enum\' optInd (symbol optInd (\'=\' optInd expr COMMENT?)? comma?)+\x0AobjectWhen = \'when\' expr colcom objectPart COMMENT? (\'elif\' expr colcom objectPart COMMENT?)* (\'else\' colcom objectPart COMMENT?)?\x0AobjectBranch = \'of\' exprList colcom objectPart\x0AobjectBranches = objectBranch (IND{=} objectBranch)* (IND{=} \'elif\' expr colcom objectPart)* (IND{=} \'else\' colcom objectPart)?\x0AobjectCase = \'case\' identWithPragma \':\' typeDesc \':\'? COMMENT? (IND{>} objectBranches DED | IND{=} objectBranches)\x0AobjectPart = IND{>} objectPart^+IND{=} DED / objectWhen / objectCase / \'nil\' / \'discard\' / declColonEquals\x0Aobject = \'object\' pragma? (\'of\' typeDesc)? COMMENT? objectPart\x0AtypeClassParam = (\'var\' | \'out\')? symbol\x0AtypeClass = typeClassParam ^* \',\' (pragma)? (\'of\' typeDesc ^* \',\')? "            
            text t "&IND"            
            text t "{>} stmt\x0AtypeDef = identWithPragmaDot genericParamList? \'=\' optInd typeDefAux indAndComment?\x0AvarTuple = \'(\' optInd identWithPragma ^+ comma optPar \')\' \'=\' optInd expr\x0AcolonBody = colcom stmt doBlocks?\x0Avariable = (varTuple / identColonEquals) colonBody? indAndComment\x0AbindStmt = \'bind\' optInd qualifiedIdent ^+ comma\x0AmixinStmt = \'mixin\' optInd qualifiedIdent ^+ comma\x0ApragmaStmt = pragma (\':\' COMMENT? stmt)?\x0AsimpleStmt = ((returnStmt | raiseStmt | yieldStmt | discardStmt | breakStmt | continueStmt | pragmaStmt | importStmt | exportStmt | fromStmt | includeStmt | commentStmt) / exprStmt) COMMENT?\x0AcomplexOrSimpleStmt = (ifStmt | whenStmt | whileStmt | tryStmt | forStmt | blockStmt | staticStmt | deferStmt | asmStmt | \'proc\' routine | \'method\' routine | \'iterator\' routine | \'macro\' routine | \'template\' routine | \'converter\' routine | \'type\' section(typeDef) | \'const\' section(constant) | (\'let\' | \'var\' | \'using\') section(variable) | bindStmt | mixinStmt) / simpleStmt\x0Astmt = (IND{>} complexOrSimpleStmt^+(IND{=} / \';\') DED) / simpleStmt ^+ \';\'\x0A"          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="order-of-evaluation",href="#order-of-evaluation"):              
              text t "Order of evaluation"          
          p():            
            text t "Order of evaluation is strictly left-to-right, inside-out as it is typical for most others imperative programming languages:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"\""            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "arg"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Operator"):              
              text t "$"            
            span(class="Identifier"):              
              text t "arg"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "arg"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "discard"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "doAssert"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="StringLit"):              
              text t "\"123\""          
          p():            
            text t "Assignments are not special, the left-hand-side expression is evaluated before the right-hand side:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "v"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "getI"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "v"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "inc"            
            text t " "            
            span(class="Identifier"):              
              text t "v"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "array"            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "someCopy"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "getI"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "getI"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "doAssert"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "v"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "someCopy"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "getI"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "getI"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "doAssert"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"          
          p():            
            text t "Rationale: Consistency with overloaded assignment or assignment-like operations, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a = b"            
            text t " "            
            text t "can be read as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "performSomeCopy(a, b)"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "However, the concept of \"order of evaluation\" is only applicable after the code was normalized: The normalization involves template expansions and argument reorderings that have been passed to named parameters:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"\""            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="StringLit"):              
              text t "\"p\""            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "q"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="StringLit"):              
              text t "\"q\""            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# Evaluation order is 'b' before 'a' due to template"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# expansion's semantics."            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "swapArgs"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "doAssert"            
            text t " "            
            span(class="Identifier"):              
              text t "swapArgs"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "q"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "q"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "-"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "6"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "doAssert"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="StringLit"):              
              text t "\"qppq\""            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# Evaluation order is not influenced by named parameters:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "construct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "first"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "second"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# 'p' is evaluated before 'q'!"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "construct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "second"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "q"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "first"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "doAssert"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="StringLit"):              
              text t "\"qppqpq\""          
          p():            
            text t "Rationale: This is far easier to implement than hypothetical alternatives."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="constants-and-constant-expressions",href="#constants-and-constant-expressions"):              
              text t "Constants and Constant Expressions"          
          p():            
            text t "A "            
            span(id="constant_1"):              
              text t "constant"            
            text t " "            
            text t "is a symbol that is bound to the value of a constant expression. Constant expressions are restricted to depend only on the following categories of values and operations, because these are either built into the language or declared and evaluated before semantic analysis of the constant expression:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "literals"            
            text t "\x0A"            
            li():              
              text t "built-in operators"            
            text t "\x0A"            
            li():              
              text t "previously declared constants and compile-time variables"            
            text t "\x0A"            
            li():              
              text t "previously declared macros and templates"            
            text t "\x0A"            
            li():              
              text t "previously declared procedures that have no side effects beyond possibly modifying compile-time variables"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "A constant expression can contain code blocks that may internally use all Nim features supported at compile time (as detailed in the next section below). Within such a code block, it is possible to declare variables and then later read and update them, or declare variables and pass them to procedures that modify them. However, the code in such a block must still adhere to the retrictions listed above for referencing values and operations outside the block."          
          text t "\x0A"          
          p():            
            text t "The ability to access and modify compile-time variables adds flexibility to constant expressions that may be surprising to those coming from other statically typed languages. For example, the following code echoes the beginning of the Fibonacci series "            
            strong():              
              text t "at compile time"            
            text t ". (This is a demonstration of flexibility in defining constants, not a recommended style for solving this problem!)"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "strformat"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "fib_n"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "compileTime"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "fib_prev"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "compileTime"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "fib_prev_prev"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "compileTime"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "next_fib"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "fib_n"            
            text t " "            
            span(class="Operator"):              
              text t "<"            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "fib_n"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "fib_prev_prev"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "fib_prev"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "inc"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "fib_n"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "fib_prev_prev"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "fib_prev"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "fib_prev"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "result"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "const"            
            text t " "            
            span(class="Identifier"):              
              text t "f0"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "next_fib"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "const"            
            text t " "            
            span(class="Identifier"):              
              text t "f1"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "next_fib"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "const"            
            text t " "            
            span(class="Identifier"):              
              text t "display_fib"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "block"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "const"            
            text t " "            
            span(class="Identifier"):              
              text t "f2"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "next_fib"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="RawData"):              
              text t "fmt\"Fibonacci sequence: {f0}, {f1}, {f2}\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="FloatNumber"):              
              text t "3."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "12"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "add"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "result"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="RawData"):              
              text t "fmt\", {next_fib()}\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "static"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "display_fib"          
          text t "\x0A"          
          h1():            
            a(class="toc-backref",id="restrictions-on-compileminustime-execution",href="#restrictions-on-compileminustime-execution"):              
              text t "Restrictions on Compile-Time Execution"          
          p():            
            text t "Nim code that will be executed at compile time cannot use the following language features:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "methods"            
            text t "\x0A"            
            li():              
              text t "closure iterators"            
            text t "\x0A"            
            li():              
              text t "the "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "cast"              
              text t " "              
              text t "operator"            
            text t "\x0A"            
            li():              
              text t "reference (pointer) types"            
            text t "\x0A"            
            li():              
              text t "the FFI"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "Some or all of these restrictions are likely to be lifted over time."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="types",href="#types"):              
              text t "Types"          
          p():            
            text t "All expressions have a type which is known during semantic analysis. Nim is statically typed. One can declare new types, which is in essence defining an identifier that can be used to denote this custom type."          
          text t "\x0A"          
          p():            
            text t "These are the major type classes:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "ordinal types (consist of integer, bool, character, enumeration (and subranges thereof) types)"            
            text t "\x0A"            
            li():              
              text t "floating point types"            
            text t "\x0A"            
            li():              
              text t "string type"            
            text t "\x0A"            
            li():              
              text t "structured types"            
            text t "\x0A"            
            li():              
              text t "reference (pointer) type"            
            text t "\x0A"            
            li():              
              text t "procedural type"            
            text t "\x0A"            
            li():              
              text t "generic type"            
            text t "\x0A"          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-ordinal-types",href="#types-ordinal-types"):              
              text t "Ordinal types"          
          p():            
            text t "Ordinal types have the following characteristics:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "Ordinal types are countable and ordered. This property allows the operation of functions as "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "inc"              
              text t ", "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "ord"              
              text t ", "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "dec"              
              text t " "              
              text t "on ordinal types to be defined."            
            text t "\x0A"            
            li():              
              text t "Ordinal values have a smallest possible value. Trying to count further down than the smallest value gives a checked runtime or static error."            
            text t "\x0A"            
            li():              
              text t "Ordinal values have a largest possible value. Trying to count further than the largest value gives a checked runtime or static error."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "Integers, bool, characters and enumeration types (and subranges of these types) belong to ordinal types. For reasons of simplicity of implementation the types "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "uint"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "uint64"            
            text t " "            
            text t "are not ordinal types. (This will be changed in later versions of the language.)"          
          text t "\x0A"          
          p():            
            text t "A distinct type is an ordinal type if its base type is an ordinal type."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-preminusdefined-integer-types",href="#types-preminusdefined-integer-types"):              
              text t "Pre-defined integer types"          
          p():            
            text t "These integer types are pre-defined:"          
          text t "\x0A"          
          dl(class="docutils"):            
            dt():              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "int"            
            text t "\x0A"            
            dd():              
              text t "the generic signed integer type; its size is platform dependent and has the same size as a pointer. This type should be used in general. An integer literal that has no type suffix is of this type if it is in the range "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "low(int32)..high(int32)"              
              text t " "              
              text t "otherwise the literal's type is "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "int64"              
              text t "."            
            text t "\x0A"            
            dt():              
              text t "intXX"            
            text t "\x0A"            
            dd():              
              text t "additional signed integer types of XX bits use this naming scheme (example: int16 is a 16 bit wide integer). The current implementation supports "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "int8"              
              text t ", "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "int16"              
              text t ", "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "int32"              
              text t ", "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "int64"              
              text t ". Literals of these types have the suffix 'iXX."            
            text t "\x0A"            
            dt():              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "uint"            
            text t "\x0A"            
            dd():              
              text t "the generic "              
              span(id="unsigned-integer_1"):                
                text t "unsigned integer"              
              text t " "              
              text t "type; its size is platform dependent and has the same size as a pointer. An integer literal with the type suffix "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "'u"              
              text t " "              
              text t "is of this type."            
            text t "\x0A"            
            dt():              
              text t "uintXX"            
            text t "\x0A"            
            dd():              
              text t "additional unsigned integer types of XX bits use this naming scheme (example: uint16 is a 16 bit wide unsigned integer). The current implementation supports "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "uint8"              
              text t ", "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "uint16"              
              text t ", "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "uint32"              
              text t ", "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "uint64"              
              text t ". Literals of these types have the suffix 'uXX. Unsigned operations all wrap around; they cannot lead to over- or underflow errors."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "In addition to the usual arithmetic operators for signed and unsigned integers ("            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "+ - *"            
            text t " "            
            text t "etc.) there are also operators that formally work on "            
            em():              
              text t "signed"            
            text t " "            
            text t "integers but treat their arguments as "            
            em():              
              text t "unsigned"            
            text t ": They are mostly provided for backwards compatibility with older versions of the language that lacked unsigned integer types. These unsigned operations for signed integers use the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "%"            
            text t " "            
            text t "suffix as convention:"          
          text t "\x0A"          
          table(class="docutils",border="1"):            
            tr():              
              th():                
                text t "operation"              
              th():                
                text t "meaning"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a +% b"              
              td():                
                text t "unsigned integer addition"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a -% b"              
              td():                
                text t "unsigned integer subtraction"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a *% b"              
              td():                
                text t "unsigned integer multiplication"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a /% b"              
              td():                
                text t "unsigned integer division"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a %% b"              
              td():                
                text t "unsigned integer modulo operation"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a "                    
                    text t "<"                    
                    text t "% b"              
              td():                
                text t "treat "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a"                
                text t " "                
                text t "and "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "b"                
                text t " "                
                text t "as unsigned and compare"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a "                    
                    text t "<"                    
                    text t "=% b"              
              td():                
                text t "treat "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a"                
                text t " "                
                text t "and "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "b"                
                text t " "                
                text t "as unsigned and compare"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "ze(a)"              
              td():                
                text t "extends the bits of "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a"                
                text t " "                
                text t "with zeros until it has the width of the "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "int"                
                text t " "                
                text t "type"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "toU8(a)"              
              td():                
                text t "treats "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a"                
                text t " "                
                text t "as unsigned and converts it to an unsigned integer of 8 bits (but still the "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "int8"                
                text t " "                
                text t "type)"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "toU16(a)"              
              td():                
                text t "treats "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a"                
                text t " "                
                text t "as unsigned and converts it to an unsigned integer of 16 bits (but still the "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "int16"                
                text t " "                
                text t "type)"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "toU32(a)"              
              td():                
                text t "treats "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "a"                
                text t " "                
                text t "as unsigned and converts it to an unsigned integer of 32 bits (but still the "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "int32"                
                text t " "                
                text t "type)"            
            text t "\x0A"          
          p():            
            span(id="automatic-type-conversion_1"):              
              text t "Automatic type conversion"            
            text t " "            
            text t "is performed in expressions where different kinds of integer types are used: the smaller type is converted to the larger."          
          text t "\x0A"          
          p():            
            text t "A "            
            span(id="narrowing-type-conversion_1"):              
              text t "narrowing type conversion"            
            text t " "            
            text t "converts a larger to a smaller type (for example "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "int32 -> int16"            
            text t ". A "            
            span(id="widening-type-conversion_1"):              
              text t "widening type conversion"            
            text t " "            
            text t "converts a smaller type to a larger type (for example "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "int16 -> int32"            
            text t "). In Nim only widening type conversions are "            
            em():              
              text t "implicit"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "myInt16"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Identifier"):              
              text t "i16"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "myInt"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "myInt16"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="DecNumber"):              
              text t "34"            
            text t "     "            
            span(class="Comment"):              
              text t "# of type ``int16``"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "myInt16"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "myInt"            
            text t "  "            
            span(class="Comment"):              
              text t "# of type ``int``"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "myInt16"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Identifier"):              
              text t "i32"            
            text t "   "            
            span(class="Comment"):              
              text t "# of type ``int32``"          
          p():            
            text t "However, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "int"            
            text t " "            
            text t "literals are implicitly convertible to a smaller integer type if the literal's value fits this smaller type and such a conversion is less expensive than other implicit conversions, so "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "myInt16 + 34"            
            text t " "            
            text t "produces an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "int16"            
            text t " "            
            text t "result."          
          text t "\x0A"          
          p():            
            text t "For further details, see "            
            a(class="reference external",href="#type-relations-convertible-relation"):              
              text t "Convertible relation"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-subrange-types",href="#types-subrange-types"):              
              text t "Subrange types"          
          p():            
            text t "A subrange type is a range of values from an ordinal or floating point type (the base type). To define a subrange type, one must specify its limiting values -- the lowest and highest value of the type. For example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Subrange"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "range"            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "PositiveFloat"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "range"            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "0.0"            
            span(class="Operator"):              
              text t ".."            
            span(class="Identifier"):              
              text t "Inf"            
            span(class="Punctuation"):              
              text t "]"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Subrange"            
            text t " "            
            text t "is a subrange of an integer which can only hold the values 0 to 5. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "PositiveFloat"            
            text t " "            
            text t "defines a subrange of all positive floating point values. NaN does not belong to any subrange of floating point types. Assigning any other value to a variable of type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Subrange"            
            text t " "            
            text t "is a checked runtime error (or static error if it can be determined during semantic analysis). Assignments from the base type to one of its subrange types (and vice versa) are allowed."          
          text t "\x0A"          
          p():            
            text t "A subrange type has the same size as its base type ("            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "int"            
            text t " "            
            text t "in the Subrange example)."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-preminusdefined-floating-point-types",href="#types-preminusdefined-floating-point-types"):              
              text t "Pre-defined floating point types"          
          p():            
            text t "The following floating point types are pre-defined:"          
          text t "\x0A"          
          dl(class="docutils"):            
            dt():              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "float"            
            text t "\x0A"            
            dd():              
              text t "the generic floating point type; its size used to be platform dependent, but now it is always mapped to "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "float64"              
              text t ". This type should be used in general."            
            text t "\x0A"            
            dt():              
              text t "floatXX"            
            text t "\x0A"            
            dd():              
              text t "an implementation may define additional floating point types of XX bits using this naming scheme (example: float64 is a 64 bit wide float). The current implementation supports "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "float32"              
              text t " "              
              text t "and "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "float64"              
              text t ". Literals of these types have the suffix 'fXX."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "Automatic type conversion in expressions with different kinds of floating point types is performed: See "            
            a(class="reference external",href="#type-relations-convertible-relation"):              
              text t "Convertible relation"            
            text t " "            
            text t "for further details. Arithmetic performed on floating point types follows the IEEE standard. Integer types are not converted to floating point types automatically and vice versa."          
          text t "\x0A"          
          p():            
            text t "The IEEE standard defines five types of floating-point exceptions:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "Invalid: operations with mathematically invalid operands, for example 0.0/0.0, sqrt(-1.0), and log(-37.8)."            
            text t "\x0A"            
            li():              
              text t "Division by zero: divisor is zero and dividend is a finite nonzero number, for example 1.0/0.0."            
            text t "\x0A"            
            li():              
              text t "Overflow: operation produces a result that exceeds the range of the exponent, for example MAXDOUBLE+0.0000000000001e308."            
            text t "\x0A"            
            li():              
              text t "Underflow: operation produces a result that is too small to be represented as a normal number, for example, MINDOUBLE * MINDOUBLE."            
            text t "\x0A"            
            li():              
              text t "Inexact: operation produces a result that cannot be represented with infinite precision, for example, 2.0 / 3.0, log(1.1) and 0.1 in input."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "The IEEE exceptions are either ignored during execution or mapped to the Nim exceptions: "            
            span(id="floatinvalidoperror_1"):              
              text t "FloatInvalidOpError"            
            text t ", "            
            span(id="floatdivbyzeroerror_1"):              
              text t "FloatDivByZeroError"            
            text t ", "            
            span(id="floatoverflowerror_1"):              
              text t "FloatOverflowError"            
            text t ", "            
            span(id="floatunderflowerror_1"):              
              text t "FloatUnderflowError"            
            text t ", and "            
            span(id="floatinexacterror_1"):              
              text t "FloatInexactError"            
            text t ". These exceptions inherit from the "            
            span(id="floatingpointerror_1"):              
              text t "FloatingPointError"            
            text t " "            
            text t "base class."          
          text t "\x0A"          
          p():            
            text t "Nim provides the pragmas "            
            span(id="nanchecks_1"):              
              text t "nanChecks"            
            text t " "            
            text t "and "            
            span(id="infchecks_1"):              
              text t "infChecks"            
            text t " "            
            text t "to control whether the IEEE exceptions are ignored or trap a Nim exception:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "nanChecks"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "on"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "infChecks"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "on"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="FloatNumber"):              
              text t "1.0"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="FloatNumber"):              
              text t "0.0"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "/"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Comment"):              
              text t "# raises FloatInvalidOpError"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "/"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Comment"):              
              text t "# raises FloatOverflowError"          
          p():            
            text t "In the current implementation "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "FloatDivByZeroError"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "FloatInexactError"            
            text t " "            
            text t "are never raised. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "FloatOverflowError"            
            text t " "            
            text t "is raised instead of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "FloatDivByZeroError"            
            text t ". There is also a "            
            span(id="floatchecks_1"):              
              text t "floatChecks"            
            text t " "            
            text t "pragma that is a short-cut for the combination of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nanChecks"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "infChecks"            
            text t " "            
            text t "pragmas. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "floatChecks"            
            text t " "            
            text t "are turned off as default."          
          text t "\x0A"          
          p():            
            text t "The only operations that are affected by the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "floatChecks"            
            text t " "            
            text t "pragma are the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "+"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "-"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "*"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "/"            
            text t " "            
            text t "operators for floating point types."          
          text t "\x0A"          
          p():            
            text t "An implementation should always use the maximum precision available to evaluate floating pointer values during semantic analysis; this means expressions like "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "0.09'f32 + 0.01'f32 == 0.09'f64 + 0.01'f64"            
            text t " "            
            text t "that are evaluating during constant folding are true."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-boolean-type",href="#types-boolean-type"):              
              text t "Boolean type"          
          p():            
            text t "The boolean type is named "            
            span(id="bool_1"):              
              text t "bool"            
            text t " "            
            text t "in Nim and can be one of the two pre-defined values "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "true"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "false"            
            text t ". Conditions in "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "while"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "if"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "elif"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "when"            
            text t "-statements need to be of type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "bool"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "This condition holds:"            
            pre():              
              text t "ord(false) == 0 and ord(true) == 1"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "The operators "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "not, and, or, xor, "                
                text t "<"                
                text t ", "                
                text t "<"                
                text t "=, >, >=, !=, =="            
            text t " "            
            text t "are defined for the bool type. The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "and"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "or"            
            text t " "            
            text t "operators perform short-cut evaluation. Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            text t " "            
            span(class="Operator"):              
              text t "!="            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "name"            
            text t " "            
            span(class="Operator"):              
              text t "!="            
            text t " "            
            span(class="StringLit"):              
              text t "\"xyz\""            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# p.name is not evaluated if p == nil"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "p"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "next"          
          p():            
            text t "The size of the bool type is one byte."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-character-type",href="#types-character-type"):              
              text t "Character type"          
          p():            
            text t "The character type is named "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "char"            
            text t " "            
            text t "in Nim. Its size is one byte. Thus it cannot represent an UTF-8 character, but a part of it. The reason for this is efficiency: for the overwhelming majority of use-cases, the resulting programs will still handle UTF-8 properly as UTF-8 was specially designed for this. Another reason is that Nim can support "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "array[char, int]"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "set[char]"            
            text t " "            
            text t "efficiently as many algorithms rely on this feature. The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Rune"            
            text t " "            
            text t "type is used for Unicode characters, it can represent any Unicode character. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Rune"            
            text t " "            
            text t "is declared in the "            
            a(class="reference external",href="unicode.html"):              
              text t "unicode module"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-enumeration-types",href="#types-enumeration-types"):              
              text t "Enumeration types"          
          p():            
            text t "Enumeration types define a new type whose values consist of the ones specified. The values are ordered. Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Direction"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "north"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "east"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "south"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "west"          
          p():            
            text t "Now the following holds:"            
            pre():              
              text t "ord(north) == 0\x0Aord(east) == 1\x0Aord(south) == 2\x0Aord(west) == 3\x0A\x0A# Also allowed:\x0Aord(Direction.west) == 3"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "Thus, north "            
            text t "<"            
            text t " "            
            text t "east "            
            text t "<"            
            text t " "            
            text t "south "            
            text t "<"            
            text t " "            
            text t "west. The comparison operators can be used with enumeration types. Instead of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "north"            
            text t " "            
            text t "etc, the enum value can also be qualified with the enum type that it resides in, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Direction.north"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "For better interfacing to other programming languages, the fields of enum types can be assigned an explicit ordinal value. However, the ordinal values have to be in ascending order. A field whose ordinal value is not explicitly given is assigned the value of the previous field + 1."          
          text t "\x0A"          
          p():            
            text t "An explicit ordered enum can have "            
            em():              
              text t "holes"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "TokenType"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "89"            
            text t " "            
            span(class="Comment"):              
              text t "# holes are valid"          
          p():            
            text t "However, it is then not an ordinal anymore, so it is not possible to use these enums as an index type for arrays. The procedures "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "inc"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "dec"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "succ"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pred"            
            text t " "            
            text t "are not available for them either."          
          text t "\x0A"          
          p():            
            text t "The compiler supports the built-in stringify operator "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$"            
            text t " "            
            text t "for enumerations. The stringify's result can be controlled by explicitly giving the string values to use:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "MyEnum"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valueA"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"my value A\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valueB"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"value B\""            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valueC"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valueD"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "As can be seen from the example, it is possible to both specify a field's ordinal value and its string value by using a tuple. It is also possible to only specify one of them."          
          text t "\x0A"          
          p():            
            text t "An enum can be marked with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pure"            
            text t " "            
            text t "pragma so that it's fields are added to a special module specific hidden scope that is only queried as the last attempt. Only non-ambiguous symbols are added to this scope. But one can always access these via type qualification written as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "MyEnum.value"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "MyEnum"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pure"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valueA"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "valueB"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "valueC"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "valueD"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "amb"            
            text t "\x0A  \x0A  "            
            span(class="Identifier"):              
              text t "OtherEnum"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pure"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valueX"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "valueY"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "valueZ"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "amb"            
            text t "\x0A\x0A\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "valueA"            
            text t " "            
            span(class="Comment"):              
              text t "# MyEnum.valueA"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "amb"            
            text t "    "            
            span(class="Comment"):              
              text t "# Error: Unclear whether it's MyEnum.amb or OtherEnum.amb"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "MyEnum"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "amb"            
            text t " "            
            span(class="Comment"):              
              text t "# OK."          
          p():            
            text t "To implement bit fields with enums see "            
            a(class="reference external",href="#set-type-bit-fields"):              
              text t "Bit fields"          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-string-type",href="#types-string-type"):              
              text t "String type"          
          p():            
            text t "All string literals are of the type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "string"            
            text t ". A string in Nim is very similar to a sequence of characters. However, strings in Nim are both zero-terminated and have a length field. One can retrieve the length with the builtin "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "len"            
            text t " "            
            text t "procedure; the length never counts the terminating zero."          
          text t "\x0A"          
          p():            
            text t "The terminating zero cannot be accessed unless the string is converted to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "cstring"            
            text t " "            
            text t "type first. The terminating zero assures that this conversion can be done in O(1) and without any allocations."          
          text t "\x0A"          
          p():            
            text t "The assignment operator for strings always copies the string. The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "&"            
            text t " "            
            text t "operator concatenates strings."          
          text t "\x0A"          
          p():            
            text t "Most native Nim types support conversion to strings with the special "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$"            
            text t " "            
            text t "proc. When calling the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "echo"            
            text t " "            
            text t "proc, for example, the built-in stringify operation for the parameter is called:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            text t " "            
            span(class="Comment"):              
              text t "# calls `$` for `int`"          
          p():            
            text t "Whenever a user creates a specialized object, implementation of this procedure provides for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "string"            
            text t " "            
            text t "representation."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Person"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "age"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "$"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Person"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Comment"):              
              text t "# `$` always returns a string"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "name"            
            text t " "            
            span(class="Operator"):              
              text t "&"            
            text t " "            
            span(class="StringLit"):              
              text t "\" is \""            
            text t " "            
            span(class="Operator"):              
              text t "&"            
            text t "\x0A          "            
            span(class="Operator"):              
              text t "$"            
            span(class="Identifier"):              
              text t "p"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "age"            
            text t " "            
            span(class="Operator"):              
              text t "&"            
            text t " "            
            span(class="Comment"):              
              text t "# we *need* the `$` in front of p.age which"            
            text t "\x0A                   "            
            span(class="Comment"):              
              text t "# is natively an integer to convert it to"            
            text t "\x0A                   "            
            span(class="Comment"):              
              text t "# a string"            
            text t "\x0A          "            
            span(class="StringLit"):              
              text t "\" years old.\""          
          p():            
            text t "While "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$p.name"            
            text t " "            
            text t "can also be used, the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$"            
            text t " "            
            text t "operation on a string does nothing. Note that we cannot rely on automatic conversion from an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "int"            
            text t " "            
            text t "to a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "string"            
            text t " "            
            text t "like we can for the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "echo"            
            text t " "            
            text t "proc."          
          text t "\x0A"          
          p():            
            text t "Strings are compared by their lexicographical order. All comparison operators are available. Strings can be indexed like arrays (lower bound is 0). Unlike arrays, they can be used in case statements:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "paramStr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="StringLit"):              
              text t "\"-v\""            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "incl"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "options"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "optVerbose"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="StringLit"):              
              text t "\"-h\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"-?\""            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "incl"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "options"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "optHelp"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"invalid command line option!"            
            span(class="EscapeSequence"):              
              text t "\\n"            
            span(class="StringLit"):              
              text t "\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Per convention, all strings are UTF-8 strings, but this is not enforced. For example, when reading strings from binary files, they are merely a sequence of bytes. The index operation "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "s[i]"            
            text t " "            
            text t "means the i-th "            
            em():              
              text t "char"            
            text t " "            
            text t "of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "s"            
            text t ", not the i-th "            
            em():              
              text t "unichar"            
            text t ". The iterator "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "runes"            
            text t " "            
            text t "from the "            
            a(class="reference external",href="unicode.html"):              
              text t "unicode module"            
            text t " "            
            text t "can be used for iteration over all Unicode characters."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-cstring-type",href="#types-cstring-type"):              
              text t "cstring type"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "cstring"            
            text t " "            
            text t "type meaning "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "compatible string"            
            text t " "            
            text t "is the native representation of a string for the compilation backend. For the C backend the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "cstring"            
            text t " "            
            text t "type represents a pointer to a zero-terminated char array compatible to the type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "char*"            
            text t " "            
            text t "in Ansi C. Its primary purpose lies in easy interfacing with C. The index operation "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "s[i]"            
            text t " "            
            text t "means the i-th "            
            em():              
              text t "char"            
            text t " "            
            text t "of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "s"            
            text t "; however no bounds checking for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "cstring"            
            text t " "            
            text t "is performed making the index operation unsafe."          
          text t "\x0A"          
          p():            
            text t "A Nim "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "string"            
            text t " "            
            text t "is implicitly convertible to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "cstring"            
            text t " "            
            text t "for convenience. If a Nim string is passed to a C-style variadic proc, it is implicitly converted to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "cstring"            
            text t " "            
            text t "too:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "printf"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "formatstr"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importc"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"printf\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A                                  "            
            span(class="Identifier"):              
              text t "header"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\""              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "printf"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"This works %s\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"as expected\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Even though the conversion is implicit, it is not "            
            em():              
              text t "safe"            
            text t ": The garbage collector does not consider a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "cstring"            
            text t " "            
            text t "to be a root and may collect the underlying memory. However in practice this almost never happens as the GC considers stack roots conservatively. One can use the builtin procs "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "GC_ref"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "GC_unref"            
            text t " "            
            text t "to keep the string data alive for the rare cases where it does not work."          
          text t "\x0A"          
          p():            
            text t "A "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$"            
            text t " "            
            text t "proc is defined for cstrings that returns a string. Thus to get a nim string from a cstring:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "str"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"Hello!\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "cstr"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "str"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "newstr"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "$"            
            span(class="Identifier"):              
              text t "cstr"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="types-structured-types",href="#types-structured-types"):              
              text t "Structured types"          
          p():            
            text t "A variable of a structured type can hold multiple values at the same time. Structured types can be nested to unlimited levels. Arrays, sequences, tuples, objects and sets belong to the structured types."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-array-and-sequence-types",href="#types-array-and-sequence-types"):              
              text t "Array and sequence types"          
          p():            
            text t "Arrays are a homogeneous type, meaning that each element in the array has the same type. Arrays always have a fixed length specified as a constant expression (except for open arrays). They can be indexed by any ordinal type. A parameter "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "A"            
            text t " "            
            text t "may be an "            
            em():              
              text t "open array"            
            text t ", in which case it is indexed by integers from 0 to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "len(A)-1"            
            text t ". An array expression may be constructed by the array constructor "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "[]"            
            text t ". The element type of this array expression is inferred from the type of the first element. All other elements need to be implicitly convertable to this type."          
          text t "\x0A"          
          p():            
            text t "Sequences are similar to arrays but of dynamic length which may change during runtime (like strings). Sequences are implemented as growable arrays, allocating pieces of memory as items are added. A sequence "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "S"            
            text t " "            
            text t "is always indexed by integers from 0 to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "len(S)-1"            
            text t " "            
            text t "and its bounds are checked. Sequences can be constructed by the array constructor "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "[]"            
            text t " "            
            text t "in conjunction with the array to sequence operator "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "@"            
            text t ". Another way to allocate space for a sequence is to call the built-in "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "newSeq"            
            text t " "            
            text t "procedure."          
          text t "\x0A"          
          p():            
            text t "A sequence may be passed to a parameter that is of type "            
            em():              
              text t "open array"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "IntArray"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "array"            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Comment"):              
              text t "# an array that is indexed with 0..5"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "IntSeq"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Comment"):              
              text t "# a sequence of integers"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "IntArray"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "IntSeq"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "6"            
            span(class="Punctuation"):              
              text t "]"            
            text t "  "            
            span(class="Comment"):              
              text t "# [] is the array constructor"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "y"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "@"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "6"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Comment"):              
              text t "# the @ turns the array into a sequence"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "z"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "1.0"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Comment"):              
              text t "# the type of z is array[0..3, float]"          
          p():            
            text t "The lower bound of an array or sequence may be received by the built-in proc "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "low()"            
            text t ", the higher bound by "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "high()"            
            text t ". The length may be received by "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "len()"            
            text t ". "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "low()"            
            text t " "            
            text t "for a sequence or an open array always returns 0, as this is the first valid index. One can append elements to a sequence with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "add()"            
            text t " "            
            text t "proc or the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "&"            
            text t " "            
            text t "operator, and remove (and get) the last element of a sequence with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pop()"            
            text t " "            
            text t "proc."          
          text t "\x0A"          
          p():            
            text t "The notation "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x[i]"            
            text t " "            
            text t "can be used to access the i-th element of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "Arrays are always bounds checked (statically or at runtime). These checks can be disabled via pragmas or invoking the compiler with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "--boundChecks:off"            
            text t " "            
            text t "command line switch."          
          text t "\x0A"          
          p():            
            text t "An array constructor can have explicit indexes for readability:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Values"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valA"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "valB"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "valC"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "const"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "lookupTable"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valA"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"A\""            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valB"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"B\""            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valC"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"C\""            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "]"          
          p():            
            text t "If an index is left out, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "succ(lastIndex)"            
            text t " "            
            text t "is used as the index value:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Values"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valA"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "valB"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "valC"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "valD"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "valE"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "const"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "lookupTable"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valA"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"A\""            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A    "            
            span(class="StringLit"):              
              text t "\"B\""            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "valC"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"C\""            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A    "            
            span(class="StringLit"):              
              text t "\"D\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"e\""            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "]"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="types-open-arrays",href="#types-open-arrays"):              
              text t "Open arrays"          
          p():            
            text t "Often fixed size arrays turn out to be too inflexible; procedures should be able to deal with arrays of different sizes. The "            
            span(id="openarray_1"):              
              text t "openarray"            
            text t " "            
            text t "type allows this; it can only be used for parameters. Openarrays are always indexed with an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "int"            
            text t " "            
            text t "starting at position 0. The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "len"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "low"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "high"            
            text t " "            
            text t "operations are available for open arrays too. Any array with a compatible base type can be passed to an openarray parameter, the index type does not matter. In addition to arrays sequences can also be passed to an open array parameter."          
          text t "\x0A"          
          p():            
            text t "The openarray type cannot be nested: multidimensional openarrays are not supported because this is seldom needed and cannot be done efficiently."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "testOpenArray"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "openArray"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "repr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "testOpenArray"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t "  "            
            span(class="Comment"):              
              text t "# array[]"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "testOpenArray"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Operator"):              
              text t "@"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# seq[]"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="types-varargs",href="#types-varargs"):              
              text t "Varargs"          
          p():            
            text t "A "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "varargs"            
            text t " "            
            text t "parameter is an openarray parameter that additionally allows to pass a variable number of arguments to a procedure. The compiler converts the list of arguments to an array implicitly:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "myWriteln"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "File"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "items"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\""            
            span(class="EscapeSequence"):              
              text t "\\n"            
            span(class="StringLit"):              
              text t "\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "myWriteln"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"def\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"xyz\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# is transformed to:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "myWriteln"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"def\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"xyz\""            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "This transformation is only done if the varargs parameter is the last parameter in the procedure header. It is also possible to perform type conversions in this context:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "myWriteln"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "File"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "$"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "items"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\""            
            span(class="EscapeSequence"):              
              text t "\\n"            
            span(class="StringLit"):              
              text t "\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "myWriteln"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "123"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="FloatNumber"):              
              text t "4.0"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# is transformed to:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "myWriteln"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="Operator"):              
              text t "$"            
            span(class="DecNumber"):              
              text t "123"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Operator"):              
              text t "$"            
            span(class="StringLit"):              
              text t "\"def\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Operator"):              
              text t "$"            
            span(class="FloatNumber"):              
              text t "4.0"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "In this example "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$"            
            text t " "            
            text t "is applied to any argument that is passed to the parameter "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t ". (Note that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$"            
            text t " "            
            text t "applied to strings is a nop.)"          
          text t "\x0A"          
          p():            
            text t "Note that an explicit array constructor passed to a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "varargs"            
            text t " "            
            text t "parameter is not wrapped in another implicit array construction:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "takeV"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "takeV"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "123"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# takeV\'s T is \"int\", not \"array of int\""          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "varargs[typed]"            
            text t " "            
            text t "is treated specially: It matches a variable list of arguments of arbitrary type but "            
            em():              
              text t "always"            
            text t " "            
            text t "constructs an implicit array. This is required so that the builtin "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "echo"            
            text t " "            
            text t "proc does what is expected:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "typed"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "$"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "..."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Operator"):              
              text t "@"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# prints \"@[1, 2, 3]\" and not \"123\""          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="types-unchecked-arrays",href="#types-unchecked-arrays"):              
              text t "Unchecked arrays"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "UncheckedArray[T]"            
            text t " "            
            text t "type is a special kind of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "array"            
            text t " "            
            text t "where its bounds are not checked. This is often useful to implement customized flexibly sized arrays. Additionally an unchecked array is translated into a C array of undetermined size:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "MySeq"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "len"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "cap"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "UncheckedArray"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"          
          p():            
            text t "Produces roughly this C code:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "typedef"            
            text t " "            
            span(class="Keyword"):              
              text t "struct"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "NI"            
            text t " "            
            span(class="Identifier"):              
              text t "len"            
            span(class="Punctuation"):              
              text t ";"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "NI"            
            text t " "            
            span(class="Identifier"):              
              text t "cap"            
            span(class="Punctuation"):              
              text t ";"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "NI"            
            text t " "            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ";"            
            text t "\x0A"            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Identifier"):              
              text t "MySeq"            
            span(class="Punctuation"):              
              text t ";"          
          p():            
            text t "The base type of the unchecked array may not contain any GC'ed memory but this is currently not checked."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Future directions"            
            text t ": GC'ed memory should be allowed in unchecked arrays and there should be an explicit annotation of how the GC is to determine the runtime size of the array."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-tuples-and-object-types",href="#types-tuples-and-object-types"):              
              text t "Tuples and object types"          
          p():            
            text t "A variable of a tuple or object type is a heterogeneous storage container. A tuple or object defines various named "            
            em():              
              text t "fields"            
            text t " "            
            text t "of a type. A tuple also defines an "            
            em():              
              text t "order"            
            text t " "            
            text t "of the fields. Tuples are meant for heterogeneous storage types with no overhead and few abstraction possibilities. The constructor "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "()"            
            text t " "            
            text t "can be used to construct tuples. The order of the fields in the constructor must match the order of the tuple's definition. Different tuple-types are "            
            em():              
              text t "equivalent"            
            text t " "            
            text t "if they specify the same fields of the same type in the same order. The "            
            em():              
              text t "names"            
            text t " "            
            text t "of the fields also have to be identical."          
          text t "\x0A"          
          p():            
            text t "The assignment operator for tuples copies each component. The default assignment operator for objects copies each component. Overloading of the assignment operator is described in "            
            a(class="reference external",href="#typeminusboundminusoperationsminusoperator"):              
              text t "type-bound-operations-operator"            
            text t "."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Person"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "tuple"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "age"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Comment"):              
              text t "# type representing a person:"            
            text t "\x0A                                         "            
            span(class="Comment"):              
              text t "# a person consists of a name"            
            text t "\x0A                                         "            
            span(class="Comment"):              
              text t "# and an age"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "person"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Person"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "person"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Peter\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "age"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="DecNumber"):              
              text t "30"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# the same, but less readable:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "person"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"Peter\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "30"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "A tuple with one unnamed field can be constructed with the parentheses and a trailing comma:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "echoUnaryTuple"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "echoUnaryTuple"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "In fact, a trailing comma is allowed for every tuple construction."          
          text t "\x0A"          
          p():            
            text t "The implementation aligns the fields for best access performance. The alignment is compatible with the way the C compiler does it."          
          text t "\x0A"          
          p():            
            text t "For consistency  with "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "object"            
            text t " "            
            text t "declarations, tuples in a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "type"            
            text t " "            
            text t "section can also be defined with indentation instead of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "[]"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Person"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "tuple"            
            text t "   "            
            span(class="Comment"):              
              text t "# type representing a person"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "   "            
            span(class="Comment"):              
              text t "# a person consists of a name"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "age"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "natural"            
            text t "   "            
            span(class="Comment"):              
              text t "# and an age"          
          p():            
            text t "Objects provide many features that tuples do not. Object provide inheritance and information hiding. Objects have access to their type during at runtime, so that the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "of"            
            text t " "            
            text t "operator can be used to determine the object's type. The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "of"            
            text t " "            
            text t "operator is similar to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "instanceof"            
            text t " "            
            text t "operator in Java."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Person"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "RootObj"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "name"            
            span(class="Operator"):              
              text t "*:"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "   "            
            span(class="Comment"):              
              text t "# the * means that `name` is accessible from other modules"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "age"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "        "            
            span(class="Comment"):              
              text t "# no * means that the field is hidden"            
            text t "\x0A  \x0A  "            
            span(class="Identifier"):              
              text t "Student"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "Person"            
            text t " "            
            span(class="Comment"):              
              text t "# a student is a person"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "id"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "                      "            
            span(class="Comment"):              
              text t "# with an id field"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "student"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Student"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "person"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Person"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "student"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "Student"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# is true"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "student"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "Person"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# also true"          
          p():            
            text t "Object fields that should be visible from outside the defining module, have to be marked by "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "*"            
            text t ". In contrast to tuples, different object types are never "            
            em():              
              text t "equivalent"            
            text t ". Objects that have no ancestor are implicitly "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "final"            
            text t " "            
            text t "and thus have no hidden type field. One can use the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "inheritable"            
            text t " "            
            text t "pragma to introduce new object roots apart from "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system.RootObj"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-object-construction",href="#types-object-construction"):              
              text t "Object construction"          
          p():            
            text t "Objects can also be created with an "            
            span(id="object-construction-expression_1"):              
              text t "object construction expression"            
            text t " "            
            text t "that has the syntax "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "T(fieldA: valueA, fieldB: valueB, ...)"            
            text t " "            
            text t "where "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "T"            
            text t " "            
            text t "is an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "object"            
            text t " "            
            text t "type or a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ref object"            
            text t " "            
            text t "type:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "student"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Student"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Anton\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "age"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "id"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Note that, unlike tuples, objects require the field names along with their values. For a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ref object"            
            text t " "            
            text t "type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system.new"            
            text t " "            
            text t "is invoked implicitly."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-object-variants",href="#types-object-variants"):              
              text t "Object variants"          
          p():            
            text t "Often an object hierarchy is overkill in certain situations where simple variant types are needed. Object variants are tagged unions discriminated via a enumerated type used for runtime type flexibility, mirroring the concepts of "            
            em():              
              text t "sum types"            
            text t " "            
            text t "and "            
            em():              
              text t "algebraic data types (ADTs)"            
            text t " "            
            text t "as found in other languages."          
          text t "\x0A"          
          p():            
            text t "An example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# This is an example how an abstract syntax tree could be modelled in Nim"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "NodeKind"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t "  "            
            span(class="Comment"):              
              text t "# the different node types"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "nkInt"            
            span(class="Punctuation"):              
              text t ","            
            text t "          "            
            span(class="Comment"):              
              text t "# a leaf with an integer value"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "nkFloat"            
            span(class="Punctuation"):              
              text t ","            
            text t "        "            
            span(class="Comment"):              
              text t "# a leaf with a float value"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "nkString"            
            span(class="Punctuation"):              
              text t ","            
            text t "       "            
            span(class="Comment"):              
              text t "# a leaf with a string value"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "nkAdd"            
            span(class="Punctuation"):              
              text t ","            
            text t "          "            
            span(class="Comment"):              
              text t "# an addition"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "nkSub"            
            span(class="Punctuation"):              
              text t ","            
            text t "          "            
            span(class="Comment"):              
              text t "# a subtraction"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "nkIf"            
            text t "            "            
            span(class="Comment"):              
              text t "# an if statement"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Node"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "NodeObj"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "NodeObj"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "NodeKind"            
            text t "  "            
            span(class="Comment"):              
              text t "# the ``kind`` field is the discriminator"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "nkInt"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "intVal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "nkFloat"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "floatVal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "float"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "nkString"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "strVal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "nkAdd"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "nkSub"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "leftOp"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "rightOp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "nkIf"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "condition"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "thenPart"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "elsePart"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# create a new case object:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "nkIf"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "condition"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# accessing n.thenPart is valid because the ``nkIf`` branch is active:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "n"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "thenPart"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "nkFloat"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "floatVal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="FloatNumber"):              
              text t "2.0"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# the following statement raises an `FieldError` exception, because"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# n.kind's value does not fit and the ``nkString`` branch is not active:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "n"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "strVal"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"\""            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# invalid: would change the active object branch:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "n"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "nkInt"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "nkAdd"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "leftOp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "nkInt"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "intVal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A                          "            
            span(class="Identifier"):              
              text t "rightOp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "nkInt"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "intVal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# valid: does not change the active object branch:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "x"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "nkSub"          
          p():            
            text t "As can been seen from the example, an advantage to an object hierarchy is that no casting between different object types is needed. Yet, access to invalid object fields raises an exception."          
          text t "\x0A"          
          p():            
            text t "The syntax of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "case"            
            text t " "            
            text t "in an object declaration follows closely the syntax of the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "case"            
            text t " "            
            text t "statement: The branches in a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "case"            
            text t " "            
            text t "section may be indented too."          
          text t "\x0A"          
          p():            
            text t "In the example the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "kind"            
            text t " "            
            text t "field is called the "            
            span(id="discriminator_1"):              
              text t "discriminator"            
            text t ": For safety its address cannot be taken and assignments to it are restricted: The new value must not lead to a change of the active object branch. Also, when the fields of a particular branch are specified during object construction, the corresponding discriminator value must be specified as a constant expression."          
          text t "\x0A"          
          p():            
            text t "Instead of changing the active object branch, replace the old object in memory with a new one completely:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "nkAdd"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "leftOp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "nkInt"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "intVal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A                          "            
            span(class="Identifier"):              
              text t "rightOp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "nkInt"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "intVal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# change the node's contents:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "NodeObj"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "nkString"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "strVal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Starting with version 0.20 "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system.reset"            
            text t " "            
            text t "cannot be used anymore to support object branch changes as this never was completely memory safe."          
          text t "\x0A"          
          p():            
            text t "As a special rule, the discriminator kind can also be bounded using a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "case"            
            text t " "            
            text t "statement. If possible values of the discriminator variable in a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "case"            
            text t " "            
            text t "statement branch are a subset of discriminator values for the selected object branch, the initialization is considered valid. This analysis only works for immutable discriminators of an ordinal type and disregards "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "elif"            
            text t " "            
            text t "branches. For discriminator values with a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "range"            
            text t " "            
            text t "type, the compiler checks if the entire range of possible values for the discriminator value is valid for the choosen object branch."          
          text t "\x0A"          
          p():            
            text t "A small example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "unknownKind"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "nkSub"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# invalid: unsafe initialization because the kind field is not statically known:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "unknownKind"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "strVal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"y\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "z"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "unknownKind"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "nkAdd"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "nkSub"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# valid: possible values of this branch are a subset of nkAdd/nkSub object branch:"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "z"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "unknownKind"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "leftOp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "rightOp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"ignoring: \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "unknownKind"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# also valid, since unknownKindBounded can only contain the values nkAdd or nkSub"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "unknownKindBounded"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "range"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "nkAdd"            
            span(class="Operator"):              
              text t ".."            
            span(class="Identifier"):              
              text t "nkSub"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "unknownKind"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "z"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "unknownKindBounded"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "leftOp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "rightOp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="types-set-type",href="#types-set-type"):              
              text t "Set type"          
          text t "The set type models the mathematical notion of a set. The set's basetype can only be an ordinal type of a certain size, namely:"          
          ul(class="simple"):            
            li():              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "int8"              
              text t "-"              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "int16"            
            text t "\x0A"            
            li():              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "uint8"              
              text t "/"              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "byte"              
              text t "-"              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "uint16"            
            text t "\x0A"            
            li():              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "char"            
            text t "\x0A"            
            li():              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "enum"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "or equivalent. For signed integers the set's base type is defined to be in the range "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "0 .. MaxSetElements-1"            
            text t " "            
            text t "where "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "MaxSetElements"            
            text t " "            
            text t "is currently always 2^16."          
          text t "\x0A"          
          p():            
            text t "The reason is that sets are implemented as high performance bit vectors. Attempting to declare a set with a larger type will result in an error:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "set"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "int64"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Comment"):              
              text t "# Error: set is too large"          
          p():            
            text t "Sets can be constructed via the set constructor: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "{}"            
            text t " "            
            text t "is the empty set. The empty set is type compatible with any concrete set type. The constructor can also be used to include elements (and ranges of elements):"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "CharSet"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "set"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "char"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "CharSet"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="CharLit"):              
              text t "'a'"            
            span(class="Operator"):              
              text t ".."            
            span(class="CharLit"):              
              text t "'z'"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "'0'"            
            span(class="Operator"):              
              text t ".."            
            span(class="CharLit"):              
              text t "'9'"            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Comment"):              
              text t "# This constructs a set that contains the"            
            text t "\x0A                         "            
            span(class="Comment"):              
              text t "# letters from 'a' to 'z' and the digits"            
            text t "\x0A                         "            
            span(class="Comment"):              
              text t "# from '0' to '9'"          
          p():            
            text t "These operations are supported by sets:"          
          text t "\x0A"          
          table(class="docutils",border="1"):            
            tr():              
              th():                
                text t "operation"              
              th():                
                text t "meaning"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "A + B"              
              td():                
                text t "union of two sets"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "A * B"              
              td():                
                text t "intersection of two sets"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "A - B"              
              td():                
                text t "difference of two sets (A without B's elements)"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "A == B"              
              td():                
                text t "set equality"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "A "                    
                    text t "<"                    
                    text t "= B"              
              td():                
                text t "subset relation (A is subset of B or equal to B)"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "A "                    
                    text t "<"                    
                    text t " "                    
                    text t "B"              
              td():                
                text t "strict subset relation (A is a proper subset of B)"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "e in A"              
              td():                
                text t "set membership (A contains element e)"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "e notin A"              
              td():                
                text t "A does not contain element e"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "contains(A, e)"              
              td():                
                text t "A contains element e"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "card(A)"              
              td():                
                text t "the cardinality of A (number of elements in A)"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "incl(A, elem)"              
              td():                
                text t "same as "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "A = A + {elem}"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "excl(A, elem)"              
              td():                
                text t "same as "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "A = A - {elem}"            
            text t "\x0A"          
          text t "\x0A"          
          h3():            
            a(class="toc-backref",id="set-type-bit-fields",href="#set-type-bit-fields"):              
              text t "Bit fields"          
          p():            
            text t "Sets are often used to define a type for the "            
            em():              
              text t "flags"            
            text t " "            
            text t "of a procedure. This is a cleaner (and type safe) solution than defining integer constants that have to be "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "or"            
            text t "'ed together."          
          text t "\x0A"          
          p():            
            text t "Enum, sets and casting can be used together as in:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "MyFlag"            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "size"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "sizeof"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "cint"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "A"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "B"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "C"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "D"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "MyFlags"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "set"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "MyFlag"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "toNum"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "MyFlags"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "cast"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "cint"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "toFlags"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "v"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "MyFlags"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "cast"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "MyFlags"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "v"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "toNum"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "toNum"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "A"            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "toNum"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "D"            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "8"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "toNum"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "A"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "C"            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "toFlags"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "toFlags"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "7"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "A"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "B"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "C"            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "Note how the set turns enum values into powers of 2."          
          text t "\x0A"          
          p():            
            text t "If using enums and sets with C, use distinct cint."          
          text t "\x0A"          
          p():            
            text t "For interoperability with C see also the "            
            a(class="reference external",href="#implementation-specific-pragmas-bitsize-pragma"):              
              text t "bitsize pragma"            
            text t ". "          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-reference-and-pointer-types",href="#types-reference-and-pointer-types"):              
              text t "Reference and pointer types"          
          p():            
            text t "References (similar to pointers in other programming languages) are a way to introduce many-to-one relationships. This means different references can point to and modify the same location in memory (also called "            
            span(id="aliasing_1"):              
              text t "aliasing"            
            text t ")."          
          text t "\x0A"          
          p():            
            text t "Nim distinguishes between "            
            span(id="traced_1"):              
              text t "traced"            
            text t " "            
            text t "and "            
            span(id="untraced_1"):              
              text t "untraced"            
            text t " "            
            text t "references. Untraced references are also called "            
            em():              
              text t "pointers"            
            text t ". Traced references point to objects of a garbage collected heap, untraced references point to manually allocated objects or to objects somewhere else in memory. Thus untraced references are "            
            em():              
              text t "unsafe"            
            text t ". However for certain low-level operations (accessing the hardware) untraced references are unavoidable."          
          text t "\x0A"          
          p():            
            text t "Traced references are declared with the "            
            strong():              
              text t "ref"            
            text t " "            
            text t "keyword, untraced references are declared with the "            
            strong():              
              text t "ptr"            
            text t " "            
            text t "keyword.  In general, a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ptr T"            
            text t " "            
            text t "is implicitly convertible to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pointer"            
            text t " "            
            text t "type."          
          text t "\x0A"          
          p():            
            text t "An empty subscript "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "[]"            
            text t " "            
            text t "notation can be used to derefer a reference, the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "addr"            
            text t " "            
            text t "procedure returns the address of an item. An address is always an untraced reference. Thus the usage of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "addr"            
            text t " "            
            text t "is an "            
            em():              
              text t "unsafe"            
            text t " "            
            text t "feature."          
          text t "\x0A"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "."            
            text t " "            
            text t "(access a tuple/object field operator) and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "[]"            
            text t " "            
            text t "(array/string/sequence index operator) operators perform implicit dereferencing operations for reference types:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Node"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "NodeObj"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "NodeObj"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "le"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "ri"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "new"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "n"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "data"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "9"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# no need to write n[].data; in fact n[].data is highly discouraged!"          
          p():            
            text t "Automatic dereferencing is also performed for the first argument of a routine call. But currently this feature has to be only enabled via "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "{.experimental: \"implicitDeref\".}"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "experimental"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"implicitDeref\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "depth"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "NodeObj"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "new"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "depth"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# no need to write n[].depth either"          
          p():            
            text t "In order to simplify structural type checking, recursive tuples are not valid:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# invalid recursion"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Identifier"):              
              text t "MyTuple"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "tuple"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "MyTuple"            
            span(class="Punctuation"):              
              text t "]"          
          p():            
            text t "Likewise "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "T = ref T"            
            text t " "            
            text t "is an invalid type."          
          text t "\x0A"          
          p():            
            text t "As a syntactical extension "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "object"            
            text t " "            
            text t "types can be anonymous if declared in a type section via the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ref object"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ptr object"            
            text t " "            
            text t "notations. This feature is useful if an object should only gain reference semantics:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Node"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "le"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "ri"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"          
          p():            
            text t "To allocate a new traced object, the built-in procedure "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "new"            
            text t " "            
            text t "has to be used. To deal with untraced memory, the procedures "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "alloc"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "dealloc"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "realloc"            
            text t " "            
            text t "can be used. The documentation of the system module contains further information."          
          text t "\x0A"          
          p():            
            text t "Nil ---"          
          text t "\x0A"          
          p():            
            text t "If a reference points to "            
            em():              
              text t "nothing"            
            text t ", it has the value "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nil"            
            text t ". "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nil"            
            text t " "            
            text t "is also the default value for all "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ref"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ptr"            
            text t " "            
            text t "types. Dereferencing "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nil"            
            text t " "            
            text t "is an unrecoverable fatal runtime error. A dereferencing operation "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p[]"            
            text t " "            
            text t "implies that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p"            
            text t " "            
            text t "is not nil. This can be exploited by the implementation to optimize code like:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "field"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            text t " "            
            span(class="Operator"):              
              text t "!="            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# if p were nil, ``p[]`` would have caused a crash already,"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# so we know ``p`` is always not nil here."            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "action"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Into:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "field"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "action"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            em():              
              text t "Note"            
            text t ": This is not comparable to C\'s \"undefined behavior\" for dereferencing NULL pointers."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-mixing-gc-ed-memory-with-ptr",href="#types-mixing-gc-ed-memory-with-ptr"):              
              text t "Mixing GC'ed memory with "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "ptr"          
          p():            
            text t "Special care has to be taken if an untraced object contains traced objects like traced references, strings or sequences: in order to free everything properly, the built-in procedure "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "GCunref"            
            text t " "            
            text t "has to be called before freeing the untraced memory manually:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Data"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "tuple"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# allocate memory for Data on the heap:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "d"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "cast"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Keyword"):              
              text t "ptr"            
            text t " "            
            span(class="Identifier"):              
              text t "Data"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "alloc0"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "sizeof"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "Data"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# create a new string on the garbage collected heap:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "d"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "s"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# tell the GC that the string is not needed anymore:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "GCunref"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "d"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# free the memory:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "dealloc"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "d"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Without the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "GCunref"            
            text t " "            
            text t "call the memory allocated for the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "d.s"            
            text t " "            
            text t "string would never be freed. The example also demonstrates two important features for low level programming: the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "sizeof"            
            text t " "            
            text t "proc returns the size of a type or value in bytes. The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "cast"            
            text t " "            
            text t "operator can circumvent the type system: the compiler is forced to treat the result of the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "alloc0"            
            text t " "            
            text t "call (which returns an untyped pointer) as if it would have the type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ptr Data"            
            text t ". Casting should only be done if it is unavoidable: it breaks type safety and bugs can lead to mysterious crashes."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": The example only works because the memory is initialized to zero ("            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "alloc0"            
            text t " "            
            text t "instead of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "alloc"            
            text t " "            
            text t "does this): "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "d.s"            
            text t " "            
            text t "is thus initialized to binary zero which the string assignment can handle. One needs to know low level details like this when mixing garbage collected data with unmanaged memory."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-not-nil-annotation",href="#types-not-nil-annotation"):              
              text t "Not nil annotation"          
          p():            
            text t "All types for which "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nil"            
            text t " "            
            text t "is a valid value can be annotated to exclude "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nil"            
            text t " "            
            text t "as a valid value with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "not nil"            
            text t " "            
            text t "annotation:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "PObject"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "TObj"            
            text t " "            
            span(class="Keyword"):              
              text t "not"            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "TProc"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "not"            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PObject"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"not nil\""            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# compiler catches this:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Keyword"):              
              text t "nil"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# and also this:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PObject"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The compiler ensures that every code path initializes variables which contain non nilable pointers. The details of this analysis are still to be specified here."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-procedural-type",href="#types-procedural-type"):              
              text t "Procedural type"          
          p():            
            text t "A procedural type is internally a pointer to a procedure. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nil"            
            text t " "            
            text t "is an allowed value for variables of a procedural type. Nim uses procedural types to achieve "            
            span(id="functional_1"):              
              text t "functional"            
            text t " "            
            text t "programming techniques."          
          text t "\x0A"          
          p():            
            text t "Examples:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "printItem"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "forEach"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "cdecl"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "forEach"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "printItem"            
            span(class="Punctuation"):              
              text t ")"            
            text t "  "            
            span(class="Comment"):              
              text t "# this will NOT compile because calling conventions differ"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "OnMouseMove"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "closure"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "onMouseMove"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "mouseX"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "mouseY"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# has default calling convention"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"x: \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "mouseX"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\" y: \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "mouseY"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "setOnMouseMove"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "mouseMoveEvent"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "OnMouseMove"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# ok, 'onMouseMove' has the default calling convention, which is compatible"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# to 'closure':"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "setOnMouseMove"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "onMouseMove"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "A subtle issue with procedural types is that the calling convention of the procedure influences the type compatibility: procedural types are only compatible if they have the same calling convention. As a special extension, a procedure of the calling convention "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nimcall"            
            text t " "            
            text t "can be passed to a parameter that expects a proc of the calling convention "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "closure"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "Nim supports these "            
            span(id="calling-conventions_1"):              
              text t "calling conventions"            
            text t ":"          
          text t "\x0A"          
          dl(class="docutils"):            
            dt():              
              span(id="nimcall_1"):                
                text t "nimcall"            
            text t "\x0A"            
            dd():              
              text t "is the default convention used for a Nim "              
              strong():                
                text t "proc"              
              text t ". It is the same as "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "fastcall"              
              text t ", but only for C compilers that support "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "fastcall"              
              text t "."            
            text t "\x0A"            
            dt():              
              span(id="closure_1"):                
                text t "closure"            
            text t "\x0A"            
            dd():              
              text t "is the default calling convention for a "              
              strong():                
                text t "procedural type"              
              text t " "              
              text t "that lacks any pragma annotations. It indicates that the procedure has a hidden implicit parameter (an "              
              em():                
                text t "environment"              
              text t "). Proc vars that have the calling convention "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "closure"              
              text t " "              
              text t "take up two machine words: One for the proc pointer and another one for the pointer to implicitly passed environment."            
            text t "\x0A"            
            dt():              
              span(id="stdcall_1"):                
                text t "stdcall"            
            text t "\x0A"            
            dd():              
              text t "This is the stdcall convention as specified by Microsoft. The generated C procedure is declared with the "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "__stdcall"              
              text t " "              
              text t "keyword."            
            text t "\x0A"            
            dt():              
              span(id="cdecl_1"):                
                text t "cdecl"            
            text t "\x0A"            
            dd():              
              text t "The cdecl convention means that a procedure shall use the same convention as the C compiler. Under Windows the generated C procedure is declared with the "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "__cdecl"              
              text t " "              
              text t "keyword."            
            text t "\x0A"            
            dt():              
              span(id="safecall_1"):                
                text t "safecall"            
            text t "\x0A"            
            dd():              
              text t "This is the safecall convention as specified by Microsoft. The generated C procedure is declared with the "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "__safecall"              
              text t " "              
              text t "keyword. The word "              
              em():                
                text t "safe"              
              text t " "              
              text t "refers to the fact that all hardware registers shall be pushed to the hardware stack."            
            text t "\x0A"            
            dt():              
              span(id="inline_1"):                
                text t "inline"            
            text t "\x0A"            
            dd():              
              text t "The inline convention means the the caller should not call the procedure, but inline its code directly. Note that Nim does not inline, but leaves this to the C compiler; it generates "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "__inline"              
              text t " "              
              text t "procedures. This is only a hint for the compiler: it may completely ignore it and it may inline procedures that are not marked as "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "inline"              
              text t "."            
            text t "\x0A"            
            dt():              
              span(id="fastcall_1"):                
                text t "fastcall"            
            text t "\x0A"            
            dd():              
              text t "Fastcall means different things to different C compilers. One gets whatever the C "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "__fastcall"              
              text t " "              
              text t "means."            
            text t "\x0A"            
            dt():              
              span(id="syscall_1"):                
                text t "syscall"            
            text t "\x0A"            
            dd():              
              text t "The syscall convention is the same as "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "__syscall"              
              text t " "              
              text t "in C. It is used for interrupts."            
            text t "\x0A"            
            dt():              
              span(id="noconv_1"):                
                text t "noconv"            
            text t "\x0A"            
            dd():              
              text t "The generated C code will not have any explicit calling convention and thus use the C compiler's default calling convention. This is needed because Nim's default calling convention for procedures is "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "fastcall"              
              text t " "              
              text t "to improve speed."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "Most calling conventions exist only for the Windows 32-bit platform."          
          text t "\x0A"          
          p():            
            text t "The default calling convention is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nimcall"            
            text t ", unless it is an inner proc (a proc inside of a proc). For an inner proc an analysis is performed whether it accesses its environment. If it does so, it has the calling convention "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "closure"            
            text t ", otherwise it has the calling convention "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nimcall"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-distinct-type",href="#types-distinct-type"):              
              text t "Distinct type"          
          p():            
            text t "A "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "distinct"            
            text t " "            
            text t "type is new type derived from a "            
            span(id="base-type_1"):              
              text t "base type"            
            text t " "            
            text t "that is incompatible with its base type. In particular, it is an essential property of a distinct type that it "            
            strong():              
              text t "does not"            
            text t " "            
            text t "imply a subtype relation between it and its base type. Explicit type conversions from a distinct type to its base type and vice versa are allowed. See also "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "distinctBase"            
            text t " "            
            text t "to get the reverse operation."          
          text t "\x0A"          
          p():            
            text t "A distinct type is an ordinal type if its base type is an ordinal type."          
          text t "\x0A\x0A"          
          h3():            
            a(class="toc-backref",id="distinct-type-modelling-currencies",href="#distinct-type-modelling-currencies"):              
              text t "Modelling currencies"          
          p():            
            text t "A distinct type can be used to model different physical "            
            span(id="units_1"):              
              text t "units"            
            text t " "            
            text t "with a numerical base type, for example. The following example models currencies."          
          text t "\x0A"          
          p():            
            text t "Different currencies should not be mixed in monetary calculations. Distinct types are a perfect tool to model different currencies:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Dollar"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Euro"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "d"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "e"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Euro"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "d"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="DecNumber"):              
              text t "12"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# Error: cannot add a number with no unit and a ``Dollar``"          
          p():            
            text t "Unfortunately, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "d + 12.Dollar"            
            text t " "            
            text t "is not allowed either, because "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "+"            
            text t " "            
            text t "is defined for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "int"            
            text t " "            
            text t "(among others), not for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Dollar"            
            text t ". So a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "+"            
            text t " "            
            text t "for dollars needs to be defined:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "+"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "It does not make sense to multiply a dollar with a dollar, but with a number without unit; and the same holds for division:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Keyword"):              
              text t "div"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Operator"):              
              text t "..."          
          p():            
            text t "This quickly gets tedious. The implementations are trivial and the compiler should not generate all this code only to optimize it away later - after all "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "+"            
            text t " "            
            text t "for dollars should produce the same binary code as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "+"            
            text t " "            
            text t "for ints. The pragma "            
            span(id="borrow_1"):              
              text t "borrow"            
            text t " "            
            text t "has been designed to solve this problem; in principle it generates the above trivial implementations:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Keyword"):              
              text t "div"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dollar"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "borrow"            
            text t " "            
            text t "pragma makes the compiler use the same implementation as the proc that deals with the distinct type's base type, so no code is generated."          
          text t "\x0A"          
          p():            
            text t "But it seems all this boilerplate code needs to be repeated for the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Euro"            
            text t " "            
            text t "currency. This can be solved with "            
            a(class="reference external",href="#templates"):              
              text t "templates"            
            text t "."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "additive"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "+"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "-"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  \x0A  "            
            span(class="Comment"):              
              text t "# unary operators:"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "+"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "-"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "multiplicative"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "base"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "base"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "base"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Keyword"):              
              text t "div"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "base"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Keyword"):              
              text t "mod"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "base"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "comparable"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "<"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "<"              
              text t "="            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "=="            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "defineCurrency"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "base"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            text t " "            
            span(class="Identifier"):              
              text t "base"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "additive"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "multiplicative"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "base"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "comparable"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "defineCurrency"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "Dollar"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "defineCurrency"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "Euro"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The borrow pragma can also be used to annotate the distinct type to allow certain builtin operations to be lifted:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Foo"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "\x0A  \x0A  "            
            span(class="Identifier"):              
              text t "Bar"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            text t " "            
            span(class="Identifier"):              
              text t "Foo"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "bb"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "Bar"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "new"            
            text t " "            
            span(class="Identifier"):              
              text t "bb"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# field access now valid"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "bb"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "90"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "bb"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "s"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""          
          p():            
            text t "Currently only the dot accessor can be borrowed in this way."          
          text t "\x0A\x0A"          
          h3():            
            a(class="toc-backref",id="distinct-type-avoiding-sql-injection-attacks",href="#distinct-type-avoiding-sql-injection-attacks"):              
              text t "Avoiding SQL injection attacks"          
          p():            
            text t "An SQL statement that is passed from Nim to an SQL database might be modelled as a string. However, using string templates and filling in the values is vulnerable to the famous "            
            span(id="sql-injection-attack_1"):              
              text t "SQL injection attack"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "strutils"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "query"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "db"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "DbHandle"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "statement"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "username"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "db"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "query"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"SELECT FROM users WHERE name = \'$1\'\""            
            text t " "            
            span(class="Operator"):              
              text t "%"            
            text t " "            
            span(class="Identifier"):              
              text t "username"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# Horrible security hole, but the compiler does not mind!"          
          p():            
            text t "This can be avoided by distinguishing strings that contain SQL from strings that don't. Distinct types provide a means to introduce a new string type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "SQL"            
            text t " "            
            text t "that is incompatible with "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "string"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "SQL"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "query"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "db"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "DbHandle"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "statement"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "SQL"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "username"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "db"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "query"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"SELECT FROM users WHERE name = \'$1\'\""            
            text t " "            
            span(class="Operator"):              
              text t "%"            
            text t " "            
            span(class="Identifier"):              
              text t "username"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# Static error: `query` expects an SQL string!"          
          p():            
            text t "It is an essential property of abstract types that they "            
            strong():              
              text t "do not"            
            text t " "            
            text t "imply a subtype relation between the abstract type and its base type. Explicit type conversions from "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "string"            
            text t " "            
            text t "to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "SQL"            
            text t " "            
            text t "are allowed:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "strutils"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "sequtils"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "properQuote"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "SQL"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# quotes a string properly for an SQL statement"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "SQL"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "%"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "frmt"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "SQL"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "values"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "openarray"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "SQL"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# quote each argument:"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "v"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "values"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "mapIt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "SQL"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "properQuote"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "it"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# we need a temporary type for the type conversion :-("            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Identifier"):              
              text t "StrSeq"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# call strutils.`%`:"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "SQL"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "frmt"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "%"            
            text t " "            
            span(class="Identifier"):              
              text t "StrSeq"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "v"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "db"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "query"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"SELECT FROM users WHERE name = \'$1\'\""            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "SQL"            
            text t " "            
            span(class="Operator"):              
              text t "%"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "username"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Now we have compile-time checking against SQL injection attacks.  Since "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "\"\".SQL"            
            text t " "            
            text t "is transformed to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "SQL(\"\")"            
            text t " "            
            text t "no new syntax is needed for nice looking "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "SQL"            
            text t " "            
            text t "string literals. The hypothetical "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "SQL"            
            text t " "            
            text t "type actually exists in the library as the "            
            a(class="reference external",href="db_sqlite.html#TSqlQuery"):              
              text t "TSqlQuery type"            
            text t " "            
            text t "of modules like "            
            a(class="reference external",href="db_sqlite.html"):              
              text t "db_sqlite"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="types-auto-type",href="#types-auto-type"):              
              text t "Auto type"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "auto"            
            text t " "            
            text t "type can only be used for return types and parameters. For return types it causes the compiler to infer the type from the routine body:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "returnsInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "auto"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "1984"          
          p():            
            text t "For parameters it currently creates implicitly generic routines:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "auto"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"          
          p():            
            text t "Is the same as:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "T2"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T2"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"          
          p():            
            text t "However later versions of the language might change this to mean \"infer the parameters\' types from the body\". Then the above "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "foo"            
            text t " "            
            text t "would be rejected as the parameters' types can not be inferred from an empty "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "discard"            
            text t " "            
            text t "statement."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="type-relations",href="#type-relations"):              
              text t "Type relations"          
          p():            
            text t "The following section defines several relations on types that are needed to describe the type checking done by the compiler."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="type-relations-type-equality",href="#type-relations-type-equality"):              
              text t "Type equality"          
          p():            
            text t "Nim uses structural type equivalence for most types. Only for objects, enumerations and distinct types name equivalence is used. The following algorithm, "            
            em():              
              text t "in pseudo-code"            
            text t ", determines type equality:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsAux"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PType"            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A                   "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "HashSet"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "PType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "PType"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "incl"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "intXX"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "float"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "floatXX"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "char"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "pointer"            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A        "            
            span(class="Identifier"):              
              text t "bool"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "void"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Comment"):              
              text t "# leaf type: kinds identical; nothing more to check"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "set"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "openarray"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsAux"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "range"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsAux"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t "\x0A        "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "rangeA"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "rangeA"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "rangeB"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "rangeB"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "array"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsAux"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t "\x0A               "            
            span(class="Identifier"):              
              text t "typeEqualsAux"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "indexType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "indexType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Keyword"):              
              text t "tuple"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "tupleLen"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "tupleLen"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A        "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "tupleLen"            
            span(class="Operator"):              
              text t "-"            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A          "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Keyword"):              
              text t "not"            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsAux"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "false"            
            text t "\x0A        "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Keyword"):              
              text t "proc"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsAux"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "parameterTuple"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "parameterTuple"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t "\x0A               "            
            span(class="Identifier"):              
              text t "typeEqualsAux"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "resultType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "resultType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t "\x0A               "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "callingConvention"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "callingConvention"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "typeEquals"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PType"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "HashSet"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "PType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "PType"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsAux"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Since types are graphs which can have cycles, the above algorithm needs an auxiliary set "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "s"            
            text t " "            
            text t "to detect this case."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="type-relations-type-equality-modulo-type-distinction",href="#type-relations-type-equality-modulo-type-distinction"):              
              text t "Type equality modulo type distinction"          
          p():            
            text t "The following algorithm (in pseudo-code) determines whether two types are equal with no respect to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "distinct"            
            text t " "            
            text t "types. For brevity the cycle check with an auxiliary set "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "s"            
            text t " "            
            text t "is omitted:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsOrDistinct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PType"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "intXX"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "float"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "floatXX"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "char"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "pointer"            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A        "            
            span(class="Identifier"):              
              text t "bool"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "void"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Comment"):              
              text t "# leaf type: kinds identical; nothing more to check"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "set"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "openarray"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsOrDistinct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "range"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsOrDistinct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t "\x0A        "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "rangeA"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "rangeA"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "rangeB"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "rangeB"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "array"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsOrDistinct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t "\x0A               "            
            span(class="Identifier"):              
              text t "typeEqualsOrDistinct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "indexType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "indexType"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Keyword"):              
              text t "tuple"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "tupleLen"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "tupleLen"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A        "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "tupleLen"            
            span(class="Operator"):              
              text t "-"            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A          "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Keyword"):              
              text t "not"            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsOrDistinct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "false"            
            text t "\x0A        "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsOrDistinct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Keyword"):              
              text t "proc"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsOrDistinct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "parameterTuple"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "parameterTuple"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t "\x0A               "            
            span(class="Identifier"):              
              text t "typeEqualsOrDistinct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "resultType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "resultType"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t "\x0A               "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "callingConvention"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "callingConvention"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "elif"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsOrDistinct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "elif"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsOrDistinct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="type-relations-subtype-relation",href="#type-relations-subtype-relation"):              
              text t "Subtype relation"          
          p():            
            text t "If object "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t " "            
            text t "inherits from "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "b"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t " "            
            text t "is a subtype of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "b"            
            text t ". This subtype relation is extended to the types "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ref"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ptr"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "isSubtype"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PType"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "aa"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            text t "\x0A      "            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "aa"            
            text t " "            
            span(class="Operator"):              
              text t "!="            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t " "            
            span(class="Identifier"):              
              text t "aa"            
            text t " "            
            span(class="Operator"):              
              text t "!="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "aa"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "aa"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "aa"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "isSubtype"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="type-relations-convertible-relation",href="#type-relations-convertible-relation"):              
              text t "Convertible relation"          
          p():            
            text t "A type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t " "            
            text t "is "            
            strong():              
              text t "implicitly"            
            text t " "            
            text t "convertible to type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "b"            
            text t " "            
            text t "iff the following algorithm returns true:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "isImplicitlyConvertible"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PType"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "isSubtype"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "or"            
            text t " "            
            span(class="Identifier"):              
              text t "isCovariant"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "isIntLiteral"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "int8"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int16"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int32"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int64"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "uint"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "uint8"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "uint16"            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A                 "            
            span(class="Identifier"):              
              text t "uint32"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "uint64"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "float32"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "float64"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ":"            
            text t "     "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "int32"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int64"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "int8"            
            span(class="Punctuation"):              
              text t ":"            
            text t "    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "int16"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int32"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int64"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "int16"            
            span(class="Punctuation"):              
              text t ":"            
            text t "   "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "int32"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int64"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "int32"            
            span(class="Punctuation"):              
              text t ":"            
            text t "   "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "int64"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "uint"            
            span(class="Punctuation"):              
              text t ":"            
            text t "    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "uint32"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "uint64"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "uint8"            
            span(class="Punctuation"):              
              text t ":"            
            text t "   "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "uint16"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "uint32"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "uint64"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "uint16"            
            span(class="Punctuation"):              
              text t ":"            
            text t "  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "uint32"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "uint64"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "uint32"            
            span(class="Punctuation"):              
              text t ":"            
            text t "  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "uint64"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "float32"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "float64"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "float64"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "float32"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "openArray"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t " "            
            span(class="Identifier"):              
              text t "typeEquals"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "array"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "openArray"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t " "            
            span(class="Identifier"):              
              text t "typeEquals"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "baseType"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "char"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "indexType"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "rangeA"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "pointer"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"          
          p():            
            text t "Implicit conversions are also performed for Nim's "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "range"            
            text t " "            
            text t "type constructor."          
          text t "\x0A"          
          p():            
            text t "Let "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a0"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "b0"            
            text t " "            
            text t "of type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "T"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "Let "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "A = range[a0..b0]"            
            text t " "            
            text t "be the argument's type, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "F"            
            text t " "            
            text t "the formal parameter's type. Then an implicit conversion from "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "A"            
            text t " "            
            text t "to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "F"            
            text t " "            
            text t "exists if "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a0 >= low(F) and b0 "                
                text t "<"                
                text t "= high(F)"            
            text t " "            
            text t "and both "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "T"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "F"            
            text t " "            
            text t "are signed integers or if both are unsigned integers."          
          text t "\x0A"          
          p():            
            text t "A type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t " "            
            text t "is "            
            strong():              
              text t "explicitly"            
            text t " "            
            text t "convertible to type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "b"            
            text t " "            
            text t "iff the following algorithm returns true:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "isIntegralType"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PType"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "isOrdinal"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "or"            
            text t " "            
            span(class="Identifier"):              
              text t "t"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Identifier"):              
              text t "float"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "float32"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "float64"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "isExplicitlyConvertible"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PType"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "false"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "isImplicitlyConvertible"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "typeEqualsOrDistinct"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "isIntegralType"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "and"            
            text t " "            
            span(class="Identifier"):              
              text t "isIntegralType"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "isSubtype"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "or"            
            text t " "            
            span(class="Identifier"):              
              text t "isSubtype"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "true"          
          p():            
            text t "The convertible relation can be relaxed by a user-defined type "            
            span(id="converter_1"):              
              text t "converter"            
            text t "."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "converter"            
            text t " "            
            span(class="Identifier"):              
              text t "toInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "char"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "ord"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "chr"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "char"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="CharLit"):              
              text t "'a'"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# implicit conversion magic happens here"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "chr"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Comment"):              
              text t "# => 97"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# you can use the explicit form too"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "chr"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "toInt"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Comment"):              
              text t "# => 97"          
          p():            
            text t "The type conversion "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "T(a)"            
            text t " "            
            text t "is an L-value if "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t " "            
            text t "is an L-value and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typeEqualsOrDistinct(T, type(a))"            
            text t " "            
            text t "holds."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="type-relations-assignment-compatibility",href="#type-relations-assignment-compatibility"):              
              text t "Assignment compatibility"          
          p():            
            text t "An expression "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "b"            
            text t " "            
            text t "can be assigned to an expression "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t " "            
            text t "iff "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t " "            
            text t "is an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "l-value"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "isImplicitlyConvertible(b.typ, a.typ)"            
            text t " "            
            text t "holds."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="overloading-resolution",href="#overloading-resolution"):              
              text t "Overloading resolution"          
          p():            
            text t "In a call "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p(args)"            
            text t " "            
            text t "the routine "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p"            
            text t " "            
            text t "that matches best is selected. If multiple routines match equally well, the ambiguity is reported during semantic analysis."          
          text t "\x0A"          
          p():            
            text t "Every arg in args needs to match. There are multiple different categories how an argument can match. Let "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "f"            
            text t " "            
            text t "be the formal parameter's type and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t " "            
            text t "the type of the argument."          
          text t "\x0A"          
          ol(class="simple"):            
            li():              
              text t "Exact match: "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "a"              
              text t " "              
              text t "and "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t " "              
              text t "are of the same type."            
            text t "\x0A"            
            li():              
              text t "Literal match: "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "a"              
              text t " "              
              text t "is an integer literal of value "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "v"              
              text t " "              
              text t "and "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t " "              
              text t "is a signed or unsigned integer type and "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "v"              
              text t " "              
              text t "is in "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t "'s range. Or:  "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "a"              
              text t " "              
              text t "is a floating point literal of value "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "v"              
              text t " "              
              text t "and "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t " "              
              text t "is a floating point type and "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "v"              
              text t " "              
              text t "is in "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t "'s range."            
            text t "\x0A"            
            li():              
              text t "Generic match: "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t " "              
              text t "is a generic type and "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "a"              
              text t " "              
              text t "matches, for instance "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "a"              
              text t " "              
              text t "is "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "int"              
              text t " "              
              text t "and "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t " "              
              text t "is a generic (constrained) parameter type (like in "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "[T]"              
              text t " "              
              text t "or "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "[T: int|char]"              
              text t "."            
            text t "\x0A"            
            li():              
              text t "Subrange or subtype match: "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "a"              
              text t " "              
              text t "is a "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "range[T]"              
              text t " "              
              text t "and "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "T"              
              text t " "              
              text t "matches "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t " "              
              text t "exactly. Or: "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "a"              
              text t " "              
              text t "is a subtype of "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t "."            
            text t "\x0A"            
            li():              
              text t "Integral conversion match: "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "a"              
              text t " "              
              text t "is convertible to "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t " "              
              text t "and "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t " "              
              text t "and "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "a"              
              text t " "              
              text t "is some integer or floating point type."            
            text t "\x0A"            
            li():              
              text t "Conversion match: "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "a"              
              text t " "              
              text t "is convertible to "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t ", possibly via a user defined "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "converter"              
              text t "."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "These matching categories have a priority: An exact match is better than a literal match and that is better than a generic match etc. In the following "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "count(p, m)"            
            text t " "            
            text t "counts the number of matches of the matching category "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "m"            
            text t " "            
            text t "for the routine "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "A routine "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p"            
            text t " "            
            text t "matches better than a routine "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "q"            
            text t " "            
            text t "if the following algorithm returns true:"            
            pre():              
              text t "for each matching category m in [\"exact match\", \"literal match\", \"generic match\", \"subtype match\", \"integral match\", \"conversion match\"]: if count(p, m) > count(q, m): return true elif count(p, m) == count(q, m): discard \"continue with next category m\" else: return false\x0Areturn \"ambiguous\""            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "Some examples:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "takesInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"int\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "takesInt"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"T\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "takesInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int16"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"int16\""            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "takesInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# \"int\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int32"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "takesInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# \"T\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int16"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "takesInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# \"int16\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "z"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "range"            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "takesInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "z"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# \"T\""          
          p():            
            text t "If this algorithm returns \"ambiguous\" further disambiguation is performed: If the argument "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a"            
            text t " "            
            text t "matches both the parameter type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "f"            
            text t " "            
            text t "of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "g"            
            text t " "            
            text t "of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "q"            
            text t " "            
            text t "via a subtyping relation, the inheritance depth is taken into account:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "A"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "RootObj"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "B"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "A"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "C"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "B"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "obj"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "A"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"A\""            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "obj"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "B"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"B\""            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "C"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# not ambiguous, calls 'B', not 'A' since B is a subtype of A"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# but not vice versa:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "pp"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "obj"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "A"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "obj2"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "B"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"A B\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "pp"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "obj"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "B"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "obj2"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "A"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"B A\""            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# but this is ambiguous:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "pp"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Likewise for generic matches the most specialized generic type (that still matches) is preferred:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "gen"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"ref ref T\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "gen"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"ref T\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "gen"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"T\""            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "ri"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "gen"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "ri"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# \"ref T\""          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="overloading-resolution-overloading-based-on-var-t",href="#overloading-resolution-overloading-based-on-var-t"):              
              text t "Overloading based on 'var T'"          
          p():            
            text t "If the formal parameter "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "f"            
            text t " "            
            text t "is of type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var T"            
            text t " "            
            text t "in addition to the ordinary type checking, the argument is checked to be an "            
            span(id="lminusvalue_1"):              
              text t "l-value"            
            text t ". "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var T"            
            text t " "            
            text t "matches better than just "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "T"            
            text t " "            
            text t "then."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "sayHi"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# matches a non-var int"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "$"            
            span(class="Identifier"):              
              text t "x"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "sayHi"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# matches a var int"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "$"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="DecNumber"):              
              text t "10"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "sayHello"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Comment"):              
              text t "# a mutable version of x"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "sayHi"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# matches the non-var version of sayHi"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "sayHi"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "m"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# matches the var version of sayHi"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "sayHello"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# 3"            
            text t "\x0A            "            
            span(class="Comment"):              
              text t "# 13"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="overloading-resolution-lazy-type-resolution-for-untyped",href="#overloading-resolution-lazy-type-resolution-for-untyped"):              
              text t "Lazy type resolution for untyped"          
          p():            
            strong():              
              text t "Note"            
            text t ": An "            
            span(id="unresolved_1"):              
              text t "unresolved"            
            text t " "            
            text t "expression is an expression for which no symbol lookups and no type checking have been performed."          
          text t "\x0A"          
          p():            
            text t "Since templates and macros that are not declared as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "immediate"            
            text t " "            
            text t "participate in overloading resolution it's essential to have a way to pass unresolved expressions to a template or macro. This is what the meta-type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "untyped"            
            text t " "            
            text t "accomplishes:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "rem"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "rem"            
            text t " "            
            span(class="Identifier"):              
              text t "unresolvedExpression"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "undeclaredIdentifier"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "A parameter of type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "untyped"            
            text t " "            
            text t "always matches any argument (as long as there is any argument passed to it)."          
          text t "\x0A"          
          p():            
            text t "But one has to watch out because other overloads might trigger the argument's resolution:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "rem"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "rem"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# undeclared identifier: 'unresolvedExpression'"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "rem"            
            text t " "            
            span(class="Identifier"):              
              text t "unresolvedExpression"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "undeclaredIdentifier"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "untyped"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "varargs[untyped]"            
            text t " "            
            text t "are the only metatype that are lazy in this sense, the other metatypes "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typed"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc"            
            text t " "            
            text t "are not lazy."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="overloading-resolution-varargs-matching",href="#overloading-resolution-varargs-matching"):              
              text t "Varargs matching"          
          p():            
            text t "See "            
            a(class="reference external",href="#types-varargs"):              
              text t "Varargs"            
            text t "."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="statements-and-expressions",href="#statements-and-expressions"):              
              text t "Statements and expressions"          
          p():            
            text t "Nim uses the common statement/expression paradigm: Statements do not produce a value in contrast to expressions. However, some expressions are statements."          
          text t "\x0A"          
          p():            
            text t "Statements are separated into "            
            span(id="simple-statements_1"):              
              text t "simple statements"            
            text t " "            
            text t "and "            
            span(id="complex-statements_1"):              
              text t "complex statements"            
            text t ". Simple statements are statements that cannot contain other statements like assignments, calls or the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "return"            
            text t " "            
            text t "statement; complex statements can contain other statements. To avoid the "            
            span(id="dangling-else-problem_1"):              
              text t "dangling else problem"            
            text t ", complex statements always have to be indented. The details can be found in the grammar."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-statement-list-expression",href="#statements-and-expressions-statement-list-expression"):              
              text t "Statement list expression"          
          p():            
            text t "Statements can also occur in an expression context that looks like "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "(stmt1; stmt2; ...; ex)"            
            text t ". This is called an statement list expression or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "(;)"            
            text t ". The type of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "(stmt1; stmt2; ...; ex)"            
            text t " "            
            text t "is the type of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ex"            
            text t ". All the other statements must be of type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "void"            
            text t ". (One can use "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "discard"            
            text t " "            
            text t "to produce a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "void"            
            text t " "            
            text t "type.) "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "(;)"            
            text t " "            
            text t "does not introduce a new scope."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-discard-statement",href="#statements-and-expressions-discard-statement"):              
              text t "Discard statement"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "discard"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# discard the return value of `p`"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "discard"            
            text t " "            
            text t "statement evaluates its expression for side-effects and throws the expression's resulting value away."          
          text t "\x0A"          
          p():            
            text t "Ignoring the return value of a procedure without using a discard statement is a static error."          
          text t "\x0A"          
          p():            
            text t "The return value can be ignored implicitly if the called proc/iterator has been declared with the "            
            span(id="discardable_1"):              
              text t "discardable"            
            text t " "            
            text t "pragma:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "discardable"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# now valid"          
          p():            
            text t "An empty "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "discard"            
            text t " "            
            text t "statement is often used as a null statement:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "classify"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "SymChars"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "'_'"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"an identifier\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="CharLit"):              
              text t "'0'"            
            span(class="Operator"):              
              text t ".."            
            span(class="CharLit"):              
              text t "'9'"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"a number\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "discard"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-void-context",href="#statements-and-expressions-void-context"):              
              text t "Void context"          
          p():            
            text t "In a list of statements every expression except the last one needs to have the type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "void"            
            text t ". In addition to this rule an assignment to the builtin "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "result"            
            text t " "            
            text t "symbol also triggers a mandatory "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "void"            
            text t " "            
            text t "context for the subsequent expressions:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "invalid"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"foo\""            
            text t "\x0A  "            
            span(class="StringLit"):              
              text t "\"invalid\""            
            text t "  "            
            span(class="Comment"):              
              text t "# Error: value of type 'string' has to be discarded"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "valid"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "317"            
            text t "\x0A  "            
            span(class="StringLit"):              
              text t "\"valid\""          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-var-statement",href="#statements-and-expressions-var-statement"):              
              text t "Var statement"          
          p():            
            text t "Var statements declare new local and global variables and initialize them. A comma separated list of variables can be used to specify variables of the same type:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "z"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"          
          p():            
            text t "If an initializer is given the type can be omitted: the variable is then of the same type as the initializing expression. Variables are always initialized with a default value if there is no initializing expression. The default value depends on the type and is always a zero in binary."          
          text t "\x0A"          
          table(class="docutils",border="1"):            
            tr():              
              th():                
                text t "Type"              
              th():                
                text t "default value"            
            text t "\x0A"            
            tr():              
              td():                
                text t "any integer type"              
              td():                
                text t "0"            
            text t "\x0A"            
            tr():              
              td():                
                text t "any float"              
              td():                
                text t "0.0"            
            text t "\x0A"            
            tr():              
              td():                
                text t "char"              
              td():                
                text t "\'\\0\'"            
            text t "\x0A"            
            tr():              
              td():                
                text t "bool"              
              td():                
                text t "false"            
            text t "\x0A"            
            tr():              
              td():                
                text t "ref or pointer type"              
              td():                
                text t "nil"            
            text t "\x0A"            
            tr():              
              td():                
                text t "procedural type"              
              td():                
                text t "nil"            
            text t "\x0A"            
            tr():              
              td():                
                text t "sequence"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "@[]"            
            text t "\x0A"            
            tr():              
              td():                
                text t "string"              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "\"\""            
            text t "\x0A"            
            tr():              
              td():                
                text t "tuple[x: A, y: B, ...]"              
              td():                
                text t "(default(A), default(B), ...) (analogous for objects)"            
            text t "\x0A"            
            tr():              
              td():                
                text t "array[0..., T]"              
              td():                
                text t "[default(T), ...]"            
            text t "\x0A"            
            tr():              
              td():                
                text t "range[T]"              
              td():                
                text t "default(T); this may be out of the valid range"            
            text t "\x0A"            
            tr():              
              td():                
                text t "T = enum"              
              td():                
                text t "cast"                
                a(class="reference external",href="0"):                  
                  text t "T"                
                text t "; this may be an invalid value"            
            text t "\x0A"          
          p():            
            text t "The implicit initialization can be avoided for optimization reasons with the "            
            span(id="noinit_1"):              
              text t "noinit"            
            text t " "            
            text t "pragma:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "noInit"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "array"            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "1023"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "char"            
            span(class="Punctuation"):              
              text t "]"          
          p():            
            text t "If a proc is annotated with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "noinit"            
            text t " "            
            text t "pragma this refers to its implicit "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "result"            
            text t " "            
            text t "variable:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "returnUndefinedValue"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "noinit"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"          
          p():            
            text t "The implicit initialization can be also prevented by the "            
            span(id="requiresinit_1"):              
              text t "requiresInit"            
            text t " "            
            text t "type pragma. The compiler requires an explicit initialization for the object and all of its fields. However it does a "            
            span(id="control-flow-analysis_1"):              
              text t "control flow analysis"            
            text t " "            
            text t "to prove the variable has been initialized and does not rely on syntactic properties:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "MyObject"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "requiresInit"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# the following is valid:"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "MyObject"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "someCondition"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# use x"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-let-statement",href="#statements-and-expressions-let-statement"):              
              text t "Let statement"          
          p():            
            text t "A "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "let"            
            text t " "            
            text t "statement declares new local and global "            
            span(id="single-assignment_1"):              
              text t "single assignment"            
            text t " "            
            text t "variables and binds a value to them. The syntax is the same as that of the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t " "            
            text t "statement, except that the keyword "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t " "            
            text t "is replaced by the keyword "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "let"            
            text t ". Let variables are not l-values and can thus not be passed to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t " "            
            text t "parameters nor can their address be taken. They cannot be assigned new values."          
          text t "\x0A"          
          p():            
            text t "For let variables the same pragmas are available as for ordinary variables."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-tuple-unpacking",href="#statements-and-expressions-tuple-unpacking"):              
              text t "Tuple unpacking"          
          p():            
            text t "In a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "let"            
            text t " "            
            text t "statement tuple unpacking can be performed. The special identifier "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "_"            
            text t " "            
            text t "can be used to ignore some parts of the tuple:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "returnsTuple"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "_"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "z"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "returnsTuple"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-const-section",href="#statements-and-expressions-const-section"):              
              text t "Const section"          
          p():            
            text t "A const section declares constants whose values are constant expressions:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "strutils"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "const"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "roundPi"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="FloatNumber"):              
              text t "3.1415"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "constEval"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "contains"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "'b'"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# computed at compile time!"          
          p():            
            text t "Once declared, a constant's symbol can be used as a constant expression."          
          text t "\x0A"          
          p():            
            text t "See "            
            a(class="reference external",href="#constants-and-constant-expressions"):              
              text t "Constants and Constant Expressions"            
            text t " "            
            text t "for details."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-static-statementslashexpression",href="#statements-and-expressions-static-statementslashexpression"):              
              text t "Static statement/expression"          
          p():            
            text t "A static statement/expression explicitly requires compile-time execution. Even some code that has side effects is permitted in a static block:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "static"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"echo at compile time\""          
          p():            
            text t "There are limitations on what Nim code can be executed at compile time; see "            
            a(class="reference external",href="#restrictions-on-compileminustime-execution"):              
              text t "Restrictions on Compile-Time Execution"            
            text t " "            
            text t "for details. It's a static error if the compiler cannot execute the block at compile time."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-if-statement",href="#statements-and-expressions-if-statement"):              
              text t "If statement"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "name"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "readLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdin"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "name"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="StringLit"):              
              text t "\"Andreas\""            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"What a nice name!\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "elif"            
            text t " "            
            span(class="Identifier"):              
              text t "name"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="StringLit"):              
              text t "\"\""            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Don\'t you have a name?\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Boring name...\""          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "if"            
            text t " "            
            text t "statement is a simple way to make a branch in the control flow: The expression after the keyword "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "if"            
            text t " "            
            text t "is evaluated, if it is true the corresponding statements after the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t ":"            
            text t " "            
            text t "are executed. Otherwise the expression after the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "elif"            
            text t " "            
            text t "is evaluated (if there is an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "elif"            
            text t " "            
            text t "branch), if it is true the corresponding statements after the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t ":"            
            text t " "            
            text t "are executed. This goes on until the last "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "elif"            
            text t ". If all conditions fail, the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "else"            
            text t " "            
            text t "part is executed. If there is no "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "else"            
            text t " "            
            text t "part, execution continues with the next statement."          
          text t "\x0A"          
          p():            
            text t "In "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "if"            
            text t " "            
            text t "statements new scopes begin immediately after the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "if"            
            text t "/"            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "elif"            
            text t "/"            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "else"            
            text t " "            
            text t "keywords and ends after the corresponding "            
            em():              
              text t "then"            
            text t " "            
            text t "block. For visualization purposes the scopes have been enclosed in "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "{| |}"            
            text t " "            
            text t "in the following example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "|"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "input"            
            text t " "            
            span(class="Operator"):              
              text t "=~"            
            text t " "            
            span(class="RawData"):              
              text t "re\"(\\w+)=\\w+\""            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "isMatch"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"key \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\" value \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            text t "  "            
            span(class="Operator"):              
              text t "|"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "elif"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "|"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "input"            
            text t " "            
            span(class="Operator"):              
              text t "=~"            
            text t " "            
            span(class="RawData"):              
              text t "re\"\""            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "isMatch"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"new m in this scope\""            
            text t "  "            
            span(class="Operator"):              
              text t "|"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "|"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"m not declared here\""            
            text t "  "            
            span(class="Operator"):              
              text t "|"            
            span(class="Punctuation"):              
              text t "}"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-case-statement",href="#statements-and-expressions-case-statement"):              
              text t "Case statement"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "readline"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdin"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="StringLit"):              
              text t "\"delete-everything\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"restart-computer\""            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"permission denied\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="StringLit"):              
              text t "\"go-for-a-walk\""            
            span(class="Punctuation"):              
              text t ":"            
            text t "     "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"please yourself\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "                   "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"unknown command\""            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# indentation of the branches is also allowed; and so is an optional colon"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# after the selecting expression:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "readline"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdin"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="StringLit"):              
              text t "\"delete-everything\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"restart-computer\""            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"permission denied\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="StringLit"):              
              text t "\"go-for-a-walk\""            
            span(class="Punctuation"):              
              text t ":"            
            text t "     "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"please yourself\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "                   "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"unknown command\""          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "case"            
            text t " "            
            text t "statement is similar to the if statement, but it represents a multi-branch selection. The expression after the keyword "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "case"            
            text t " "            
            text t "is evaluated and if its value is in a "            
            em():              
              text t "slicelist"            
            text t " "            
            text t "the corresponding statements (after the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "of"            
            text t " "            
            text t "keyword) are executed. If the value is not in any given "            
            em():              
              text t "slicelist"            
            text t " "            
            text t "the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "else"            
            text t " "            
            text t "part is executed. If there is no "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "else"            
            text t " "            
            text t "part and not all possible values that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "expr"            
            text t " "            
            text t "can hold occur in a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "slicelist"            
            text t ", a static error occurs. This holds only for expressions of ordinal types. \"All possible values\" of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "expr"            
            text t " "            
            text t "are determined by "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "expr"            
            text t "'s type. To suppress the static error an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "else"            
            text t " "            
            text t "part with an empty "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "discard"            
            text t " "            
            text t "statement should be used."          
          text t "\x0A"          
          p():            
            text t "For non ordinal types it is not possible to list every possible value and so these always require an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "else"            
            text t " "            
            text t "part."          
          text t "\x0A"          
          p():            
            text t "Because case statements are checked for exhaustiveness during semantic analysis, the value in every "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "of"            
            text t " "            
            text t "branch must be a constant expression. This restriction also allows the compiler to generate more performant code."          
          text t "\x0A"          
          p():            
            text t "As a special semantic extension, an expression in an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "of"            
            text t " "            
            text t "branch of a case statement may evaluate to a set or array constructor; the set or array is then expanded into a list of its elements:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "const"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "SymChars"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "set"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "char"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="CharLit"):              
              text t "'a'"            
            span(class="Operator"):              
              text t ".."            
            span(class="CharLit"):              
              text t "'z'"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "'A'"            
            span(class="Operator"):              
              text t ".."            
            span(class="CharLit"):              
              text t "'Z'"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "\'\\x80\'"            
            span(class="Operator"):              
              text t ".."            
            span(class="CharLit"):              
              text t "\'\\xFF\'"            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "classify"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "SymChars"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "'_'"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"an identifier\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="CharLit"):              
              text t "'0'"            
            span(class="Operator"):              
              text t ".."            
            span(class="CharLit"):              
              text t "'9'"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"a number\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"other\""            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# is equivalent to:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "classify"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="CharLit"):              
              text t "'a'"            
            span(class="Operator"):              
              text t ".."            
            span(class="CharLit"):              
              text t "'z'"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "'A'"            
            span(class="Operator"):              
              text t ".."            
            span(class="CharLit"):              
              text t "'Z'"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "\'\\x80\'"            
            span(class="Operator"):              
              text t ".."            
            span(class="CharLit"):              
              text t "\'\\xFF\'"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "'_'"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"an identifier\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="CharLit"):              
              text t "'0'"            
            span(class="Operator"):              
              text t ".."            
            span(class="CharLit"):              
              text t "'9'"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"a number\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"other\""          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-when-statement",href="#statements-and-expressions-when-statement"):              
              text t "When statement"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "when"            
            text t " "            
            span(class="Identifier"):              
              text t "sizeof"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"running on a 16 bit system!\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "elif"            
            text t " "            
            span(class="Identifier"):              
              text t "sizeof"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"running on a 32 bit system!\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "elif"            
            text t " "            
            span(class="Identifier"):              
              text t "sizeof"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "8"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"running on a 64 bit system!\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"cannot happen!\""          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "when"            
            text t " "            
            text t "statement is almost identical to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "if"            
            text t " "            
            text t "statement with some exceptions:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "Each condition ("              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "expr"              
              text t ") has to be a constant expression (of type "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "bool"              
              text t ")."            
            text t "\x0A"            
            li():              
              text t "The statements do not open a new scope."            
            text t "\x0A"            
            li():              
              text t "The statements that belong to the expression that evaluated to true are translated by the compiler, the other statements are not checked for semantics! However, each condition is checked for semantics."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "when"            
            text t " "            
            text t "statement enables conditional compilation techniques. As a special syntactic extension, the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "when"            
            text t " "            
            text t "construct is also available within "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "object"            
            text t " "            
            text t "definitions."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-when-nimvm-statement",href="#statements-and-expressions-when-nimvm-statement"):              
              text t "When nimvm statement"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nimvm"            
            text t " "            
            text t "is a special symbol, that may be used as expression of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "when nimvm"            
            text t " "            
            text t "statement to differentiate execution path between compile time and the executable."          
          text t "\x0A"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "someProcThatMayRunInCompileTime"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "when"            
            text t " "            
            span(class="Identifier"):              
              text t "nimvm"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Comment"):              
              text t "# This branch is taken at compile time."            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Comment"):              
              text t "# This branch is taken in the executable."            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "false"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "const"            
            text t " "            
            span(class="Identifier"):              
              text t "ctValue"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "someProcThatMayRunInCompileTime"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "rtValue"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "someProcThatMayRunInCompileTime"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "ctValue"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "rtValue"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "false"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "when nimvm"            
            text t " "            
            text t "statement must meet the following requirements:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "Its expression must always be "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "nimvm"              
              text t ". More complex expressions are not allowed."            
            text t "\x0A"            
            li():              
              text t "It must not contain "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "elif"              
              text t " "              
              text t "branches."            
            text t "\x0A"            
            li():              
              text t "It must contain "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "else"              
              text t " "              
              text t "branch."            
            text t "\x0A"            
            li():              
              text t "Code in branches must not affect semantics of the code that follows the "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "when nimvm"              
              text t " "              
              text t "statement. E.g. it must not define symbols that are used in the following code."            
            text t "\x0A"          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-return-statement",href="#statements-and-expressions-return-statement"):              
              text t "Return statement"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="DecNumber"):              
              text t "40"            
            span(class="Operator"):              
              text t "+"            
            span(class="DecNumber"):              
              text t "2"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "return"            
            text t " "            
            text t "statement ends the execution of the current procedure. It is only allowed in procedures. If there is an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "expr"            
            text t ", this is syntactic sugar for:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "expr"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "result"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "return"            
            text t " "            
            text t "without an expression is a short notation for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "return result"            
            text t " "            
            text t "if the proc has a return type. The "            
            span(id="result_1"):              
              text t "result"            
            text t " "            
            text t "variable is always the return value of the procedure. It is automatically declared by the compiler. As all variables, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "result"            
            text t " "            
            text t "is initialized to (binary) zero:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "returnZero"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# implicitly returns 0"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-yield-statement",href="#statements-and-expressions-yield-statement"):              
              text t "Yield statement"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "yield"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "yield"            
            text t " "            
            text t "statement is used instead of the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "return"            
            text t " "            
            text t "statement in iterators. It is only valid in iterators. Execution is returned to the body of the for loop that called the iterator. Yield does not end the iteration process, but execution is passed back to the iterator if the next iteration starts. See the section about iterators ("            
            a(class="reference external",href="#iterators-and-the-for-statement"):              
              text t "Iterators and the for statement"            
            text t ") for further information."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-block-statement",href="#statements-and-expressions-block-statement"):              
              text t "Block statement"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "found"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "false"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "block"            
            text t " "            
            span(class="Identifier"):              
              text t "myblock"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "j"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "j"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "7"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A        "            
            span(class="Identifier"):              
              text t "found"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A        "            
            span(class="Keyword"):              
              text t "break"            
            text t " "            
            span(class="Identifier"):              
              text t "myblock"            
            text t " "            
            span(class="Comment"):              
              text t "# leave the block, in this case both for-loops"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "found"          
          p():            
            text t "The block statement is a means to group statements to a (named) "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "block"            
            text t ". Inside the block, the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "break"            
            text t " "            
            text t "statement is allowed to leave the block immediately. A "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "break"            
            text t " "            
            text t "statement can contain a name of a surrounding block to specify which block is to leave."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-break-statement",href="#statements-and-expressions-break-statement"):              
              text t "Break statement"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "break"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "break"            
            text t " "            
            text t "statement is used to leave a block immediately. If "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "symbol"            
            text t " "            
            text t "is given, it is the name of the enclosing block that is to leave. If it is absent, the innermost block is left."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-while-statement",href="#statements-and-expressions-while-statement"):              
              text t "While statement"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Please tell me your password:\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "pw"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "readLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdin"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "pw"            
            text t " "            
            span(class="Operator"):              
              text t "!="            
            text t " "            
            span(class="StringLit"):              
              text t "\"12345\""            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Wrong password! Next try:\""            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "pw"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "readLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdin"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "while"            
            text t " "            
            text t "statement is executed until the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "expr"            
            text t " "            
            text t "evaluates to false. Endless loops are no error. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "while"            
            text t " "            
            text t "statements open an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "implicit block"            
            text t ", so that they can be left with a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "break"            
            text t " "            
            text t "statement."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-continue-statement",href="#statements-and-expressions-continue-statement"):              
              text t "Continue statement"          
          p():            
            text t "A "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "continue"            
            text t " "            
            text t "statement leads to the immediate next iteration of the surrounding loop construct. It is only allowed within a loop. A continue statement is syntactic sugar for a nested block:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "expr1"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "stmt1"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "continue"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "stmt2"          
          p():            
            text t "Is equivalent to:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "expr1"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "block"            
            text t " "            
            span(class="Identifier"):              
              text t "myBlockName"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "stmt1"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "break"            
            text t " "            
            span(class="Identifier"):              
              text t "myBlockName"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "stmt2"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-assembler-statement",href="#statements-and-expressions-assembler-statement"):              
              text t "Assembler statement"          
          p():            
            text t "The direct embedding of assembler code into Nim code is supported by the unsafe "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "asm"            
            text t " "            
            text t "statement. Identifiers in the assembler code that refer to Nim identifiers shall be enclosed in a special character which can be specified in the statement's pragmas. The default special character is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "'`'"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "push"            
            text t " "            
            span(class="Identifier"):              
              text t "stackTrace"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="Identifier"):              
              text t "off"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "addInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# a in eax, and b in edx"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "asm"            
            text t " "            
            span(class="LongStringLit"):              
              text t "\"\"\" mov eax, `a` add eax, `b` jno theEnd call `raiseOverflow` theEnd: \"\"\""            
            text t "\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pop"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "If the GNU assembler is used, quotes and newlines are inserted automatically:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "addInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "asm"            
            text t " "            
            span(class="LongStringLit"):              
              text t "\"\"\" addl %%ecx, %%eax jno 1 call `raiseOverflow` 1: :\"=a\"(`result`) :\"a\"(`a`), \"c\"(`b`) \"\"\""          
          p():            
            text t "Instead of:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "addInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "asm"            
            text t " "            
            span(class="LongStringLit"):              
              text t "\"\"\" \"addl %%ecx, %%eax\\n\" \"jno 1\\n\" \"call `raiseOverflow`\\n\" \"1: \\n\" :\"=a\"(`result`) :\"a\"(`a`), \"c\"(`b`) \"\"\""          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-using-statement",href="#statements-and-expressions-using-statement"):              
              text t "Using statement"          
          p():            
            text t "The using statement provides syntactic convenience in modules where the same parameter names and types are used over and over. Instead of:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Context"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "bar"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Context"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "counter"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "baz"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Context"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "..."          
          p():            
            text t "One can tell the compiler about the convention that a parameter of name "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "c"            
            text t " "            
            text t "should default to type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Context"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "n"            
            text t " "            
            text t "should default to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Node"            
            text t " "            
            text t "etc.:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "using"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Context"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "counter"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "bar"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "counter"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "baz"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "mixedMode"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# 'c' is inferred to be of the type 'Context'"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# 'n' is inferred to be of the type 'Node'"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# But 'x' and 'y' are of type 'int'."          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "using"            
            text t " "            
            text t "section uses the same indentation based grouping syntax as a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "let"            
            text t " "            
            text t "section."          
          text t "\x0A"          
          p():            
            text t "Note that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "using"            
            text t " "            
            text t "is not applied for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "template"            
            text t " "            
            text t "since untyped template parameters default to the type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system.untyped"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "Mixing parameters that should use the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "using"            
            text t " "            
            text t "declaration with parameters that are explicitly typed is possible and requires a semicolon between them."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-if-expression",href="#statements-and-expressions-if-expression"):              
              text t "If expression"          
          p():            
            text t "An "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "if expression"            
            text t " "            
            text t "is almost like an if statement, but it is an expression. Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t ">"            
            text t " "            
            span(class="DecNumber"):              
              text t "8"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="DecNumber"):              
              text t "9"            
            text t " "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="DecNumber"):              
              text t "10"          
          p():            
            text t "An if expression always results in a value, so the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "else"            
            text t " "            
            text t "part is required. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Elif"            
            text t " "            
            text t "parts are also allowed."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-when-expression",href="#statements-and-expressions-when-expression"):              
              text t "When expression"          
          p():            
            text t "Just like an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "if expression"            
            text t ", but corresponding to the when statement."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-case-expression",href="#statements-and-expressions-case-expression"):              
              text t "Case expression"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "case expression"            
            text t " "            
            text t "is again very similar to the case statement:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "favoriteFood"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "animal"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="StringLit"):              
              text t "\"dog\""            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"bones\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="StringLit"):              
              text t "\"cat\""            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"mice\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "elif"            
            text t " "            
            span(class="Identifier"):              
              text t "animal"            
            span(class="Operator"):              
              text t "."            
            span(class="RawData"):              
              text t "endsWith\"whale\""            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"plankton\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"I\'m not sure what to serve, but everybody loves ice cream\""            
            text t "\x0A    "            
            span(class="StringLit"):              
              text t "\"ice cream\""          
          p():            
            text t "As seen in the above example, the case expression can also introduce side effects. When multiple statements are given for a branch, Nim will use the last expression as the result value."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-block-expression",href="#statements-and-expressions-block-expression"):              
              text t "Block expression"          
          p():            
            text t "A "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "block expression"            
            text t " "            
            text t "is almost like a block statement, but it is an expression that uses last expression under the block as the value. It is similar to the statement list expression, but the statement list expression does not open new block scope."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "block"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "fib"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "@"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "10"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "fib"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Identifier"):              
              text t "fib"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Operator"):              
              text t "^"            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "fib"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Operator"):              
              text t "^"            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "fib"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-table-constructor",href="#statements-and-expressions-table-constructor"):              
              text t "Table constructor"          
          p():            
            text t "A table constructor is syntactic sugar for an array constructor:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="StringLit"):              
              text t "\"key1\""            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"value1\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"key2\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"key3\""            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"value2\""            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# is the same as:"            
            text t "\x0A"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"key1\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"value1\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"key2\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"value2\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"key3\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"value2\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t "]"          
          p():            
            text t "The empty table can be written "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "{:}"            
            text t " "            
            text t "(in contrast to the empty set which is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "{}"            
            text t ") which is thus another way to write as the empty array constructor "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "[]"            
            text t ". This slightly unusual way of supporting tables has lots of advantages:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "The order of the (key,value)-pairs is preserved, thus it is easy to support ordered dicts with for example "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "{key: val}.newOrderedTable"              
              text t "."            
            text t "\x0A"            
            li():              
              text t "A table literal can be put into a "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "const"              
              text t " "              
              text t "section and the compiler can easily put it into the executable's data section just like it can for arrays and the generated data section requires a minimal amount of memory."            
            text t "\x0A"            
            li():              
              text t "Every table implementation is treated equal syntactically."            
            text t "\x0A"            
            li():              
              text t "Apart from the minimal syntactic sugar the language core does not need to know about tables."            
            text t "\x0A"          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-type-conversions",href="#statements-and-expressions-type-conversions"):              
              text t "Type conversions"          
          p():            
            text t "Syntactically a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "type conversion"            
            text t " "            
            text t "is like a procedure call, but a type name replaces the procedure name. A type conversion is always safe in the sense that a failure to convert a type to another results in an exception (if it cannot be determined statically)."          
          text t "\x0A"          
          p():            
            text t "Ordinary procs are often preferred over type conversions in Nim: For instance, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$"            
            text t " "            
            text t "is the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "toString"            
            text t " "            
            text t "operator by convention and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "toFloat"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "toInt"            
            text t " "            
            text t "can be used to convert from floating point to integer or vice versa."          
          text t "\x0A"          
          p():            
            text t "A type conversion can also be used to disambiguate overloaded routines:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"int\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"string\""            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "procVar"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Keyword"):              
              text t "proc"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "procVar"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"a\""            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-type-casts",href="#statements-and-expressions-type-casts"):              
              text t "Type casts"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "cast"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Type casts are a crude mechanism to interpret the bit pattern of an expression as if it would be of another type. Type casts are only needed for low-level programming and are inherently unsafe."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-the-addr-operator",href="#statements-and-expressions-the-addr-operator"):              
              text t "The addr operator"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "addr"            
            text t " "            
            text t "operator returns the address of an l-value. If the type of the location is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "T"            
            text t ", the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "addr"            
            text t " "            
            text t "operator result is of the type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ptr T"            
            text t ". An address is always an untraced reference. Taking the address of an object that resides on the stack is "            
            strong():              
              text t "unsafe"            
            text t ", as the pointer may live longer than the object on the stack and can thus reference a non-existing object. One can get the address of variables, but one can't use it on variables declared through "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "let"            
            text t " "            
            text t "statements:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "t1"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"Hello\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "t2"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "t1"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "t3"            
            text t " "            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "pointer"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "addr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t2"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "repr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Keyword"):              
              text t "addr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t2"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# --> ref 0x7fff6b71b670 --> 0x10bb81050\"Hello\""            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Keyword"):              
              text t "cast"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Keyword"):              
              text t "ptr"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t3"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# --> Hello"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# The following line doesn't compile:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "repr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Keyword"):              
              text t "addr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t1"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# Error: expression has no address"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="statements-and-expressions-the-unsafeaddr-operator",href="#statements-and-expressions-the-unsafeaddr-operator"):              
              text t "The unsafeAddr operator"          
          p():            
            text t "For easier interoperability with other compiled languages such as C, retrieving the address of a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "let"            
            text t " "            
            text t "variable, a parameter or a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "for"            
            text t " "            
            text t "loop variable, the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "unsafeAddr"            
            text t " "            
            text t "operation can be used:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "myArray"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "foreignProcThatTakesAnAddr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "unsafeAddr"            
            text t " "            
            span(class="Identifier"):              
              text t "myArray"            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h1():            
            a(class="toc-backref",id="procedures",href="#procedures"):              
              text t "Procedures"          
          p():            
            text t "What most programming languages call "            
            span(id="methods_1"):              
              text t "methods"            
            text t " "            
            text t "or "            
            span(id="functions_1"):              
              text t "functions"            
            text t " "            
            text t "are called "            
            span(id="procedures_1"):              
              text t "procedures"            
            text t " "            
            text t "in Nim. A procedure declaration consists of an identifier, zero or more formal parameters, a return value type and a block of code. Formal parameters are declared as a list of identifiers separated by either comma or semicolon. A parameter is given a type by "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t ": typename"            
            text t ". The type applies to all parameters immediately before it, until either the beginning of the parameter list, a semicolon separator or an already typed parameter, is reached. The semicolon can be used to make separation of types and subsequent identifiers more distinct."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# Using only commas"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "d"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# Using semicolon for visual distinction"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "d"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# Will fail: a is untyped since ';' stops type propagation."            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "d"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"          
          p():            
            text t "A parameter may be declared with a default value which is used if the caller does not provide a value for the argument."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# b is optional with 47 as its default value"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "47"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"          
          p():            
            text t "Parameters can be declared mutable and so allow the proc to modify those arguments, by using the type modifier "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t "."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# \"returning\" a value to the caller through the 2nd argument"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# Notice that the function uses no actual return value at all (ie void)"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "inp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "outp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "outp"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "inp"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="DecNumber"):              
              text t "47"          
          p():            
            text t "If the proc declaration has no body, it is a "            
            span(id="forward_1"):              
              text t "forward"            
            text t " "            
            text t "declaration. If the proc returns a value, the procedure body can access an implicitly declared variable named "            
            span(id="result_2"):              
              text t "result"            
            text t " "            
            text t "that represents the return value. Procs can be overloaded. The overloading resolution algorithm determines which proc is the best match for the arguments. Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "toLower"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "char"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "char"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Comment"):              
              text t "# toLower for characters"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="CharLit"):              
              text t "'A'"            
            span(class="Operator"):              
              text t ".."            
            span(class="CharLit"):              
              text t "'Z'"            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "chr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "ord"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "ord"            
            span(class="Punctuation"):              
              text t "("            
            span(class="CharLit"):              
              text t "'a'"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "-"            
            text t " "            
            span(class="Identifier"):              
              text t "ord"            
            span(class="Punctuation"):              
              text t "("            
            span(class="CharLit"):              
              text t "'A'"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "toLower"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Comment"):              
              text t "# toLower for strings"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "newString"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "len"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "len"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "-"            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "toLower"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# calls toLower for characters; no recursion!"          
          p():            
            text t "Calling a procedure can be done in many different ways:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "callme"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "char"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "false"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# call with positional arguments      # parameter bindings:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "callme"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "\'\\t\'"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            span(class="Punctuation"):              
              text t ")"            
            text t "       "            
            span(class="Comment"):              
              text t "# (x=0, y=1, s=\"abc\", c=\'\\t\', b=true)"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# call with named and positional arguments:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "callme"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "y"            
            span(class="Operator"):              
              text t "="            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Operator"):              
              text t "="            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"abd\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "\'\\t\'"            
            span(class="Punctuation"):              
              text t ")"            
            text t "         "            
            span(class="Comment"):              
              text t "# (x=0, y=1, s=\"abd\", c=\'\\t\', b=false)"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# call with named arguments (order is not relevant):"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "callme"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Operator"):              
              text t "="            
            span(class="CharLit"):              
              text t "\'\\t\'"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Operator"):              
              text t "="            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Operator"):              
              text t "="            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ")"            
            text t "              "            
            span(class="Comment"):              
              text t "# (x=0, y=1, s=\"\", c=\'\\t\', b=false)"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# call as a command statement: no () needed:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "callme"            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "\'\\t\'"            
            text t "              "            
            span(class="Comment"):              
              text t "# (x=0, y=1, s=\"abc\", c=\'\\t\', b=false)"          
          p():            
            text t "A procedure may call itself recursively."          
          text t "\x0A"          
          p():            
            span(id="operators_1"):              
              text t "Operators"            
            text t " "            
            text t "are procedures with a special operator symbol as identifier:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "$"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# converts an integer to a string; this is a prefix operator."            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "intToStr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Operators with one parameter are prefix operators, operators with two parameters are infix operators. (However, the parser distinguishes these from the operator's position within an expression.) There is no way to declare postfix operators: all postfix operators are built-in and handled by the grammar explicitly."          
          text t "\x0A"          
          p():            
            text t "Any operator can be called like an ordinary proc with the '"            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "opr"            
            text t "' notation. (Thus an operator can have more than two parameters):"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*+"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# Multiply and add"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*+"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "6"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "+"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="procedures-export-marker",href="#procedures-export-marker"):              
              text t "Export marker"          
          p():            
            text t "If a declared symbol is marked with an "            
            span(id="asterisk_1"):              
              text t "asterisk"            
            text t " "            
            text t "it is exported from the current module:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "exportedEcho"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "newStringOfCap"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "len"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="FloatNumber"):              
              text t "1."            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "result"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "exportedVar"            
            span(class="Operator"):              
              text t "*:"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "const"            
            text t " "            
            span(class="Identifier"):              
              text t "exportedConst"            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "78"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "ExportedType"            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "exportedField"            
            span(class="Operator"):              
              text t "*:"            
            text t " "            
            span(class="Identifier"):              
              text t "int"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="procedures-method-call-syntax",href="#procedures-method-call-syntax"):              
              text t "Method call syntax"          
          p():            
            text t "For object oriented programming, the syntax "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "obj.method(args)"            
            text t " "            
            text t "can be used instead of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "method(obj, args)"            
            text t ". The parentheses can be omitted if there are no remaining arguments: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "obj.len"            
            text t " "            
            text t "(instead of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "len(obj)"            
            text t ")."          
          text t "\x0A"          
          p():            
            text t "This method call syntax is not restricted to objects, it can be used to supply any type of first argument for procedures:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "len"            
            text t " "            
            span(class="Comment"):              
              text t "# is the same as echo len \"abc\""            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "toUpper"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="CharLit"):              
              text t "'a'"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "'b'"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="CharLit"):              
              text t "'c'"            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "card"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "writeLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"Hallo\""            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# the same as writeLine(stdout, \"Hallo\")"          
          p():            
            text t "Another way to look at the method call syntax is that it provides the missing postfix notation."          
          text t "\x0A"          
          p():            
            text t "The method call syntax conflicts with explicit generic instantiations: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p[T](x)"            
            text t " "            
            text t "cannot be written as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x.p[T]"            
            text t " "            
            text t "because "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x.p[T]"            
            text t " "            
            text t "is always parsed as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "(x.p)[T]"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "See also: "            
            a(class="reference external",href="#templates-limitations-of-the-method-call-syntax"):              
              text t "Limitations of the method call syntax"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "[: ]"            
            text t " "            
            text t "notation has been designed to mitigate this issue: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x.p[:T]"            
            text t " "            
            text t "is rewritten by the parser to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p[T](x)"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x.p[:T](y)"            
            text t " "            
            text t "is rewritten to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p[T](x, y)"            
            text t ". Note that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "[: ]"            
            text t " "            
            text t "has no AST representation, the rewrite is performed directly in the parsing step."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="procedures-properties",href="#procedures-properties"):              
              text t "Properties"          
          p():            
            text t "Nim has no need for "            
            em():              
              text t "get-properties"            
            text t ": Ordinary get-procedures that are called with the "            
            em():              
              text t "method call syntax"            
            text t " "            
            text t "achieve the same. But setting a value is different; for this a special setter syntax is needed:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# Module asocket"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Socket"            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "RootObj"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "host"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Comment"):              
              text t "# cannot be accessed from the outside of the module"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Identifier"):              
              text t "host"            
            span(class="Operator"):              
              text t "="            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "Socket"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "value"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "inline"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "## setter of hostAddr."            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "## This accesses the 'host' field and is not a recursive call to"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "## ``host=`` because the builtin dot access is preferred if it is"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "## avaliable:"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "host"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "value"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "host"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Socket"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "inline"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "## getter of hostAddr"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "## This accesses the 'host' field and is not a recursive call to"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "## ``host`` because the builtin dot access is preferred if it is"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "## avaliable:"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "host"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# module B"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "asocket"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Socket"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "new"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "s"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "host"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "34"            
            text t "  "            
            span(class="Comment"):              
              text t "# same as `host=`(s, 34)"          
          p():            
            text t "A proc defined as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "f="            
            text t " "            
            text t "(with the trailing "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "="            
            text t ") is called a "            
            span(id="setter_1"):              
              text t "setter"            
            text t ". A setter can be called explicitly via the common backticks notation:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Identifier"):              
              text t "f"            
            span(class="Operator"):              
              text t "="            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "MyObject"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "value"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Identifier"):              
              text t "f"            
            span(class="Operator"):              
              text t "="            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "myObject"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"value\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "f="            
            text t " "            
            text t "can be called implicitly in the pattern "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x.f = value"            
            text t " "            
            text t "if and only if the type of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x"            
            text t " "            
            text t "does not have a field named "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "f"            
            text t " "            
            text t "or if "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "f"            
            text t " "            
            text t "is not visible in the current module. These rules ensure that object fields and accessors can have the same name. Within the module "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x.f"            
            text t " "            
            text t "is then always interpreted as field access and outside the module it is interpreted as an accessor proc call."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="procedures-command-invocation-syntax",href="#procedures-command-invocation-syntax"):              
              text t "Command invocation syntax"          
          p():            
            text t "Routines can be invoked without the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "()"            
            text t " "            
            text t "if the call is syntactically a statement. This command invocation syntax also works for expressions, but then only a single argument may follow. This restriction means "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "echo f 1, f 2"            
            text t " "            
            text t "is parsed as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "echo(f(1), f(2))"            
            text t " "            
            text t "and not as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "echo(f(1, f(2)))"            
            text t ". The method call syntax may be used to provide one more argument in this case:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "optarg"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "singlearg"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "20"            
            span(class="Operator"):              
              text t "*"            
            span(class="Identifier"):              
              text t "x"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "optarg"            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\" \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "singlearg"            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            text t "  "            
            span(class="Comment"):              
              text t "# prints \"1 40\""            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "fail"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "optarg"            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "optarg"            
            text t " "            
            span(class="DecNumber"):              
              text t "8"            
            text t "   "            
            span(class="Comment"):              
              text t "# Wrong. Too many arguments for a command call"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "optarg"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "optarg"            
            text t " "            
            span(class="DecNumber"):              
              text t "8"            
            span(class="Punctuation"):              
              text t ")"            
            text t "  "            
            span(class="Comment"):              
              text t "# traditional procedure call with 2 arguments"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="FloatNumber"):              
              text t "1."            
            span(class="Identifier"):              
              text t "optarg"            
            text t " "            
            span(class="Identifier"):              
              text t "optarg"            
            text t " "            
            span(class="DecNumber"):              
              text t "8"            
            text t "    "            
            span(class="Comment"):              
              text t "# same thing as above, w/o the parenthesis"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "y"          
          p():            
            text t "The command invocation syntax also can't have complex expressions as arguments. For example: ("            
            a(class="reference external",href="#anonymous-procs"):              
              text t "anonymous procs"            
            text t "), "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "if"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "case"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "try"            
            text t ". Function calls with no arguments still needs () to distinguish between a call and the function itself as a first class value."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="procedures-closures",href="#procedures-closures"):              
              text t "Closures"          
          p():            
            text t "Procedures can appear at the top level in a module as well as inside other scopes, in which case they are called nested procs. A nested proc can access local variables from its enclosing scope and if it does so it becomes a closure. Any captured variables are stored in a hidden additional argument to the closure (its environment) and they are accessed by reference by both the closure and its enclosing scope (i.e. any modifications made to them are visible in both places). The closure environment may be allocated on the heap or on the stack if the compiler determines that this would be safe."          
          text t "\x0A\x0A"          
          h3():            
            a(class="toc-backref",id="closures-creating-closures-in-loops",href="#closures-creating-closures-in-loops"):              
              text t "Creating closures in loops"          
          p():            
            text t "Since closures capture local variables by reference it is often not wanted behavior inside loop bodies. See "            
            a(class="reference external",href="system.html#closureScope"):              
              text t "closureScope"            
            text t " "            
            text t "for details on how to change this behavior."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="procedures-anonymous-procs",href="#procedures-anonymous-procs"):              
              text t "Anonymous Procs"          
          p():            
            text t "Unnamed procedures can be used as lambda expressions to pass into other procedures:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "cities"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "@"            
            span(class="Punctuation"):              
              text t "["            
            span(class="StringLit"):              
              text t "\"Frankfurt\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"Tokyo\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"New York\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"Kyiv\""            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "cities"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "sort"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "cmp"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "len"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "len"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Procs as expressions can appear both as nested procs and inside top level executable code. The  "            
            a(class="reference external",href="sugar.html"):              
              text t "sugar"            
            text t " "            
            text t "module contains the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "=>"            
            text t " "            
            text t "macro which enables a more succinct syntax for anonymous procedures resembling lambdas as they are in languages like JavaScript, C#, etc."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="procedures-func",href="#procedures-func"):              
              text t "Func"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "func"            
            text t " "            
            text t "keyword introduces a shortcut for a "            
            span(id="nosideeffect_1"):              
              text t "noSideEffect"            
            text t " "            
            text t "proc."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "func"            
            text t " "            
            span(class="Identifier"):              
              text t "binarySearch"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "openArray"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "elem"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"          
          p():            
            text t "Is short for:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "binarySearch"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "openArray"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "elem"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "noSideEffect"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="procedures-nonoverloadable-builtins",href="#procedures-nonoverloadable-builtins"):              
              text t "Nonoverloadable builtins"          
          p():            
            text t "The following builtin procs cannot be overloaded for reasons of implementation simplicity (they require specialized semantic checking):"            
            pre():              
              text t "declared, defined, definedInScope, compiles, sizeof,\x0Ais, shallowCopy, getAst, astToStr, spawn, procCall"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "Thus they act more like keywords than like ordinary identifiers; unlike a keyword however, a redefinition may "            
            span(id="shadow_1"):              
              text t "shadow"            
            text t " "            
            text t "the definition in the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system"            
            text t " "            
            text t "module. From this list the following should not be written in dot notation "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x.f"            
            text t " "            
            text t "since "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x"            
            text t " "            
            text t "cannot be type checked before it gets passed to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "f"            
            text t ":"            
            pre():              
              text t "declared, defined, definedInScope, compiles, getAst, astToStr"            
            text t "\x0A"          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="procedures-var-parameters",href="#procedures-var-parameters"):              
              text t "Var parameters"          
          p():            
            text t "The type of a parameter may be prefixed with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t " "            
            text t "keyword:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "divmod"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "res"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "remainder"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "res"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Keyword"):              
              text t "div"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "remainder"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Keyword"):              
              text t "mod"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "divmod"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "8"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# modifies x and y"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "3"          
          p():            
            text t "In the example, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "res"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "remainder"            
            text t " "            
            text t "are "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var parameters"            
            text t ". Var parameters can be modified by the procedure and the changes are visible to the caller. The argument passed to a var parameter has to be an l-value. Var parameters are implemented as hidden pointers. The above example is equivalent to:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "divmod"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "res"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "remainder"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "res"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Keyword"):              
              text t "div"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "remainder"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Keyword"):              
              text t "mod"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "divmod"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "8"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "addr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "addr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "3"          
          p():            
            text t "In the examples, var parameters or pointers are used to provide two return values. This can be done in a cleaner way by returning a tuple:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "divmod"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "tuple"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "res"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "remainder"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Keyword"):              
              text t "div"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Keyword"):              
              text t "mod"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "t"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "divmod"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "8"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "t"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "res"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "t"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "remainder"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "3"          
          p():            
            text t "One can use "            
            span(id="tuple-unpacking_1"):              
              text t "tuple unpacking"            
            text t " "            
            text t "to access the tuple's fields:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "divmod"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "8"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# tuple unpacking"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "3"          
          p():            
            strong():              
              text t "Note"            
            text t ": "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t " "            
            text t "parameters are never necessary for efficient parameter passing. Since non-var parameters cannot be modified the compiler is always free to pass arguments by reference if it considers it can speed up execution."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="procedures-var-return-type",href="#procedures-var-return-type"):              
              text t "Var return type"          
          p():            
            text t "A proc, converter or iterator may return a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t " "            
            text t "type which means that the returned value is an l-value and can be modified by the caller:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "g"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "writeAccessToG"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "g"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "writeAccessToG"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "6"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "g"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="DecNumber"):              
              text t "6"          
          p():            
            text t "It is a static error if the implicitly introduced pointer could be used to access a location beyond its lifetime:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "writeAccessToG"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "g"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "g"            
            text t " "            
            span(class="Comment"):              
              text t "# Error!"          
          p():            
            text t "For iterators, a component of a tuple return type can have a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t " "            
            text t "type too:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Identifier"):              
              text t "mpairs"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "tuple"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "key"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "val"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "high"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "yield"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "In the standard library every name of a routine that returns a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t " "            
            text t "type starts with the prefix "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "m"            
            text t " "            
            text t "per convention."          
          text t "\x0A"          
          text t "Memory safety for returning by "          
          tt(class="docutils literal"):            
            span(class="pre"):              
              text t "var T"          
          text t " "          
          text t "is ensured by a simple borrowing rule: If "          
          tt(class="docutils literal"):            
            span(class="pre"):              
              text t "result"          
          text t " "          
          text t "does not refer to a location pointing to the heap (that is in "          
          tt(class="docutils literal"):            
            span(class="pre"):              
              text t "result = X"          
          text t " "          
          text t "the "          
          tt(class="docutils literal"):            
            span(class="pre"):              
              text t "X"          
          text t " "          
          text t "involves a "          
          tt(class="docutils literal"):            
            span(class="pre"):              
              text t "ptr"          
          text t " "          
          text t "or "          
          tt(class="docutils literal"):            
            span(class="pre"):              
              text t "ref"          
          text t " "          
          text t "access) then it has to be deviated by the routine's first parameter:"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "forward"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Comment"):              
              text t "# ok, deviated from the first parameter."            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "param"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# we know 'forward' provides a view into the location deviated by"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# its first argument 'x'."            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "forward"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# Error: location is derived from ``x``"            
            text t "\x0A                      "            
            span(class="Comment"):              
              text t "# which is not p's first parameter and lives"            
            text t "\x0A                      "            
            span(class="Comment"):              
              text t "# on the stack."          
          p():            
            text t "In other words, the lifetime of what "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "result"            
            text t " "            
            text t "points to is attached to the lifetime of the first parameter and that is enough knowledge to verify memory safety at the callsite. "          
          text t "\x0A\x0A"          
          h3():            
            a(class="toc-backref",id="var-return-type-future-directions",href="#var-return-type-future-directions"):              
              text t "Future directions"          
          p():            
            text t "Later versions of Nim can be more precise about the borrowing rule with a syntax like:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "other"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Y"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "container"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "X"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Keyword"):              
              text t "from"            
            text t " "            
            span(class="Identifier"):              
              text t "container"          
          p():            
            text t "Here "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var T from container"            
            text t " "            
            text t "explicitly exposes that the location is deviated from the second parameter (called 'container' in this case). The syntax "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var T from p"            
            text t " "            
            text t "specifies a type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "varTy[T, 2]"            
            text t " "            
            text t "which is incompatible with "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "varTy[T, 1]"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="procedures-overloading-of-the-subscript-operator",href="#procedures-overloading-of-the-subscript-operator"):              
              text t "Overloading of the subscript operator"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "[]"            
            text t " "            
            text t "subscript operator for arrays/openarrays/sequences can be overloaded."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="multiminusmethods",href="#multiminusmethods"):              
              text t "Multi-methods"          
          p():            
            strong():              
              text t "Note:"            
            text t " "            
            text t "Starting from Nim 0.20, to use multi-methods one must explicitly pass "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "--multimethods:on"            
            text t " "            
            text t "when compiling."          
          text t "\x0A"          
          p():            
            text t "Procedures always use static dispatch. Multi-methods use dynamic dispatch. For dynamic dispatch to work on an object it should be a reference type."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Expression"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "RootObj"            
            text t " "            
            span(class="Comment"):              
              text t "## abstract base class for an expression"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Literal"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "Expression"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "PlusExpr"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "Expression"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Expression"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "method"            
            text t " "            
            span(class="Identifier"):              
              text t "eval"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "e"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Expression"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "base"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# override this base method"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "raise"            
            text t " "            
            span(class="Identifier"):              
              text t "newException"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "CatchableError"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"Method without implementation override\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "method"            
            text t " "            
            span(class="Identifier"):              
              text t "eval"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "e"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Literal"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "e"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "x"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "method"            
            text t " "            
            span(class="Identifier"):              
              text t "eval"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "e"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PlusExpr"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# watch out: relies on dynamic binding"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "eval"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "e"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "eval"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "e"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "newLit"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Literal"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "new"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "result"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "newPlus"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Expression"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PlusExpr"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "new"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "result"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "eval"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "newPlus"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "newPlus"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "newLit"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newLit"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newLit"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "In the example the constructors "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "newLit"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "newPlus"            
            text t " "            
            text t "are procs because they should use static binding, but "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "eval"            
            text t " "            
            text t "is a method because it requires dynamic binding."          
          text t "\x0A"          
          p():            
            text t "As can be seen in the example, base methods have to be annotated with the "            
            span(id="base_1"):              
              text t "base"            
            text t " "            
            text t "pragma. The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "base"            
            text t " "            
            text t "pragma also acts as a reminder for the programmer that a base method "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "m"            
            text t " "            
            text t "is used as the foundation to determine all the effects that a call to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "m"            
            text t " "            
            text t "might cause."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": Compile-time execution is not (yet) supported for methods."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": Starting from Nim 0.20, generic methods are deprecated."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="multiminusmethods-inhibit-dynamic-method-resolution-via-proccall",href="#multiminusmethods-inhibit-dynamic-method-resolution-via-proccall"):              
              text t "Inhibit dynamic method resolution via procCall"          
          p():            
            text t "Dynamic method resolution can be inhibited via the builtin "            
            span(id="systemdotproccall_1"):              
              text t "system.procCall"            
            text t ". This is somewhat comparable to the "            
            span(id="super_1"):              
              text t "super"            
            text t " "            
            text t "keyword that traditional OOP languages offer."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Thing"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "RootObj"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Unit"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "Thing"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "method"            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Thing"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "base"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"base\""            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "method"            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Unit"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# Call the base method:"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "procCall"            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "Thing"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"1\""          
          text t "\x0A"          
          h1():            
            a(class="toc-backref",id="iterators-and-the-for-statement",href="#iterators-and-the-for-statement"):              
              text t "Iterators and the for statement"          
          p():            
            text t "The "            
            span(id="for_1"):              
              text t "for"            
            text t " "            
            text t "statement is an abstract mechanism to iterate over the elements of a container. It relies on an "            
            span(id="iterator_1"):              
              text t "iterator"            
            text t " "            
            text t "to do so. Like "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "while"            
            text t " "            
            text t "statements, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "for"            
            text t " "            
            text t "statements open an "            
            span(id="implicit-block_1"):              
              text t "implicit block"            
            text t ", so that they can be left with a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "break"            
            text t " "            
            text t "statement."          
          text t "\x0A"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "for"            
            text t " "            
            text t "loop declares iteration variables - their scope reaches until the end of the loop body. The iteration variables' types are inferred by the return type of the iterator."          
          text t "\x0A"          
          p():            
            text t "An iterator is similar to a procedure, except that it can be called in the context of a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "for"            
            text t " "            
            text t "loop. Iterators provide a way to specify the iteration over an abstract type. A key role in the execution of a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "for"            
            text t " "            
            text t "loop plays the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "yield"            
            text t " "            
            text t "statement in the called iterator. Whenever a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "yield"            
            text t " "            
            text t "statement is reached the data is bound to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "for"            
            text t " "            
            text t "loop variables and control continues in the body of the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "for"            
            text t " "            
            text t "loop. The iterator's local variables and execution state are automatically saved between calls. Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# this definition exists in the system module"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Identifier"):              
              text t "items"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "char"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "inline"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Operator"):              
              text t "<"            
            text t " "            
            span(class="Identifier"):              
              text t "len"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "yield"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "inc"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "ch"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "items"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"hello world\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Comment"):              
              text t "# `ch` is an iteration variable"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "ch"          
          p():            
            text t "The compiler generates code as if the programmer would have written this:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Operator"):              
              text t "<"            
            text t " "            
            span(class="Identifier"):              
              text t "len"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "ch"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "ch"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "inc"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "If the iterator yields a tuple, there can be as many iteration variables as there are components in the tuple. The i'th iteration variable's type is the type of the i'th component. In other words, implicit tuple unpacking in a for loop context is supported."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="iterators-and-the-for-statement-implict-itemsslashpairs-invocations",href="#iterators-and-the-for-statement-implict-itemsslashpairs-invocations"):              
              text t "Implict items/pairs invocations"          
          p():            
            text t "If the for loop expression "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "e"            
            text t " "            
            text t "does not denote an iterator and the for loop has exactly 1 variable, the for loop expression is rewritten to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "items(e)"            
            text t "; ie. an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "items"            
            text t " "            
            text t "iterator is implicitly invoked:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "x"          
          p():            
            text t "If the for loop has exactly 2 variables, a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pairs"            
            text t " "            
            text t "iterator is implicitly invoked."          
          text t "\x0A"          
          p():            
            text t "Symbol lookup of the identifiers "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "items"            
            text t "/"            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pairs"            
            text t " "            
            text t "is performed after the rewriting step, so that all overloads of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "items"            
            text t "/"            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pairs"            
            text t " "            
            text t "are taken into account."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="iterators-and-the-for-statement-first-class-iterators",href="#iterators-and-the-for-statement-first-class-iterators"):              
              text t "First class iterators"          
          p():            
            text t "There are 2 kinds of iterators in Nim: "            
            em():              
              text t "inline"            
            text t " "            
            text t "and "            
            em():              
              text t "closure"            
            text t " "            
            text t "iterators. An "            
            span(id="inline-iterator_1"):              
              text t "inline iterator"            
            text t " "            
            text t "is an iterator that's always inlined by the compiler leading to zero overhead for the abstraction, but may result in a heavy increase in code size."          
          text t "\x0A"          
          p():            
            text t "Caution: the body of a for loop over an inline iterator is inlined into each "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "yield"            
            text t " "            
            text t "statement appearing in the iterator code, so ideally the code should be refactored to contain a single yield when possible to avoid code bloat."          
          text t "\x0A"          
          p():            
            text t "Inline iterators are second class citizens; They can be passed as parameters only to other inlining code facilities like templates, macros and other inline iterators."          
          text t "\x0A"          
          p():            
            text t "In contrast to that, a "            
            span(id="closure-iterator_1"):              
              text t "closure iterator"            
            text t " "            
            text t "can be passed around more freely:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Identifier"):              
              text t "count0"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "closure"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "yield"            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Identifier"):              
              text t "count2"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "closure"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "yield"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "inc"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "yield"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "invoke"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "iter"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "iterator"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "closure"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "iter"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "invoke"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "count0"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "invoke"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "count2"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Closure iterators and inline iterators have some restrictions:"          
          text t "\x0A"          
          ol(class="simple"):            
            li():              
              text t "For now, a closure iterator cannot be executed at compile time."            
            text t "\x0A"            
            li():              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "return"              
              text t " "              
              text t "is allowed in a closure iterator but not in an inline iterator (but rarely useful) and ends the iteration."            
            text t "\x0A"            
            li():              
              text t "Neither inline nor closure iterators can be recursive."            
            text t "\x0A"            
            li():              
              text t "Neither inline nor closure iterators have the special "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "result"              
              text t " "              
              text t "variable."            
            text t "\x0A"            
            li():              
              text t "Closure iterators are not supported by the js backend."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "Iterators that are neither marked "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "{.closure.}"            
            text t " "            
            text t "nor "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "{.inline.}"            
            text t " "            
            text t "explicitly default to being inline, but this may change in future versions of the implementation."          
          text t "\x0A"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "iterator"            
            text t " "            
            text t "type is always of the calling convention "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "closure"            
            text t " "            
            text t "implicitly; the following example shows how to use iterators to implement a "            
            span(id="collaborative-tasking_1"):              
              text t "collaborative tasking"            
            text t " "            
            text t "system:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# simple tasking:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Task"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "ticker"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Identifier"):              
              text t "a1"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "ticker"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "closure"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"a1: A\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "yield"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"a1: B\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "yield"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"a1: C\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "yield"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"a1: D\""            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Identifier"):              
              text t "a2"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "ticker"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "closure"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"a2: A\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "yield"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"a2: B\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "yield"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"a2: C\""            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "runTasks"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "Task"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "ticker"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "ticker"            
            text t " "            
            span(class="Keyword"):              
              text t "mod"            
            text t " "            
            span(class="Identifier"):              
              text t "t"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "len"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "finished"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "break"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "ticker"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "inc"            
            text t " "            
            span(class="Identifier"):              
              text t "ticker"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "runTasks"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a2"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The builtin "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system.finished"            
            text t " "            
            text t "can be used to determine if an iterator has finished its operation; no exception is raised on an attempt to invoke an iterator that has already finished its work."          
          text t "\x0A"          
          p():            
            text t "Note that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system.finished"            
            text t " "            
            text t "is error prone to use because it only returns "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "true"            
            text t " "            
            text t "one iteration after the iterator has finished:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Identifier"):              
              text t "mycount"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "closure"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "<"              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "yield"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "inc"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "mycount"            
            text t " "            
            span(class="Comment"):              
              text t "# instantiate the iterator"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Keyword"):              
              text t "not"            
            text t " "            
            span(class="Identifier"):              
              text t "finished"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# Produces"            
            text t "\x0A"            
            span(class="DecNumber"):              
              text t "1"            
            text t "\x0A"            
            span(class="DecNumber"):              
              text t "2"            
            text t "\x0A"            
            span(class="DecNumber"):              
              text t "3"            
            text t "\x0A"            
            span(class="DecNumber"):              
              text t "0"          
          p():            
            text t "Instead this code has to be used:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "mycount"            
            text t " "            
            span(class="Comment"):              
              text t "# instantiate the iterator"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "value"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "finished"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "break"            
            text t " "            
            span(class="Comment"):              
              text t "# and discard 'value'!"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "value"          
          p():            
            text t "It helps to think that the iterator actually returns a pair "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "(value, done)"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "finished"            
            text t " "            
            text t "is used to access the hidden "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "done"            
            text t " "            
            text t "field."          
          text t "\x0A"          
          p():            
            text t "Closure iterators are "            
            em():              
              text t "resumable functions"            
            text t " "            
            text t "and so one has to provide the arguments to every call. To get around this limitation one can capture parameters of an outer factory proc:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "mycount"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "<"              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Keyword"):              
              text t "yield"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "inc"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "mycount"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "f"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "f"          
          text t "\x0A"          
          h1():            
            a(class="toc-backref",id="converters",href="#converters"):              
              text t "Converters"          
          p():            
            text t "A converter is like an ordinary proc except that it enhances the \"implicitly convertible\" type relation (see "            
            a(class="reference external",href="#type-relations-convertible-relation"):              
              text t "Convertible relation"            
            text t "):"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# bad style ahead: Nim is not C."            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "converter"            
            text t " "            
            span(class="Identifier"):              
              text t "toBool"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "!="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"compiles\""          
          p():            
            text t "A converter can also be explicitly invoked for improved readability. Note that implicit converter chaining is not supported: If there is a converter from type A to type B and from type B to type C the implicit conversion from A to C is not provided."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="type-sections",href="#type-sections"):              
              text t "Type sections"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Comment"):              
              text t "# example demonstrating mutually recursive types"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Node"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "  "            
            span(class="Comment"):              
              text t "# an object managed by the garbage collector (ref)"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "le"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "ri"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            text t "     "            
            span(class="Comment"):              
              text t "# left and right subtrees"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "sym"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "Sym"            
            text t "     "            
            span(class="Comment"):              
              text t "# leaves contain a reference to a Sym"            
            text t "\x0A  \x0A  "            
            span(class="Identifier"):              
              text t "Sym"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "       "            
            span(class="Comment"):              
              text t "# a symbol"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "     "            
            span(class="Comment"):              
              text t "# the symbol's name"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "line"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "        "            
            span(class="Comment"):              
              text t "# the line the symbol was declared in"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "code"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            text t "       "            
            span(class="Comment"):              
              text t "# the symbol's abstract syntax tree"          
          p():            
            text t "A type section begins with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "type"            
            text t " "            
            text t "keyword. It contains multiple type definitions. A type definition binds a type to a name. Type definitions can be recursive or even mutually recursive. Mutually recursive types are only possible within a single "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "type"            
            text t " "            
            text t "section. Nominal types like "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "objects"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "enums"            
            text t " "            
            text t "can only be defined in a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "type"            
            text t " "            
            text t "section."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="exception-handling",href="#exception-handling"):              
              text t "Exception handling"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="exception-handling-try-statement",href="#exception-handling-try-statement"):              
              text t "Try statement"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# read the first two lines of a text file that should contain numbers"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# and tries to add them"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "File"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "open"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"numbers.txt\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "try"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "readLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "readLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"sum: \""            
            text t " "            
            span(class="Operator"):              
              text t "&"            
            text t " "            
            span(class="Operator"):              
              text t "$"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "parseInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "parseInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "except"            
            text t " "            
            span(class="Identifier"):              
              text t "OverflowError"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"overflow!\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "except"            
            text t " "            
            span(class="Identifier"):              
              text t "ValueError"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"could not convert string to integer\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "except"            
            text t " "            
            span(class="Identifier"):              
              text t "IOError"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"IO error!\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "except"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Unknown exception!\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "finally"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "close"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The statements after the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "try"            
            text t " "            
            text t "are executed in sequential order unless an exception "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "e"            
            text t " "            
            text t "is raised. If the exception type of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "e"            
            text t " "            
            text t "matches any listed in an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "except"            
            text t " "            
            text t "clause the corresponding statements are executed. The statements following the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "except"            
            text t " "            
            text t "clauses are called "            
            span(id="exception-handlers_1"):              
              text t "exception handlers"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "The empty "            
            span(id="except_1"):              
              text t "except"            
            text t " "            
            text t "clause is executed if there is an exception that is not listed otherwise. It is similar to an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "else"            
            text t " "            
            text t "clause in "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "if"            
            text t " "            
            text t "statements."          
          text t "\x0A"          
          p():            
            text t "If there is a "            
            span(id="finally_1"):              
              text t "finally"            
            text t " "            
            text t "clause, it is always executed after the exception handlers."          
          text t "\x0A"          
          p():            
            text t "The exception is "            
            em():              
              text t "consumed"            
            text t " "            
            text t "in an exception handler. However, an exception handler may raise another exception. If the exception is not handled, it is propagated through the call stack. This means that often the rest of the procedure - that is not within a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "finally"            
            text t " "            
            text t "clause - is not executed (if an exception occurs)."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="exception-handling-try-expression",href="#exception-handling-try-expression"):              
              text t "Try expression"          
          p():            
            text t "Try can also be used as an expression; the type of the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "try"            
            text t " "            
            text t "branch then needs to fit the types of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "except"            
            text t " "            
            text t "branches, but the type of the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "finally"            
            text t " "            
            text t "branch always has to be "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "void"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "try"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "parseInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"133a\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A        "            
            span(class="Keyword"):              
              text t "except"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Operator"):              
              text t "-"            
            span(class="DecNumber"):              
              text t "1"            
            text t "\x0A        "            
            span(class="Keyword"):              
              text t "finally"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"hi\""          
          p():            
            text t "To prevent confusing code there is a parsing limitation; if the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "try"            
            text t " "            
            text t "follows a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "("            
            text t " "            
            text t "it has to be written as a one liner:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Keyword"):              
              text t "try"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "parseInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"133a\""            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "except"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Operator"):              
              text t "-"            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="exception-handling-except-clauses",href="#exception-handling-except-clauses"):              
              text t "Except clauses"          
          p():            
            text t "Within an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "except"            
            text t " "            
            text t "clause it is possible to access the current exception using the following syntax:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "try"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# ..."            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "except"            
            text t " "            
            span(class="Identifier"):              
              text t "IOError"            
            text t " "            
            span(class="Keyword"):              
              text t "as"            
            text t " "            
            span(class="Identifier"):              
              text t "e"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# Now use \"e\""            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"I/O error: \""            
            text t " "            
            span(class="Operator"):              
              text t "&"            
            text t " "            
            span(class="Identifier"):              
              text t "e"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "msg"          
          p():            
            text t "Alternatively, it is possible to use "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "getCurrentException"            
            text t " "            
            text t "to retrieve the exception that has been raised:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "try"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# ..."            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "except"            
            text t " "            
            span(class="Identifier"):              
              text t "IOError"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "e"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "getCurrentException"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# Now use \"e\""          
          p():            
            text t "Note that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "getCurrentException"            
            text t " "            
            text t "always returns a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ref Exception"            
            text t " "            
            text t "type. If a variable of the proper type is needed (in the example above, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "IOError"            
            text t "), one must convert it explicitly:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "try"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# ..."            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "except"            
            text t " "            
            span(class="Identifier"):              
              text t "IOError"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "e"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "IOError"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "getCurrentException"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# \"e\" is now of the proper type"          
          p():            
            text t "However, this is seldom needed. The most common case is to extract an error message from "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "e"            
            text t ", and for such situations it is enough to use "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "getCurrentExceptionMsg"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "try"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# ..."            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "except"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "getCurrentExceptionMsg"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="exception-handling-defer-statement",href="#exception-handling-defer-statement"):              
              text t "Defer statement"          
          p():            
            text t "Instead of a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "try finally"            
            text t " "            
            text t "statement a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "defer"            
            text t " "            
            text t "statement can be used."          
          text t "\x0A"          
          p():            
            text t "Any statements following the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "defer"            
            text t " "            
            text t "in the current block will be considered to be in an implicit try block:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "main"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "f"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "open"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"numbers.txt\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "defer"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "close"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "f"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "write"            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "f"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "write"            
            text t " "            
            span(class="StringLit"):              
              text t "\"def\""          
          p():            
            text t "Is rewritten to:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "main"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "f"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "open"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"numbers.txt\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "try"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "f"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "write"            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "f"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "write"            
            text t " "            
            span(class="StringLit"):              
              text t "\"def\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "finally"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "close"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Top level "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "defer"            
            text t " "            
            text t "statements are not supported since it's unclear what such a statement should refer to."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="exception-handling-raise-statement",href="#exception-handling-raise-statement"):              
              text t "Raise statement"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "raise"            
            text t " "            
            span(class="Identifier"):              
              text t "newEOS"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"operating system failed\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Apart from built-in operations like array indexing, memory allocation, etc. the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "raise"            
            text t " "            
            text t "statement is the only way to raise an exception."          
          text t "\x0A"          
          p():            
            text t "If no exception name is given, the current exception is "            
            span(id="reminusraised_1"):              
              text t "re-raised"            
            text t ". The "            
            span(id="reraiseerror_1"):              
              text t "ReraiseError"            
            text t " "            
            text t "exception is raised if there is no exception to re-raise. It follows that the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "raise"            
            text t " "            
            text t "statement "            
            em():              
              text t "always"            
            text t " "            
            text t "raises an exception."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="exception-handling-exception-hierarchy",href="#exception-handling-exception-hierarchy"):              
              text t "Exception hierarchy"          
          p():            
            text t "The exception tree is defined in the "            
            a(class="reference external",href="system.html"):              
              text t "system"            
            text t " "            
            text t "module. Every exception inherits from "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system.Exception"            
            text t ". Exceptions that indicate programming bugs inherit from "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system.Defect"            
            text t " "            
            text t "(which is a subtype of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Exception"            
            text t ") and are stricly speaking not catchable as they can also be mapped to an operation that terminates the whole process. Exceptions that indicate any other runtime error that can be caught inherit from "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system.CatchableError"            
            text t " "            
            text t "(which is a subtype of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Exception"            
            text t ")."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="exception-handling-imported-exceptions",href="#exception-handling-imported-exceptions"):              
              text t "Imported exceptions"          
          p():            
            text t "It is possible to raise/catch imported C++ exceptions. Types imported using "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "importcpp"            
            text t " "            
            text t "can be raised or caught. Exceptions are raised by value and caught by reference. Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "std_exception"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"std::exception\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "header"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\""              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "what"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "std_exception"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"((char *)#.what())\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "try"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "raise"            
            text t " "            
            span(class="Identifier"):              
              text t "std_exception"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "except"            
            text t " "            
            span(class="Identifier"):              
              text t "std_exception"            
            text t " "            
            span(class="Keyword"):              
              text t "as"            
            text t " "            
            span(class="Identifier"):              
              text t "ex"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "ex"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "what"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h1():            
            a(class="toc-backref",id="effect-system",href="#effect-system"):              
              text t "Effect system"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="effect-system-exception-tracking",href="#effect-system-exception-tracking"):              
              text t "Exception tracking"          
          p():            
            text t "Nim supports exception tracking. The "            
            span(id="raises_1"):              
              text t "raises"            
            text t " "            
            text t "pragma can be used to explicitly define which exceptions a proc/iterator/method/converter is allowed to raise. The compiler verifies this:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "what"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "raises"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "IOError"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "OSError"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "what"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "raise"            
            text t " "            
            span(class="Identifier"):              
              text t "newException"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "IOError"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"IO\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "raise"            
            text t " "            
            span(class="Identifier"):              
              text t "newException"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "OSError"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"OS\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "An empty "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "raises"            
            text t " "            
            text t "list ("            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "raises: []"            
            text t ") means that no exception may be raised:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "raises"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "try"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "unsafeCall"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "except"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "false"          
          p():            
            text t "A "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "raises"            
            text t " "            
            text t "list can also be attached to a proc type. This affects type compatibility:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Callback"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "raises"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "IOError"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Callback"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "raise"            
            text t " "            
            span(class="Identifier"):              
              text t "newException"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "OSError"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"OS\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "c"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            text t " "            
            span(class="Comment"):              
              text t "# type error"          
          p():            
            text t "For a routine "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p"            
            text t " "            
            text t "the compiler uses inference rules to determine the set of possibly raised exceptions; the algorithm operates on "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p"            
            text t "'s call graph:"          
          text t "\x0A"          
          ol(class="simple"):            
            li():              
              text t "Every indirect call via some proc type "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "T"              
              text t " "              
              text t "is assumed to raise "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "system.Exception"              
              text t " "              
              text t "(the base type of the exception hierarchy) and thus any exception unless "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "T"              
              text t " "              
              text t "has an explicit "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "raises"              
              text t " "              
              text t "list. However if the call is of the form "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f(...)"              
              text t " "              
              text t "where "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "f"              
              text t " "              
              text t "is a parameter of the currently analysed routine it is ignored. The call is optimistically assumed to have no effect. Rule 2 compensates for this case."            
            text t "\x0A"            
            li():              
              text t "Every expression of some proc type within a call that is not a call itself (and not nil) is assumed to be called indirectly somehow and thus its raises list is added to "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "p"              
              text t "'s raises list."            
            text t "\x0A"            
            li():              
              text t "Every call to a proc "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "q"              
              text t " "              
              text t "which has an unknown body (due to a forward declaration or an "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "importc"              
              text t " "              
              text t "pragma) is assumed to raise "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "system.Exception"              
              text t " "              
              text t "unless "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "q"              
              text t " "              
              text t "has an explicit "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "raises"              
              text t " "              
              text t "list."            
            text t "\x0A"            
            li():              
              text t "Every call to a method "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "m"              
              text t " "              
              text t "is assumed to raise "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "system.Exception"              
              text t " "              
              text t "unless "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "m"              
              text t " "              
              text t "has an explicit "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "raises"              
              text t " "              
              text t "list."            
            text t "\x0A"            
            li():              
              text t "For every other call the analysis can determine an exact "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "raises"              
              text t " "              
              text t "list."            
            text t "\x0A"            
            li():              
              text t "For determining a "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "raises"              
              text t " "              
              text t "list, the "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "raise"              
              text t " "              
              text t "and "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "try"              
              text t " "              
              text t "statements of "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "p"              
              text t " "              
              text t "are taken into consideration."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "Rules 1-2 ensure the following works:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "noRaise"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "proc"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "raises"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# unknown call that might raise anything, but valid:"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "doRaise"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "raises"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "IOError"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "raise"            
            text t " "            
            span(class="Identifier"):              
              text t "newException"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "IOError"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"IO\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "use"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "raises"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# doesn't compile! Can raise IOError!"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "noRaise"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "doRaise"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "So in many cases a callback does not cause the compiler to be overly conservative in its effect analysis."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="effect-system-tag-tracking",href="#effect-system-tag-tracking"):              
              text t "Tag tracking"          
          p():            
            text t "The exception tracking is part of Nim's "            
            span(id="effect-system_1"):              
              text t "effect system"            
            text t ". Raising an exception is an "            
            em():              
              text t "effect"            
            text t ". Other effects can also be defined. A user defined effect is a means to "            
            em():              
              text t "tag"            
            text t " "            
            text t "a routine and to perform checks against this tag:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Identifier"):              
              text t "IO"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Comment"):              
              text t "## input/output effect"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "readLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "tags"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "IO"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "no_IO_please"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "tags"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# the compiler prevents this:"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "readLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "A tag has to be a type name. A "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "tags"            
            text t " "            
            text t "list - like a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "raises"            
            text t " "            
            text t "list - can also be attached to a proc type. This affects type compatibility."          
          text t "\x0A"          
          p():            
            text t "The inference for tag tracking is analogous to the inference for exception tracking."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="effect-system-effects-pragma",href="#effect-system-effects-pragma"):              
              text t "Effects pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "effects"            
            text t " "            
            text t "pragma has been designed to assist the programmer with the effects analysis. It is a statement that makes the compiler output all inferred effects up to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "effects"            
            text t "'s position:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "what"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "what"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "raise"            
            text t " "            
            span(class="Identifier"):              
              text t "newException"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "IOError"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"IO\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "effects"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "raise"            
            text t " "            
            span(class="Identifier"):              
              text t "newException"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "OSError"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"OS\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The compiler produces a hint message that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "IOError"            
            text t " "            
            text t "can be raised. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "OSError"            
            text t " "            
            text t "is not listed as it cannot be raised in the branch the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "effects"            
            text t " "            
            text t "pragma appears in."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="generics",href="#generics"):              
              text t "Generics"          
          p():            
            text t "Generics are Nim's means to parametrize procs, iterators or types with "            
            span(id="type-parameters_1"):              
              text t "type parameters"            
            text t ". Depending on context, the brackets are used either to introduce type parameters or to instantiate a generic proc, iterator or type."          
          text t "\x0A"          
          p():            
            text t "The following example shows a generic binary tree can be modelled:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "BinaryTree"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t " "            
            span(class="Comment"):              
              text t "# BinaryTree is a generic type with"            
            text t "\x0A                              "            
            span(class="Comment"):              
              text t "# generic param ``T``"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "le"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "ri"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "BinaryTree"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            text t "     "            
            span(class="Comment"):              
              text t "# left and right subtrees; may be nil"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            text t "                   "            
            span(class="Comment"):              
              text t "# the data stored in a node"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "newNode"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "BinaryTree"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# constructor for a node"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "BinaryTree"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "le"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "ri"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "add"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "root"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "BinaryTree"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "BinaryTree"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# insert a node into the tree"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "root"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "root"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "it"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "root"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "it"            
            text t " "            
            span(class="Operator"):              
              text t "!="            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Comment"):              
              text t "# compare the data items; uses the generic ``cmp`` proc"            
            text t "\x0A      "            
            span(class="Comment"):              
              text t "# that works for any type that has a ``==`` and ``"              
              text t "<"              
              text t "`` operator"            
            text t "\x0A      "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "cmp"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "it"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A      "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            text t " "            
            span(class="Operator"):              
              text t "<"            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A        "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "it"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "le"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A          "            
            span(class="Identifier"):              
              text t "it"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "le"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            text t "\x0A          "            
            span(class="Keyword"):              
              text t "return"            
            text t "\x0A        "            
            span(class="Identifier"):              
              text t "it"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "it"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "le"            
            text t "\x0A      "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A        "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "it"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "ri"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A          "            
            span(class="Identifier"):              
              text t "it"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "ri"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            text t "\x0A          "            
            span(class="Keyword"):              
              text t "return"            
            text t "\x0A        "            
            span(class="Identifier"):              
              text t "it"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "it"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "ri"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "add"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "root"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "BinaryTree"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# convenience proc:"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "add"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "root"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newNode"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Identifier"):              
              text t "preorder"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "root"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "BinaryTree"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# Preorder traversal of a binary tree."            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# Since recursive iterators are not yet implemented,"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# this uses an explicit stack (which is more efficient anyway):"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "stack"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "BinaryTree"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "@"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "root"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "stack"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "len"            
            text t " "            
            span(class="Operator"):              
              text t ">"            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "stack"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pop"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            text t " "            
            span(class="Operator"):              
              text t "!="            
            text t " "            
            span(class="Keyword"):              
              text t "nil"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Keyword"):              
              text t "yield"            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "data"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "add"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stack"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "ri"            
            span(class="Punctuation"):              
              text t ")"            
            text t "  "            
            span(class="Comment"):              
              text t "# push right subtree onto the stack"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "n"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "le"            
            text t "          "            
            span(class="Comment"):              
              text t "# and follow the left pointer"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "root"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "BinaryTree"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Comment"):              
              text t "# instantiate a BinaryTree with ``string``"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "add"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "root"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newNode"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"hello\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# instantiates ``newNode`` and ``add``"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "add"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "root"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"world\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "          "            
            span(class="Comment"):              
              text t "# instantiates the second ``add`` proc"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "str"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "preorder"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "root"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "writeLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "str"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "T"            
            text t " "            
            text t "is called a "            
            span(id="generic-type-parameter_1"):              
              text t "generic type parameter"            
            text t " "            
            text t "or a "            
            span(id="type-variable_1"):              
              text t "type variable"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="generics-is-operator",href="#generics-is-operator"):              
              text t "Is operator"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "is"            
            text t " "            
            text t "operator is evaluated during semantic analysis to check for type equivalence. It is therefore very useful for type specialization within generic code:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Table"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "Key"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "Value"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "keys"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "Key"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "values"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "Value"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "when"            
            text t " "            
            span(class="Keyword"):              
              text t "not"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "Key"            
            text t " "            
            span(class="Keyword"):              
              text t "is"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Comment"):              
              text t "# empty value for strings used for optimization"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "deletedKeys"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "bool"            
            span(class="Punctuation"):              
              text t "]"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="generics-type-classes",href="#generics-type-classes"):              
              text t "Type Classes"          
          p():            
            text t "A type class is a special pseudo-type that can be used to match against types in the context of overload resolution or the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "is"            
            text t " "            
            text t "operator. Nim supports the following built-in type classes:"          
          text t "\x0A"          
          table(class="docutils",border="1"):            
            tr():              
              th():                
                text t "type class"              
              th():                
                text t "matches"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "object"              
              td():                
                text t "any object type"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "tuple"              
              td():                
                text t "any tuple type"            
            text t "\x0A"            
            tr():            
              text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "enum"              
              td():                
                text t "any enumeration"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "proc"              
              td():                
                text t "any proc type"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "ref"              
              td():                
                text t "any "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "ref"                
                text t " "                
                text t "type"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "ptr"              
              td():                
                text t "any "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "ptr"                
                text t " "                
                text t "type"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "var"              
              td():                
                text t "any "                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "var"                
                text t " "                
                text t "type"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "distinct"              
              td():                
                text t "any distinct type"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "array"              
              td():                
                text t "any array type"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "set"              
              td():                
                text t "any set type"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "seq"              
              td():                
                text t "any seq type"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "auto"              
              td():                
                text t "any type"            
            text t "\x0A"            
            tr():              
              td():                
                tt(class="docutils literal"):                  
                  span(class="pre"):                    
                    text t "any"              
              td():                
                text t "distinct auto (see below)"            
            text t "\x0A"          
          p():            
            text t "Furthermore, every generic type automatically creates a type class of the same name that will match any instantiation of the generic type."          
          text t "\x0A"          
          p():            
            text t "Type classes can be combined using the standard boolean operators to form more complex type classes:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# create a type class that will match all tuple and object types"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Identifier"):              
              text t "RecordType"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "tuple"            
            text t " "            
            span(class="Keyword"):              
              text t "or"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "printFields"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "RecordType"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "rec"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "key"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "value"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "fieldPairs"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "rec"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "key"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\" = \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "value"          
          p():            
            text t "Whilst the syntax of type classes appears to resemble that of ADTs/algebraic data types in ML-like languages, it should be understood that type classes are static constraints to be enforced at type instantations. Type classes are not really types in themsleves, but are instead a system of providing generic \"checks\" that ultimately "            
            em():              
              text t "resolve"            
            text t " "            
            text t "to some singular type. Type classes do not allow for runtime type dynamism, unlike object variants or methods."          
          text t "\x0A"          
          p():            
            text t "As an example, the following would not compile:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Identifier"):              
              text t "TypeClass"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "|"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "TypeClass"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            text t " "            
            span(class="Comment"):              
              text t "# foo's type is resolved to an int here"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "foo"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"this will fail\""            
            text t " "            
            span(class="Comment"):              
              text t "# error here, because foo is an int"          
          p():            
            text t "Nim allows for type classes and regular types to be specified as "            
            span(id="type-constraints_1"):              
              text t "type constraints"            
            text t " "            
            text t "of the generic type parameter:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "onlyIntOrString"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Operator"):              
              text t "|"            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "onlyIntOrString"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "450"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "616"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# valid"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "onlyIntOrString"            
            span(class="Punctuation"):              
              text t "("            
            span(class="FloatNumber"):              
              text t "5.0"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="FloatNumber"):              
              text t "0.0"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# type mismatch"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "onlyIntOrString"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"xy\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "50"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# invalid as 'T' cannot be both at the same time"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="generics-implicit-generics",href="#generics-implicit-generics"):              
              text t "Implicit generics"          
          p():            
            text t "A type class can be used directly as the parameter's type."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# create a type class that will match all tuple and object types"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Identifier"):              
              text t "RecordType"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "tuple"            
            text t " "            
            span(class="Keyword"):              
              text t "or"            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "printFields"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "rec"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "RecordType"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "key"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "value"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "fieldPairs"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "rec"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "key"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\" = \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "value"          
          p():            
            text t "Procedures utilizing type classes in such manner are considered to be "            
            span(id="implicitly-generic_1"):              
              text t "implicitly generic"            
            text t ". They will be instantiated once for each unique combination of param types used within the program."          
          text t "\x0A"          
          p():            
            text t "By default, during overload resolution each named type class will bind to exactly one concrete type. We call such type classes "            
            span(id="bind-once_1"):              
              text t "bind once"            
            text t " "            
            text t "types. Here is an example taken directly from the system module to illustrate this:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "=="            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "tuple"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "## requires `x` and `y` to be of the same tuple type"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "## generic ``==`` operator for tuples that is lifted from the components"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "## of `x` and `y`."            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "fields"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "!="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "false"          
          p():            
            text t "Alternatively, the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "distinct"            
            text t " "            
            text t "type modifier can be applied to the type class to allow each param matching the type class to bind to a different type. Such type classes are called "            
            span(id="bind-many_1"):              
              text t "bind many"            
            text t " "            
            text t "types."          
          text t "\x0A"          
          p():            
            text t "Procs written with the implicitly generic style will often need to refer to the type parameters of the matched generic type. They can be easily accessed using the dot syntax:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Identifier"):              
              text t "Matrix"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "Rows"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "Columns"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A  "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "m"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Matrix"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "row"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "col"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Matrix"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "data"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "col"            
            text t " "            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Identifier"):              
              text t "high"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "Matrix"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "Columns"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "row"            
            span(class="Punctuation"):              
              text t "]"          
          p():            
            text t "Here are more examples that illustrate implicit generics:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Table"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "k"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Table"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "Key"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Table"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "Value"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# is roughly the same as:"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "Key"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "Value"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Table"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "Key"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "Value"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "k"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Key"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Value"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Table"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Table"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# is roughly the same as:"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "Key"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "Value"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Table"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "Key"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "Value"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Table"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            text t " "            
            span(class="Identifier"):              
              text t "Table"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# is roughly the same as:"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "Key"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "Value"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "KeyB"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "ValueB"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Table"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "Key"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "Value"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Table"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "KeyB"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "ValueB"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc"            
            text t " "            
            text t "used as a parameter type also introduces an implicit generic. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc"            
            text t " "            
            text t "has its own set of rules:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# is roughly the same as:"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc"            
            text t " "            
            text t "is a \"bind many\" type class:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# is roughly the same as:"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "T2"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T2"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "A parameter of type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc"            
            text t " "            
            text t "is itself usable as a type. If it is used as a type, it\'s the underlying type. (In other words, one level of \"typedesc\"-ness is stripped off:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# is roughly the same as:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# hence this is a valid call:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# as parameter 'a' requires a type, but 'b' requires a value."          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="generics-generic-inference-restrictions",href="#generics-generic-inference-restrictions"):              
              text t "Generic inference restrictions"          
          p():            
            text t "The types "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var T"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc[T]"            
            text t " "            
            text t "cannot be inferred in a generic instantiation. The following is not allowed:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "g"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "proc"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "v"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "y"            
            text t " "            
            span(class="Operator"):              
              text t "+="            
            text t " "            
            span(class="DecNumber"):              
              text t "100"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# allowed: infers 'T' to be of type 'int'"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "g"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "42"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# not valid: 'T' is not inferred to be of type 'var int'"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "g"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "v"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# also not allowed: explict instantiation via 'var int'"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "g"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "v"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="generics-symbol-lookup-in-generics",href="#generics-symbol-lookup-in-generics"):              
              text t "Symbol lookup in generics"          
          text t "\x0A"          
          h3():            
            a(class="toc-backref",id="symbol-lookup-in-generics-open-and-closed-symbols",href="#symbol-lookup-in-generics-open-and-closed-symbols"):              
              text t "Open and Closed symbols"          
          p():            
            text t "The symbol binding rules in generics are slightly subtle: There are \"open\" and \"closed\" symbols. A \"closed\" symbol cannot be re-bound in the instantiation context, an \"open\" symbol can. Per default overloaded symbols are open and every other symbol is closed."          
          text t "\x0A"          
          p():            
            text t "Open symbols are looked up in two different contexts: Both the context at definition and the context at instantiation are considered:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Index"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "=="            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Index"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "borrow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Identifier"):              
              text t "Index"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Identifier"):              
              text t "Index"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Comment"):              
              text t "# works!"          
          p():            
            text t "In the example the generic "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "=="            
            text t " "            
            text t "for tuples (as defined in the system module) uses the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "=="            
            text t " "            
            text t "operators of the tuple's components. However, the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "=="            
            text t " "            
            text t "for the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Index"            
            text t " "            
            text t "type is defined "            
            em():              
              text t "after"            
            text t " "            
            text t "the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "=="            
            text t " "            
            text t "for tuples; yet the example compiles as the instantiation takes the currently defined symbols into account too."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="generics-mixin-statement",href="#generics-mixin-statement"):              
              text t "Mixin statement"          
          p():            
            text t "A symbol can be forced to be open by a "            
            span(id="mixin_1"):              
              text t "mixin"            
            text t " "            
            text t "declaration:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "create"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# there is no overloaded 'init' here, so we need to state that it's an"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# open symbol explicitly:"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "mixin"            
            text t " "            
            span(class="Identifier"):              
              text t "init"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "new"            
            text t " "            
            span(class="Identifier"):              
              text t "result"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "init"            
            text t " "            
            span(class="Identifier"):              
              text t "result"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "mixin"            
            text t " "            
            text t "statements only make sense in templates and generics."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="generics-bind-statement",href="#generics-bind-statement"):              
              text t "Bind statement"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "bind"            
            text t " "            
            text t "statement is the counterpart to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "mixin"            
            text t " "            
            text t "statement. It can be used to explicitly declare identifiers that should be bound early (i.e. the identifiers should be looked up in the scope of the template/generic definition):"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# Module A"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "lastId"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "genId"            
            span(class="Operator"):              
              text t "*:"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "bind"            
            text t " "            
            span(class="Identifier"):              
              text t "lastId"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "inc"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "lastId"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "lastId"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# Module B"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "A"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "genId"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "But a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "bind"            
            text t " "            
            text t "is rarely useful because symbol binding from the definition scope is the default."          
          text t "\x0A"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "bind"            
            text t " "            
            text t "statements only make sense in templates and generics."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="templates",href="#templates"):              
              text t "Templates"          
          p():            
            text t "A template is a simple form of a macro: It is a simple substitution mechanism that operates on Nim's abstract syntax trees. It is processed in the semantic pass of the compiler."          
          text t "\x0A"          
          p():            
            text t "The syntax to "            
            em():              
              text t "invoke"            
            text t " "            
            text t "a template is the same as calling a procedure."          
          text t "\x0A"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "!="            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# this definition exists in the System module"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "not"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "5"            
            text t " "            
            span(class="Operator"):              
              text t "!="            
            text t " "            
            span(class="DecNumber"):              
              text t "6"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# the compiler rewrites that to: assert(not (5 == 6))"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "!="            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t ">"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t ">="            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "in"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "notin"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "isnot"            
            text t " "            
            text t "operators are in fact templates:"          
          text t "\x0A"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a > b"            
            text t " "            
            text t "is transformed into "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "b "                
                text t "<"                
                text t " "                
                text t "a"            
            text t "."            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "a in b"            
            text t " "            
            text t "is transformed into "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "contains(b, a)"            
            text t "."            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "notin"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "isnot"            
            text t " "            
            text t "have the obvious meanings."          
          p():            
            text t "The \"types\" of templates can be the symbols "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "untyped"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typed"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc"            
            text t ". These are \"meta types\", they can only be used in certain contexts. Regular types can be used too; this implies that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typed"            
            text t " "            
            text t "expressions are expected."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="templates-typed-vs-untyped-parameters",href="#templates-typed-vs-untyped-parameters"):              
              text t "Typed vs untyped parameters"          
          p():            
            text t "An "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "untyped"            
            text t " "            
            text t "parameter means that symbol lookups and type resolution is not performed before the expression is passed to the template. This means that for example "            
            em():              
              text t "undeclared"            
            text t " "            
            text t "identifiers can be passed to the template:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "declareInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "declareInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# valid"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "3"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "declareInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typed"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "declareInt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# invalid, because x has not been declared and so has no type"          
          p():            
            text t "A template where every parameter is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "untyped"            
            text t " "            
            text t "is called an "            
            span(id="immediate_1"):              
              text t "immediate"            
            text t " "            
            text t "template. For historical reasons templates can be explicitly annotated with an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "immediate"            
            text t " "            
            text t "pragma and then these templates do not take part in overloading resolution and the parameters' types are "            
            em():              
              text t "ignored"            
            text t " "            
            text t "by the compiler. Explicit immediate templates are now deprecated."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": For historical reasons "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "stmt"            
            text t " "            
            text t "was an alias for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typed"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "expr"            
            text t " "            
            text t "was an alias for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "untyped"            
            text t ", but they are removed."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="templates-passing-a-code-block-to-a-template",href="#templates-passing-a-code-block-to-a-template"):              
              text t "Passing a code block to a template"          
          p():            
            text t "You can pass a block of statements as the last argument to a template following the special "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t ":"            
            text t " "            
            text t "syntax:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "withFile"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "fn"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "mode"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "actions"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "File"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "open"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "fn"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "mode"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "try"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "actions"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "finally"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "close"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "quit"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"cannot open: \""            
            text t " "            
            span(class="Operator"):              
              text t "&"            
            text t " "            
            span(class="Identifier"):              
              text t "fn"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "withFile"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "txt"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"ttempl3.txt\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "fmWrite"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "  "            
            span(class="Comment"):              
              text t "# special colon"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "txt"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "writeLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"line 1\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "txt"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "writeLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"line 2\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "In the example, the two "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "writeLine"            
            text t " "            
            text t "statements are bound to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "actions"            
            text t " "            
            text t "parameter."          
          text t "\x0A"          
          p():            
            text t "Usually to pass a block of code to a template the parameter that accepts the block needs to be of type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "untyped"            
            text t ". Because symbol lookups are then delayed until template instantiation time:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "body"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typed"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "block"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "body"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            text t "  "            
            span(class="Comment"):              
              text t "# fails with 'attempt to redeclare i'"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "i"          
          p():            
            text t "The above code fails with the mysterious error message that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "i"            
            text t " "            
            text t "has already been declared. The reason for this is that the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var i = ..."            
            text t " "            
            text t "bodies need to be type-checked before they are passed to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "body"            
            text t " "            
            text t "parameter and type checking in Nim implies symbol lookups. For the symbol lookups to succeed "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "i"            
            text t " "            
            text t "needs to be added to the current (i.e. outer) scope. After type checking these additions to the symbol table are not rolled back (for better or worse). The same code works with "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "untyped"            
            text t " "            
            text t "as the passed body is not required to be type-checked:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "body"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "block"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "body"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            text t "  "            
            span(class="Comment"):              
              text t "# compiles"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "i"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="templates-varargs-of-untyped",href="#templates-varargs-of-untyped"):              
              text t "Varargs of untyped"          
          p():            
            text t "In addition to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "untyped"            
            text t " "            
            text t "meta-type that prevents type checking there is also "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "varargs[untyped]"            
            text t " "            
            text t "so that not even the number of parameters is fixed:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "hideIdentifiers"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "hideIdentifiers"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "undeclared1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "undeclared2"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "However, since a template cannot iterate over varargs, this feature is generally much more useful for macros."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="templates-symbol-binding-in-templates",href="#templates-symbol-binding-in-templates"):              
              text t "Symbol binding in templates"          
          p():            
            text t "A template is a "            
            span(id="hygienic_1"):              
              text t "hygienic"            
            text t " "            
            text t "macro and so opens a new scope. Most symbols are bound from the definition scope of the template:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# Module A"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "lastId"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "genId"            
            span(class="Operator"):              
              text t "*:"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "inc"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "lastId"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "lastId"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# Module B"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "A"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "genId"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# Works as 'lastId' has been bound in 'genId's defining scope"          
          p():            
            text t "As in generics symbol binding can be influenced via "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "mixin"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "bind"            
            text t " "            
            text t "statements."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="templates-identifier-construction",href="#templates-identifier-construction"):              
              text t "Identifier construction"          
          p():            
            text t "In templates identifiers can be constructed with the backticks notation:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "typedef"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A    "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "inject"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "typ"            
            text t "\x0A    "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Identifier"):              
              text t "P"            
            text t " "            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "inject"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t "`"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "typedef"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "myint"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PMyInt"          
          p():            
            text t "In the example "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "name"            
            text t " "            
            text t "is instantiated with "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "myint"            
            text t ", so `T name` becomes "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Tmyint"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="templates-lookup-rules-for-template-parameters",href="#templates-lookup-rules-for-template-parameters"):              
              text t "Lookup rules for template parameters"          
          p():            
            text t "A parameter "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p"            
            text t " "            
            text t "in a template is even substituted in the expression "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x.p"            
            text t ". Thus template arguments can be used as field names and a global symbol can be shadowed by the same argument name even when fully qualified:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# module 'm'"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Lev"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "levA"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "levB"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "abclev"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "levB"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "tstLev"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "abclev"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Lev"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "abclev"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\" \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "abclev"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "tstLev"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "levA"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# produces: 'levA levA'"          
          p():            
            text t "But the global symbol can properly be captured by a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "bind"            
            text t " "            
            text t "statement:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# module 'm'"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Lev"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "levA"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "levB"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "abclev"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "levB"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "tstLev"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "abclev"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Lev"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "bind"            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "abclev"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "abclev"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\" \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "abclev"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "tstLev"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "levA"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# produces: 'levA levB'"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="templates-hygiene-in-templates",href="#templates-hygiene-in-templates"):              
              text t "Hygiene in templates"          
          p():            
            text t "Per default templates are "            
            span(id="hygienic_2"):              
              text t "hygienic"            
            text t ": Local identifiers declared in a template cannot be accessed in the instantiation context:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "newException"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "exceptn"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "message"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "e"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "exceptn"            
            text t "  "            
            span(class="Comment"):              
              text t "# e is implicitly gensym'ed here"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "new"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "e"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "e"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "msg"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "message"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "e"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# so this works:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "e"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"message\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "raise"            
            text t " "            
            span(class="Identifier"):              
              text t "newException"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "IoError"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "e"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Whether a symbol that is declared in a template is exposed to the instantiation scope is controlled by the "            
            span(id="inject_1"):              
              text t "inject"            
            text t " "            
            text t "and "            
            span(id="gensym_1"):              
              text t "gensym"            
            text t " "            
            text t "pragmas: gensym'ed symbols are not exposed but inject'ed are."          
          text t "\x0A"          
          p():            
            text t "The default for symbols of entity "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "type"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "let"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "const"            
            text t " "            
            text t "is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "gensym"            
            text t " "            
            text t "and for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "proc"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "iterator"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "converter"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "template"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "macro"            
            text t " "            
            text t "is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "inject"            
            text t ". However, if the name of the entity is passed as a template parameter, it is an inject'ed symbol:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "withFile"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "fn"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "mode"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "actions"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "block"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "File"            
            text t "  "            
            span(class="Comment"):              
              text t "# since 'f' is a template param, it's injected implicitly"            
            text t "\x0A    "            
            span(class="Operator"):              
              text t "..."            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "withFile"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "txt"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"ttempl3.txt\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "fmWrite"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "txt"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "writeLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"line 1\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "txt"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "writeLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"line 2\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "inject"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "gensym"            
            text t " "            
            text t "pragmas are second class annotations; they have no semantics outside of a template definition and cannot be abstracted over:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pragma"            
            text t " "            
            span(class="Identifier"):              
              text t "myInject"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "inject"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "myInject"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Comment"):              
              text t "# does NOT work"          
          p():            
            text t "To get rid of hygiene in templates, one can use the "            
            span(id="dirty_1"):              
              text t "dirty"            
            text t " "            
            text t "pragma for a template. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "inject"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "gensym"            
            text t " "            
            text t "have no effect in "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "dirty"            
            text t " "            
            text t "templates."          
          text t "\x0A"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "gensym"            
            text t "'ed symbols cannot be used as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "field"            
            text t " "            
            text t "in the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x.field"            
            text t " "            
            text t "syntax. Nor can they be used in the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ObjectConstruction(field: value)"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "namedParameterCall(field = value)"            
            text t " "            
            text t "syntactic constructs."          
          text t "\x0A"          
          p():            
            text t "The reason for this is that code like"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "tmp"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "f"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "34"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "should work as expected."          
          text t "\x0A"          
          p():            
            text t "However, this means that the method call syntax is not available for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "gensym"            
            text t "'ed symbols:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "tmp"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "gensym"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A  \x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Comment"):              
              text t "# invalid: instead use:  'echo T(x)'."            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "tmp"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "12"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            strong():              
              text t "Note"            
            text t ": The Nim compiler prior to version 1 was more lenient about this requirement. Use the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "--useVersion:0.19"            
            text t " "            
            text t "switch for a transition period."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="templates-limitations-of-the-method-call-syntax",href="#templates-limitations-of-the-method-call-syntax"):              
              text t "Limitations of the method call syntax"          
          p():            
            text t "The expression "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x"            
            text t " "            
            text t "in "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "x.f"            
            text t " "            
            text t "needs to be semantically checked (that means symbol lookup and type checking) before it can be decided that it needs to be rewritten to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "f(x)"            
            text t ". Therefore the dot syntax has some limitations when it is used to invoke templates/macros:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "declareVar"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "const"            
            text t " "            
            span(class="Identifier"):              
              text t "name"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "inject"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "45"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# Doesn't compile:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "unknownIdentifier"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "declareVar"          
          p():            
            text t "Another common example is this:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "from"            
            text t " "            
            span(class="Identifier"):              
              text t "sequtils"            
            text t " "            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "toSeq"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Identifier"):              
              text t "something"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "yield"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Hello\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "yield"            
            text t " "            
            span(class="StringLit"):              
              text t "\"World\""            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "info"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "something"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "toSeq"          
          p():            
            text t "The problem here is that the compiler already decided that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "something()"            
            text t " "            
            text t "as an iterator is not callable in this context before "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "toSeq"            
            text t " "            
            text t "gets its chance to convert it into a sequence."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="macros",href="#macros"):              
              text t "Macros"          
          p():            
            text t "A macro is a special function that is executed at compile time. Normally the input for a macro is an abstract syntax tree (AST) of the code that is passed to it. The macro can then do transformations on it and return the transformed AST. This can be used to add custom language features and implement "            
            span(id="domain-specific-languages_1"):              
              text t "domain specific languages"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "Macro invocation is a case where semantic analyis does "            
            strong():              
              text t "not"            
            text t " "            
            text t "entirely proceed top to bottom and left to right. Instead, semantic analysis happens at least twice:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "Semantic analysis recognizes and resolves the macro invocation."            
            text t "\x0A"            
            li():              
              text t "The compiler executes the macro body (which may invoke other procs)."            
            text t "\x0A"            
            li():              
              text t "It replaces the AST of the macro invocation with the AST returned by the macro."            
            text t "\x0A"            
            li():              
              text t "It repeats semantic analysis of that region of the code."            
            text t "\x0A"            
            li():              
              text t "If the AST returned by the macro contains other macro invocations, this process iterates."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "While macros enable advanced compile-time code transformations, they cannot change Nim's syntax. However, this is no real restriction because Nim's syntax is flexible enough anyway."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="macros-debug-example",href="#macros-debug-example"):              
              text t "Debug Example"          
          p():            
            text t "The following example implements a powerful "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "debug"            
            text t " "            
            text t "command that accepts a variable number of arguments:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# to work with Nim syntax trees, we need an API that is defined in the"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# ``macros`` module:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "macros"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "macro"            
            text t " "            
            span(class="Identifier"):              
              text t "debug"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "args"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# `args` is a collection of `NimNode` values that each contain the"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# AST for an argument of the macro. A macro always has to"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# return a `NimNode`. A node of kind `nnkStmtList` is suitable for"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# this use case."            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "nnkStmtList"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "newTree"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# iterate over any argument that is passed to this macro:"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "args"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Comment"):              
              text t "# add a call to the statement list that writes the expression;"            
            text t "\x0A    "            
            span(class="Comment"):              
              text t "# `toStrLit` converts an AST to its string representation:"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Identifier"):              
              text t "newCall"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"write\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newIdentNode"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"stdout\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newLit"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "n"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "repr"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Comment"):              
              text t "# add a call to the statement list that writes \": \""            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Identifier"):              
              text t "newCall"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"write\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newIdentNode"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"stdout\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newLit"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\": \""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Comment"):              
              text t "# add a call to the statement list that writes the expressions value:"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "result"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Identifier"):              
              text t "newCall"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"writeLine\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newIdentNode"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"stdout\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "array"            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "10"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"some string\""            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "42"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "45"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "debug"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The macro call expands to:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"a[0]\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\": \""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "writeLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"a[1]\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\": \""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "writeLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"x\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\": \""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "writeLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Arguments that are passed to a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "varargs"            
            text t " "            
            text t "parameter are wrapped in an array constructor expression. This is why "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "debug"            
            text t " "            
            text t "iterates over all of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "n"            
            text t "'s children."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="macros-bindsym",href="#macros-bindsym"):              
              text t "BindSym"          
          p():            
            text t "The above "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "debug"            
            text t " "            
            text t "macro relies on the fact that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "write"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "writeLine"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "stdout"            
            text t " "            
            text t "are declared in the system module and thus visible in the instantiating context. There is a way to use bound identifiers (aka "            
            span(id="symbols_1"):              
              text t "symbols"            
            text t ") instead of using unbound identifiers. The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "bindSym"            
            text t " "            
            text t "builtin can be used for that:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "macros"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "macro"            
            text t " "            
            span(class="Identifier"):              
              text t "debug"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "typed"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "newNimNode"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "nnkStmtList"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Comment"):              
              text t "# we can bind symbols in scope via 'bindSym':"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "add"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "result"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newCall"            
            span(class="Punctuation"):              
              text t "("            
            span(class="RawData"):              
              text t "bindSym\"write\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="RawData"):              
              text t "bindSym\"stdout\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "toStrLit"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "add"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "result"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newCall"            
            span(class="Punctuation"):              
              text t "("            
            span(class="RawData"):              
              text t "bindSym\"write\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="RawData"):              
              text t "bindSym\"stdout\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newStrLitNode"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\": \""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "add"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "result"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newCall"            
            span(class="Punctuation"):              
              text t "("            
            span(class="RawData"):              
              text t "bindSym\"writeLine\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="RawData"):              
              text t "bindSym\"stdout\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "array"            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "10"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"some string\""            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "42"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "45"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "debug"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The macro call expands to:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"a[0]\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\": \""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "writeLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"a[1]\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\": \""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "writeLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"x\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\": \""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "writeLine"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "However, the symbols "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "write"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "writeLine"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "stdout"            
            text t " "            
            text t "are already bound and are not looked up again. As the example shows, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "bindSym"            
            text t " "            
            text t "does work with overloaded symbols implicitly."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="macros-caseminusof-macro",href="#macros-caseminusof-macro"):              
              text t "Case-Of Macro"          
          p():            
            text t "In Nim it is possible to have a macro with the syntax of a "            
            em():              
              text t "case-of"            
            text t " "            
            text t "expression just with the difference that all of branches are passed to and processed by the macro implementation. It is then up the macro implementation to transform the "            
            em():              
              text t "of-branches"            
            text t " "            
            text t "into a valid Nim statement. The following example should show how this feature could be used for a lexical analyzer."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "macros"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "macro"            
            text t " "            
            span(class="Identifier"):              
              text t "case_token"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "args"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "args"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "treeRepr"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# creates a lexical analyzer from regular expressions"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# ... (implementation is an exercise for the reader ;-)"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "case_token"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Comment"):              
              text t "# this colon tells the parser it is a macro statement"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="RawData"):              
              text t "r\"[A-Za-z_]+[A-Za-z_0-9]*\""            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "tkIdentifier"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="RawData"):              
              text t "r\"0-9+\""            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "tkInteger"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="RawData"):              
              text t "r\"[\\+\\-\\*\\?]+\""            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "tkOperator"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "tkUnknown"          
          p():            
            strong():              
              text t "Style note"            
            text t ": For code readability, it is the best idea to use the least powerful programming construct that still suffices. So the \"check list\" is:"          
          text t "\x0A"          
          ol(class="simple"):            
            li():              
              text t "Use an ordinary proc/iterator, if possible."            
            text t "\x0A"            
            li():              
              text t "Else: Use a generic proc/iterator, if possible."            
            text t "\x0A"            
            li():              
              text t "Else: Use a template, if possible."            
            text t "\x0A"            
            li():              
              text t "Else: Use a macro."            
            text t "\x0A"          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="macros-macros-as-pragmas",href="#macros-macros-as-pragmas"):              
              text t "Macros as pragmas"          
          p():            
            text t "Whole routines (procs, iterators etc.) can also be passed to a template or a macro via the pragma notation:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "m"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"          
          p():            
            text t "This is a simple syntactic transformation into:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "m"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "m"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="macros-for-loop-macro",href="#macros-for-loop-macro"):              
              text t "For Loop Macro"          
          p():            
            text t "A macro that takes as its only input parameter an expression of the special type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system.ForLoopStmt"            
            text t " "            
            text t "can rewrite the entirety of a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "for"            
            text t " "            
            text t "loop:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "macros"            
            text t "\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "experimental"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"forLoopMacros\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "macro"            
            text t " "            
            span(class="Identifier"):              
              text t "enumerate"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "ForLoopStmt"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "expectKind"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "nnkForStmt"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# we strip off the first for loop variable and use"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# it as an integer counter:"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "newStmtList"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Identifier"):              
              text t "newVarStmt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "newLit"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "body"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Operator"):              
              text t "^"            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "body"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "kind"            
            text t " "            
            span(class="Operator"):              
              text t "!="            
            text t " "            
            span(class="Identifier"):              
              text t "nnkStmtList"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "body"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "newTree"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "nnkStmtList"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "body"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "body"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Identifier"):              
              text t "newCall"            
            span(class="Punctuation"):              
              text t "("            
            span(class="RawData"):              
              text t "bindSym\"inc\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "newFor"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "newTree"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "nnkForStmt"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="FloatNumber"):              
              text t "1."            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "x"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "len"            
            span(class="Operator"):              
              text t "-"            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "newFor"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# transform enumerate(X) to 'X'"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "newFor"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Operator"):              
              text t "^"            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "newFor"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Identifier"):              
              text t "body"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Identifier"):              
              text t "newFor"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# now wrap the whole macro in a block to create a new scope"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "quote"            
            text t " "            
            span(class="Keyword"):              
              text t "do"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "block"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Identifier"):              
              text t "result"            
            span(class="Punctuation"):              
              text t "`"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "enumerate"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "items"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\" \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# without wrapping the macro in a block, we'd need to choose different"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# names for `a` and `b` here to avoid redefinition errors"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="Identifier"):              
              text t "enumerate"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\" \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"          
          p():            
            text t "Currently for loop macros must be enabled explicitly via "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "{.experimental: \"forLoopMacros\".}"            
            text t "."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="special-types",href="#special-types"):              
              text t "Special Types"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="special-types-static-t",href="#special-types-static-t"):              
              text t "static[T]"          
          p():            
            text t "As their name suggests, static parameters must be constant expressions:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "precompiledRegex"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "pattern"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "static"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "RegEx"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "res"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "global"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "re"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "pattern"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "res"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "precompiledRegex"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"/d+\""            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# Replaces the call with a precompiled"            
            text t "\x0A                        "            
            span(class="Comment"):              
              text t "# regex, stored in a global variable"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "precompiledRegex"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "paramStr"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# Error, command-line options"            
            text t "\x0A                              "            
            span(class="Comment"):              
              text t "# are not constant expressions"          
          p():            
            text t "For the purposes of code generation, all static params are treated as generic params - the proc will be compiled separately for each unique supplied value (or combination of values)."          
          text t "\x0A"          
          p():            
            text t "Static params can also appear in the signatures of generic types:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Matrix"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "M"            
            span(class="Punctuation"):              
              text t ","            
            span(class="Identifier"):              
              text t "N"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "static"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Number"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "array"            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "M"            
            span(class="Operator"):              
              text t "*"            
            span(class="Identifier"):              
              text t "N"            
            text t " "            
            span(class="Operator"):              
              text t "-"            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A    "            
            span(class="Comment"):              
              text t "# Note how `Number` is just a type constraint here, while"            
            text t "\x0A    "            
            span(class="Comment"):              
              text t "# `static int` requires us to supply an int value"            
            text t "\x0A  \x0A  "            
            span(class="Identifier"):              
              text t "AffineTransform2D"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Matrix"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "AffineTransform3D"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Matrix"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "m1"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "AffineTransform3D"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "float"            
            span(class="Punctuation"):              
              text t "]"            
            text t "  "            
            span(class="Comment"):              
              text t "# OK"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "m2"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "AffineTransform2D"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Comment"):              
              text t "# Error, `string` is not a `Number`"          
          p():            
            text t "Please note that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "static T"            
            text t " "            
            text t "is just a syntactic convenience for the underlying generic type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "static[T]"            
            text t ". The type param can be omitted to obtain the type class of all constant expressions. A more specific type class can be created by instantiating "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "static"            
            text t " "            
            text t "with another type class."          
          text t "\x0A"          
          p():            
            text t "You can force an expression to be evaluated at compile time as a constant expression by coercing it to a corresponding "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "static"            
            text t " "            
            text t "type:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "math"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Keyword"):              
              text t "static"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "fac"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\" \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "static"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "bool"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="FloatNumber"):              
              text t "16."            
            span(class="Identifier"):              
              text t "isPowerOfTwo"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The complier will report any failure to evaluate the expression or a possible type mismatch error."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="special-types-typedesc-t",href="#special-types-typedesc-t"):              
              text t "typedesc[T]"          
          p():            
            text t "In many contexts, Nim allows you to treat the names of types as regular values. These values exists only during the compilation phase, but since all values must have a type, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc"            
            text t " "            
            text t "is considered their special type."          
          text t "\x0A"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc"            
            text t " "            
            text t "acts like a generic type. For instance, the type of the symbol "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "int"            
            text t " "            
            text t "is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc[int]"            
            text t ". Just like with regular generic types, when the generic param is ommited, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc"            
            text t " "            
            text t "denotes the type class of all types. As a syntactic convenience, you can also use "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc"            
            text t " "            
            text t "as a modifier."          
          text t "\x0A"          
          p():            
            text t "Procs featuring "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc"            
            text t " "            
            text t "params are considered implicitly generic. They will be instantiated for each unique combination of supplied types and within the body of the proc, the name of each param will refer to the bound concrete type:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "new"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ref"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"allocating \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "name"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "new"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "result"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "n"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "new"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "tree"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "new"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "BinaryTree"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "When multiple type params are present, they will bind freely to different types. To force a bind-once behavior one can use an explicit generic param:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "acceptOnlyTypePairs"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "U"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "A"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "B"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "C"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "D"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "U"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Once bound, type params can appear in the rest of the proc signature:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "declareVariableWithType"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "value"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "value"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "declareVariableWithType"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "42"          
          p():            
            text t "Overload resolution can be further influenced by constraining the set of types that will match the type param. This works in practice to attaching attributes to types via templates. The constraint can be a concrete type or a type class."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "maxval"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "high"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "maxval"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "float"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "float"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "Inf"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "maxval"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "f"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "float"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "maxval"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "when"            
            text t " "            
            span(class="Identifier"):              
              text t "false"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "maxval"            
            text t " "            
            span(class="Comment"):              
              text t "# error, maxval is not implemented for string"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "isNumber"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Keyword"):              
              text t "object"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"Don\'t think so.\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "isNumber"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "SomeInteger"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"Yes!\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "isNumber"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "SomeFloat"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"Maybe, could be NaN.\""            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"is int a number? \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "isNumber"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"is float a number? \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "isNumber"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "float"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"is RootObj a number? \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "isNumber"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "RootObj"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Passing "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typedesc"            
            text t " "            
            text t "almost identical, just with the differences that the macro is not instantiated generically. The type expression is simply passed as a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "NimNode"            
            text t " "            
            text t "to the macro, like everything else."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "macros"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "macro"            
            text t " "            
            span(class="Identifier"):              
              text t "forwardType"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "arg"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# ``arg`` is of type ``NimNode``"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "tmp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "NimNode"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "arg"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "tmp"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "tmp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "forwardType"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="special-types-typeof-operator",href="#special-types-typeof-operator"):              
              text t "typeof operator"          
          p():            
            strong():              
              text t "Note"            
            text t ": "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typeof(x)"            
            text t " "            
            text t "can for historical reasons also be written as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "type(x)"            
            text t " "            
            text t "but "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "type(x)"            
            text t " "            
            text t "is discouraged."          
          text t "\x0A"          
          p():            
            text t "You can obtain the type of a given expression by constructing a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typeof"            
            text t " "            
            text t "value from it (in many other languages this is known as the "            
            span(id="typeof_1"):              
              text t "typeof"            
            text t " "            
            text t "operator):"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typeof"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# y has type int"          
          p():            
            text t "If "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typeof"            
            text t " "            
            text t "is used to determine the result type of a proc/iterator/converter call "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "c(X)"            
            text t " "            
            text t "(where "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "X"            
            text t " "            
            text t "stands for a possibly empty list of arguments), the interpretation where "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "c"            
            text t " "            
            text t "is an iterator is preferred over the other interpretations, but this behavior can be changed by passing "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typeOfProc"            
            text t " "            
            text t "as the second argument to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "typeof"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "iterator"            
            text t " "            
            span(class="Identifier"):              
              text t "split"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "split"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "discard"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# since an iterator is the preferred interpretation, `y` has the type ``string``:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "typeof"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"a b c\""            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "split"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "is"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "assert"            
            text t " "            
            span(class="Identifier"):              
              text t "typeof"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"a b c\""            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "split"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "typeOfProc"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Keyword"):              
              text t "is"            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"          
          text t "\x0A"          
          h1():            
            a(class="toc-backref",id="modules",href="#modules"):              
              text t "Modules"          
          p():            
            text t "Nim supports splitting a program into pieces by a module concept. Each module needs to be in its own file and has its own "            
            span(id="namespace_1"):              
              text t "namespace"            
            text t ". Modules enable "            
            span(id="information-hiding_1"):              
              text t "information hiding"            
            text t " "            
            text t "and "            
            span(id="separate-compilation_1"):              
              text t "separate compilation"            
            text t ". A module may gain access to symbols of another module by the "            
            span(id="import_1"):              
              text t "import"            
            text t " "            
            text t "statement. "            
            span(id="recursive-module-dependencies_1"):              
              text t "Recursive module dependencies"            
            text t " "            
            text t "are allowed, but slightly subtle. Only top-level symbols that are marked with an asterisk ("            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "*"            
            text t ") are exported. A valid module name can only be a valid Nim identifier (and thus its filename is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "identifier.nim"            
            text t ")."          
          text t "\x0A"          
          p():            
            text t "The algorithm for compiling modules is:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "compile the whole module as usual, following import statements recursively"            
            text t "\x0A"            
            li():              
              text t "if there is a cycle only import the already parsed symbols (that are exported); if an unknown identifier occurs then abort"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "This is best illustrated by an example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# Module A"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "T1"            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "  "            
            span(class="Comment"):              
              text t "# Module A exports the type ``T1``"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "B"            
            text t "     "            
            span(class="Comment"):              
              text t "# the compiler starts parsing B"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "main"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# works because B has been parsed completely here"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "main"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# Module B"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "A"            
            text t "  "            
            span(class="Comment"):              
              text t "# A is not parsed here! Only the already known symbols"            
            text t "\x0A          "            
            span(class="Comment"):              
              text t "# of A are imported."            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "A"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "T1"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "A"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "T1"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# this works because the compiler has already"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# added T1 to A's interface symbol table"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="DecNumber"):              
              text t "1"          
          text t "\x0A"          
          h3():            
            a(class="toc-backref",id="modules-import-statement",href="#modules-import-statement"):              
              text t "Import statement"          
          p():            
            text t "After the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "import"            
            text t " "            
            text t "statement a list of module names can follow or a single module name followed by an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "except"            
            text t " "            
            text t "list to prevent some symbols to be imported:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "strutils"            
            text t " "            
            span(class="Keyword"):              
              text t "except"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "%"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "toUpperAscii"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# doesn't work then:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"$1\""            
            text t " "            
            span(class="Operator"):              
              text t "%"            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "toUpperAscii"          
          p():            
            text t "It is not checked that the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "except"            
            text t " "            
            text t "list is really exported from the module. This feature allows to compile against an older version of the module that does not export these identifiers."          
          text t "\x0A\x0A"          
          h3():            
            a(class="toc-backref",id="modules-include-statement",href="#modules-include-statement"):              
              text t "Include statement"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "include"            
            text t " "            
            text t "statement does something fundamentally different than importing a module: it merely includes the contents of a file. The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "include"            
            text t " "            
            text t "statement is useful to split up a large module into several files:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "include"            
            text t " "            
            span(class="Identifier"):              
              text t "fileA"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "fileB"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "fileC"          
          text t "\x0A"          
          h3():            
            a(class="toc-backref",id="modules-module-names-in-imports",href="#modules-module-names-in-imports"):              
              text t "Module names in imports"          
          p():            
            text t "A module alias can be introduced via the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "as"            
            text t " "            
            text t "keyword:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "strutils"            
            text t " "            
            span(class="Keyword"):              
              text t "as"            
            text t " "            
            span(class="Identifier"):              
              text t "su"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "sequtils"            
            text t " "            
            span(class="Keyword"):              
              text t "as"            
            text t " "            
            span(class="Identifier"):              
              text t "qu"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "su"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "format"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"$1\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"lalelu\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The original module name is then not accessible. The notations "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "path/to/module"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "\"path/to/module\""            
            text t " "            
            text t "can be used to refer to a module in subdirectories:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "lib"            
            span(class="Operator"):              
              text t "/"            
            span(class="Identifier"):              
              text t "pure"            
            span(class="Operator"):              
              text t "/"            
            span(class="Identifier"):              
              text t "os"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"lib/pure/times\""          
          p():            
            text t "Note that the module name is still "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "strutils"            
            text t " "            
            text t "and not "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "lib/pure/strutils"            
            text t " "            
            text t "and so one "            
            strong():              
              text t "cannot"            
            text t " "            
            text t "do:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "lib"            
            span(class="Operator"):              
              text t "/"            
            span(class="Identifier"):              
              text t "pure"            
            span(class="Operator"):              
              text t "/"            
            span(class="Identifier"):              
              text t "strutils"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "lib"            
            span(class="Operator"):              
              text t "/"            
            span(class="Identifier"):              
              text t "pure"            
            span(class="Operator"):              
              text t "/"            
            span(class="Identifier"):              
              text t "strutils"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "toUpperAscii"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Likewise the following does not make sense as the name is "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "strutils"            
            text t " "            
            text t "already:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "lib"            
            span(class="Operator"):              
              text t "/"            
            span(class="Identifier"):              
              text t "pure"            
            span(class="Operator"):              
              text t "/"            
            span(class="Identifier"):              
              text t "strutils"            
            text t " "            
            span(class="Keyword"):              
              text t "as"            
            text t " "            
            span(class="Identifier"):              
              text t "strutils"          
          text t "\x0A"          
          h3():            
            a(class="toc-backref",id="modules-collective-imports-from-a-directory",href="#modules-collective-imports-from-a-directory"):              
              text t "Collective imports from a directory"          
          p():            
            text t "The syntax "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "import dir / [moduleA, moduleB]"            
            text t " "            
            text t "can be used to import multiple modules from the same directory."          
          text t "\x0A"          
          p():            
            text t "Path names are syntactically either Nim identifiers or string literals. If the path name is not a valid Nim identifier it needs to be a string literal:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="StringLit"):              
              text t "\"gfx/3d/somemodule\""            
            text t " "            
            span(class="Comment"):              
              text t "# in quotes because '3d' is not a valid Nim identifier"          
          text t "\x0A"          
          h3():            
            a(class="toc-backref",id="modules-pseudo-importslashinclude-paths",href="#modules-pseudo-importslashinclude-paths"):              
              text t "Pseudo import/include paths"          
          p():            
            text t "A directory can also be a so called \"pseudo directory\". They can be used to avoid ambiguity when there are multiple modules with the same path."          
          text t "\x0A"          
          p():            
            text t "There are two pseudo directories:"          
          text t "\x0A"          
          p():            
            text t "1. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "std"            
            text t ": The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "std"            
            text t " "            
            text t "pseudo directory is the abstract location of Nim's standard library. For example, the syntax "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "import std / strutils"            
            text t " "            
            text t "is used to unambiguously refer to the standard library's "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "strutils"            
            text t " "            
            text t "module."          
          text t "\x0A"          
          p():            
            text t "2. "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pkg"            
            text t ": The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pkg"            
            text t " "            
            text t "pseudo directory is used to unambiguously refer to a Nimble package. However, for technical details that lie outside of the scope of this document its semantics are: "            
            em():              
              text t "Use the search path to look for module name but ignore the standard library locations"            
            text t ". In other words, it is the opposite of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "std"            
            text t "."          
          text t "\x0A\x0A"          
          h3():            
            a(class="toc-backref",id="modules-from-import-statement",href="#modules-from-import-statement"):              
              text t "From import statement"          
          p():            
            text t "After the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "from"            
            text t " "            
            text t "statement a module name follows followed by an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "import"            
            text t " "            
            text t "to list the symbols one likes to use without explicit full qualification:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "from"            
            text t " "            
            span(class="Identifier"):              
              text t "strutils"            
            text t " "            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "%"            
            span(class="Punctuation"):              
              text t "`"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"$1\""            
            text t " "            
            span(class="Operator"):              
              text t "%"            
            text t " "            
            span(class="StringLit"):              
              text t "\"abc\""            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# always possible: full qualification:"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "strutils"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "replace"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"abc\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"a\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"z\""            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "It's also possible to use "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "from module import nil"            
            text t " "            
            text t "if one wants to import the module but wants to enforce fully qualified access to every symbol in "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "module"            
            text t "."          
          text t "\x0A\x0A"          
          h3():            
            a(class="toc-backref",id="modules-export-statement",href="#modules-export-statement"):              
              text t "Export statement"          
          p():            
            text t "An "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "export"            
            text t " "            
            text t "statement can be used for symbol forwarding so that client modules don't need to import a module's dependencies:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# module B"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Identifier"):              
              text t "MyObject"            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# module A"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "B"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "export"            
            text t " "            
            span(class="Identifier"):              
              text t "B"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "MyObject"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "$"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "MyObject"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"my object\""          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# module C"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "A"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# B.MyObject has been imported implicitly here:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "MyObject"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Operator"):              
              text t "$"            
            span(class="Identifier"):              
              text t "x"          
          p():            
            text t "When the exported symbol is another module, all of its definitions will be forwarded. You can use an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "except"            
            text t " "            
            text t "list to exclude some of the symbols."          
          text t "\x0A"          
          p():            
            text t "Notice that when exporting, you need to specify only the module name:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Operator"):              
              text t "/"            
            span(class="Identifier"):              
              text t "bar"            
            span(class="Operator"):              
              text t "/"            
            span(class="Identifier"):              
              text t "baz"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "export"            
            text t " "            
            span(class="Identifier"):              
              text t "baz"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="modules-scope-rules",href="#modules-scope-rules"):              
              text t "Scope rules"          
          p():            
            text t "Identifiers are valid from the point of their declaration until the end of the block in which the declaration occurred. The range where the identifier is known is the scope of the identifier. The exact scope of an identifier depends on the way it was declared."          
          text t "\x0A\x0A"          
          h3():            
            a(class="toc-backref",id="scope-rules-block-scope",href="#scope-rules-block-scope"):              
              text t "Block scope"          
          p():            
            text t "The "            
            em():              
              text t "scope"            
            text t " "            
            text t "of a variable declared in the declaration part of a block is valid from the point of declaration until the end of the block. If a block contains a second block, in which the identifier is redeclared, then inside this block, the second declaration will be valid. Upon leaving the inner block, the first declaration is valid again. An identifier cannot be redefined in the same block, except if valid for procedure or iterator overloading purposes."          
          text t "\x0A\x0A"          
          h3():            
            a(class="toc-backref",id="scope-rules-tuple-or-object-scope",href="#scope-rules-tuple-or-object-scope"):              
              text t "Tuple or object scope"          
          p():            
            text t "The field identifiers inside a tuple or object definition are valid in the following places:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "To the end of the tuple/object definition."            
            text t "\x0A"            
            li():              
              text t "Field designators of a variable of the given tuple/object type."            
            text t "\x0A"            
            li():              
              text t "In all descendant types of the object type."            
            text t "\x0A"          
          text t "\x0A\x0A"          
          h3():            
            a(class="toc-backref",id="scope-rules-module-scope",href="#scope-rules-module-scope"):              
              text t "Module scope"          
          p():            
            text t "All identifiers of a module are valid from the point of declaration until the end of the module. Identifiers from indirectly dependent modules are "            
            em():              
              text t "not"            
            text t " "            
            text t "available. The "            
            span(id="system_1"):              
              text t "system"            
            text t " "            
            text t "module is automatically imported in every module."          
          text t "\x0A"          
          p():            
            text t "If a module imports an identifier by two different modules, each occurrence of the identifier has to be qualified, unless it is an overloaded procedure or iterator in which case the overloading resolution takes place:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# Module A"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Operator"):              
              text t "*:"            
            text t " "            
            span(class="Identifier"):              
              text t "string"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# Module B"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Operator"):              
              text t "*:"            
            text t " "            
            span(class="Identifier"):              
              text t "int"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# Module C"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "A"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "B"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# error: x is ambiguous"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "A"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# no error: qualifier used"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "write"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "stdout"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# not ambiguous: uses the module C's x"          
          text t "\x0A"          
          h3():            
            a(class="toc-backref",id="scope-rules-code-reordering",href="#scope-rules-code-reordering"):              
              text t "Code reordering"          
          p():            
            strong():              
              text t "Note"            
            text t ": Code reordering is experimental and must be enabled via the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "{.experimental.}"            
            text t " "            
            text t "pragma."          
          text t "\x0A"          
          p():            
            text t "The code reordering feature can implicitly rearrange procedure, template, and macro definitions along with variable declarations and initializations at the top level scope so that, to a large extent, a programmer should not have to worry about ordering definitions correctly or be forced to use forward declarations to preface definitions inside a module."          
          text t "\x0A"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "experimental"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"codeReordering\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "bar"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "bar"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "10"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Variables can also be reordered as well. Variables that are "            
            em():              
              text t "initialized"            
            text t " "            
            text t "(i.e. variables that have their declaration and assignment combined in a single statement) can have their entire initialization statement reordered. Be wary of what code is executed at the top level:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "experimental"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"codeReordering\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# outputs: \"5\""          
          p():            
            text t "It is important to note that reordering "            
            em():              
              text t "only"            
            text t " "            
            text t "works for symbols at top level scope. Therefore, the following will "            
            em():              
              text t "fail to compile:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "experimental"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"codeReordering\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"Hello!\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h1():            
            a(class="toc-backref",id="compiler-messages",href="#compiler-messages"):              
              text t "Compiler Messages"          
          p():            
            text t "The Nim compiler emits different kinds of messages: "            
            span(id="hint_1"):              
              text t "hint"            
            text t ", "            
            span(id="warning_1"):              
              text t "warning"            
            text t ", and "            
            span(id="error_1"):              
              text t "error"            
            text t " "            
            text t "messages. An "            
            em():              
              text t "error"            
            text t " "            
            text t "message is emitted if the compiler encounters any static error."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="pragmas",href="#pragmas"):              
              text t "Pragmas"          
          p():            
            text t "Pragmas are Nim's method to give the compiler additional information / commands without introducing a massive number of new keywords. Pragmas are processed on the fly during semantic checking. Pragmas are enclosed in the special "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "{."            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t ".}"            
            text t " "            
            text t "curly brackets. Pragmas are also often used as a first implementation to play with a language feature before a nicer syntax to access the feature becomes available."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-deprecated-pragma",href="#pragmas-deprecated-pragma"):              
              text t "deprecated pragma"          
          p():            
            text t "The deprecated pragma is used to mark a symbol as deprecated:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "deprecated"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "deprecated"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "char"          
          p():            
            text t "This pragma can also take in an optional warning string to relay to developers."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "thing"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "deprecated"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"use thong instead\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-nosideeffect-pragma",href="#pragmas-nosideeffect-pragma"):              
              text t "noSideEffect pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "noSideEffect"            
            text t " "            
            text t "pragma is used to mark a proc/iterator to have no side effects. This means that the proc/iterator only changes locations that are reachable from its parameters and the return value only depends on the arguments. If none of its parameters have the type "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var T"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ref T"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ptr T"            
            text t " "            
            text t "this means no locations are modified. It is a static error to mark a proc/iterator to have no side effect if the compiler cannot verify this."          
          text t "\x0A"          
          p():            
            text t "As a special semantic rule, the built-in "            
            a(class="reference external",href="system.html#debugEcho"):              
              text t "debugEcho"            
            text t " "            
            text t "pretends to be free of side effects, so that it can be used for debugging routines marked as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "noSideEffect"            
            text t "."          
          text t "\x0A"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "func"            
            text t " "            
            text t "is syntactic sugar for a proc with no side effects:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "func"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "+"            
            span(class="Punctuation"):              
              text t "`"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"          
          p():            
            text t "To override the compiler's side effect analysis a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "{.noSideEffect.}"            
            text t " "            
            text t "pragma block can be used:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "func"            
            text t " "            
            span(class="Identifier"):              
              text t "f"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "noSideEffect"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"test\""          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-compiletime-pragma",href="#pragmas-compiletime-pragma"):              
              text t "compileTime pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "compileTime"            
            text t " "            
            text t "pragma is used to mark a proc or variable to be used only during compile-time execution. No code will be generated for it. Compile-time procs are useful as helpers for macros. Since version 0.12.0 of the language, a proc that uses "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system.NimNode"            
            text t " "            
            text t "within its parameter types is implicitly declared "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "compileTime"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "astHelper"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "NimNode"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "NimNode"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "n"          
          p():            
            text t "Is the same as:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "astHelper"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "n"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "NimNode"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "NimNode"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "compileTime"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "n"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "compileTime"            
            text t " "            
            text t "variables are available at runtime too. This simplifies certain idioms where variables are filled at compile-time (for example, lookup tables) but accessed at runtime:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "macros"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "nameToProc"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "compileTime"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "nimcall"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "macro"            
            text t " "            
            span(class="Identifier"):              
              text t "registerProc"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "newTree"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "nnkStmtList"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A  \x0A  "            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "procName"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "procNameAsStr"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "$"            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            text t " "            
            span(class="Identifier"):              
              text t "quote"            
            text t " "            
            span(class="Keyword"):              
              text t "do"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "nameToProc"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "add"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Identifier"):              
              text t "procNameAsStr"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Identifier"):              
              text t "procName"            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foo"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "registerProc"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"foo\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "bar"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "registerProc"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"bar\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "baz"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "registerProc"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"baz\""            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "doAssert"            
            text t " "            
            span(class="Identifier"):              
              text t "nameToProc"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="StringLit"):              
              text t "\"baz\""          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-noreturn-pragma",href="#pragmas-noreturn-pragma"):              
              text t "noReturn pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "noreturn"            
            text t " "            
            text t "pragma is used to mark a proc that never returns."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-acyclic-pragma",href="#pragmas-acyclic-pragma"):              
              text t "acyclic pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "acyclic"            
            text t " "            
            text t "pragma applies to type declarations. It is deprecated and ignored."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-final-pragma",href="#pragmas-final-pragma"):              
              text t "final pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "final"            
            text t " "            
            text t "pragma can be used for an object type to specify that it cannot be inherited from. Note that inheritance is only available for objects that inherit from an existing object (via the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "object of SuperType"            
            text t " "            
            text t "syntax) or that have been marked as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "inheritable"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-shallow-pragma",href="#pragmas-shallow-pragma"):              
              text t "shallow pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "shallow"            
            text t " "            
            text t "pragma affects the semantics of a type: The compiler is allowed to make a shallow copy. This can cause serious semantic issues and break memory safety! However, it can speed up assignments considerably, because the semantics of Nim require deep copying of sequences and strings. This can be expensive, especially if sequences are used to build a tree structure:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "NodeKind"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t " "            
            span(class="Identifier"):              
              text t "nkLeaf"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "nkInner"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Node"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "shallow"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "kind"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "NodeKind"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "nkLeaf"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "strVal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "nkInner"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "children"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "Node"            
            span(class="Punctuation"):              
              text t "]"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-pure-pragma",href="#pragmas-pure-pragma"):              
              text t "pure pragma"          
          p():            
            text t "An object type can be marked with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pure"            
            text t " "            
            text t "pragma so that its type field which is used for runtime type identification is omitted. This used to be necessary for binary compatibility with other compiled languages."          
          text t "\x0A"          
          p():            
            text t "An enum type can be marked as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pure"            
            text t ". Then access of its fields always requires full qualification."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-asmnostackframe-pragma",href="#pragmas-asmnostackframe-pragma"):              
              text t "asmNoStackFrame pragma"          
          p():            
            text t "A proc can be marked with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "asmNoStackFrame"            
            text t " "            
            text t "pragma to tell the compiler it should not generate a stack frame for the proc. There are also no exit statements like "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "return result;"            
            text t " "            
            text t "generated and the generated C function is declared as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "__declspec(naked)"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "__attribute__((naked))"            
            text t " "            
            text t "(depending on the used C compiler)."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": This pragma should only be used by procs which consist solely of assembler statements."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-error-pragma",href="#pragmas-error-pragma"):              
              text t "error pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "error"            
            text t " "            
            text t "pragma is used to make the compiler output an error message with the given content. Compilation does not necessarily abort after an error though."          
          text t "\x0A"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "error"            
            text t " "            
            text t "pragma can also be used to annotate a symbol (like an iterator or proc). The "            
            em():              
              text t "usage"            
            text t " "            
            text t "of the symbol then triggers a static error. This is especially useful to rule out that some operation is valid due to overloading and type conversions:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "## check that underlying int values are compared and not the pointers:"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Operator"):              
              text t "=="            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "error"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-fatal-pragma",href="#pragmas-fatal-pragma"):              
              text t "fatal pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "fatal"            
            text t " "            
            text t "pragma is used to make the compiler output an error message with the given content. In contrast to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "error"            
            text t " "            
            text t "pragma, compilation is guaranteed to be aborted by this pragma. Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "when"            
            text t " "            
            span(class="Keyword"):              
              text t "not"            
            text t " "            
            span(class="Identifier"):              
              text t "defined"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "objc"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "fatal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Compile this program with the objc command!\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-warning-pragma",href="#pragmas-warning-pragma"):              
              text t "warning pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "warning"            
            text t " "            
            text t "pragma is used to make the compiler output a warning message with the given content. Compilation continues after the warning."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-hint-pragma",href="#pragmas-hint-pragma"):              
              text t "hint pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "hint"            
            text t " "            
            text t "pragma is used to make the compiler output a hint message with the given content. Compilation continues after the hint."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-line-pragma",href="#pragmas-line-pragma"):              
              text t "line pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "line"            
            text t " "            
            text t "pragma can be used to affect line information of the annotated statement as seen in stack backtraces:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "myassert"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "cond"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "untyped"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "msg"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"\""            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Keyword"):              
              text t "not"            
            text t " "            
            span(class="Identifier"):              
              text t "cond"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Comment"):              
              text t "# change run-time line information of the 'raise' statement:"            
            text t "\x0A    "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "line"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "instantiationInfo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Keyword"):              
              text t "raise"            
            text t " "            
            span(class="Identifier"):              
              text t "newException"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "EAssertionFailed"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "msg"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "If the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "line"            
            text t " "            
            text t "pragma is used with a parameter, the parameter needs be a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "tuple[filename: string, line: int]"            
            text t ". If it is used without a parameter, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system.InstantiationInfo()"            
            text t " "            
            text t "is used."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-linearscanend-pragma",href="#pragmas-linearscanend-pragma"):              
              text t "linearScanEnd pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "linearScanEnd"            
            text t " "            
            text t "pragma can be used to tell the compiler how to compile a Nim "            
            span(id="case_1"):              
              text t "case"            
            text t " "            
            text t "statement. Syntactically it has to be used as a statement:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "myInt"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"most common case\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "linearScanEnd"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"second most common case\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"unlikely: use branch table\""            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"unlikely too: use branch table for \""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "myInt"          
          p():            
            text t "In the example, the case branches "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "0"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "1"            
            text t " "            
            text t "are much more common than the other cases. Therefore the generated assembler code should test for these values first, so that the CPU's branch predictor has a good chance to succeed (avoiding an expensive CPU pipeline stall). The other cases might be put into a jump table for O(1) overhead, but at the cost of a (very likely) pipeline stall."          
          text t "\x0A"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "linearScanEnd"            
            text t " "            
            text t "pragma should be put into the last branch that should be tested against via linear scanning. If put into the last branch of the whole "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "case"            
            text t " "            
            text t "statement, the whole "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "case"            
            text t " "            
            text t "statement uses linear scanning."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-computedgoto-pragma",href="#pragmas-computedgoto-pragma"):              
              text t "computedGoto pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "computedGoto"            
            text t " "            
            text t "pragma can be used to tell the compiler how to compile a Nim "            
            span(id="case_2"):              
              text t "case"            
            text t " "            
            text t "in a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "while true"            
            text t " "            
            text t "statement. Syntactically it has to be used as a statement inside the loop:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "MyEnum"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "enum"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "enumA"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "enumB"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "enumC"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "enumD"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "enumE"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "vm"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "instructions"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "array"            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "100"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "MyEnum"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "instructions"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "enumC"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "instructions"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "enumD"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "instructions"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "enumA"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "instructions"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "5"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "enumD"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "instructions"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "6"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "enumC"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "instructions"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "7"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "enumA"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "instructions"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "8"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "enumB"            
            text t "\x0A  \x0A  "            
            span(class="Identifier"):              
              text t "instructions"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "12"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "enumE"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "pc"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "while"            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "computedGoto"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "instr"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "instructions"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "pc"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "case"            
            text t " "            
            span(class="Identifier"):              
              text t "instr"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "enumA"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"yeah A\""            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "enumC"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "enumD"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"yeah CD\""            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "enumB"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"yeah B\""            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "of"            
            text t " "            
            span(class="Identifier"):              
              text t "enumE"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Keyword"):              
              text t "break"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "inc"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "pc"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "vm"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "As the example shows "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "computedGoto"            
            text t " "            
            text t "is mostly useful for interpreters. If the underlying backend (C compiler) does not support the computed goto extension the pragma is simply ignored."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-unroll-pragma",href="#pragmas-unroll-pragma"):              
              text t "unroll pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "unroll"            
            text t " "            
            text t "pragma can be used to tell the compiler that it should unroll a "            
            span(id="for_2"):              
              text t "for"            
            text t " "            
            text t "or "            
            span(id="while_1"):              
              text t "while"            
            text t " "            
            text t "loop for execution efficiency:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "searchChar"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "char"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="DecNumber"):              
              text t "0"            
            text t " "            
            span(class="Operator"):              
              text t ".."            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "high"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "unroll"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="FloatNumber"):              
              text t "4."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "i"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "return"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Operator"):              
              text t "-"            
            span(class="DecNumber"):              
              text t "1"          
          p():            
            text t "In the above example, the search loop is unrolled by a factor 4. The unroll factor can be left out too; the compiler then chooses an appropriate unroll factor."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": Currently the compiler recognizes but ignores this pragma."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-immediate-pragma",href="#pragmas-immediate-pragma"):              
              text t "immediate pragma"          
          p():            
            text t "The immediate pragma is obsolete. See "            
            a(class="reference external",href="#typed-vs-untyped-parameters"):              
              text t "Typed vs untyped parameters"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-compilation-option-pragmas",href="#pragmas-compilation-option-pragmas"):              
              text t "compilation option pragmas"          
          p():            
            text t "The listed pragmas here can be used to override the code generation options for a proc/method/converter."          
          text t "\x0A"          
          p():            
            text t "The implementation currently provides the following possible options (various others may be added later)."          
          text t "\x0A"          
          table(class="docutils",border="1"):            
            tr():              
              th():                
                text t "pragma"              
              th():                
                text t "allowed values"              
              th():                
                text t "description"            
            text t "\x0A"            
            tr():              
              td():                
                text t "checks"              
              td():                
                text t "on|off "              
              td():                
                text t "Turns the code generation for all runtime checks on or off."            
            text t "\x0A"            
            tr():              
              td():                
                text t "boundChecks"              
              td():                
                text t "on|off "              
              td():                
                text t "Turns the code generation for array bound checks on or off."            
            text t "\x0A"            
            tr():              
              td():                
                text t "overflowChecks"              
              td():                
                text t "on|off "              
              td():                
                text t "Turns the code generation for over- or underflow checks on or off."            
            text t "\x0A"            
            tr():              
              td():                
                text t "nilChecks"              
              td():                
                text t "on|off "              
              td():                
                text t "Turns the code generation for nil pointer checks on or off."            
            text t "\x0A"            
            tr():              
              td():                
                text t "assertions"              
              td():                
                text t "on|off "              
              td():                
                text t "Turns the code generation for assertions on or off."            
            text t "\x0A"            
            tr():              
              td():                
                text t "warnings"              
              td():                
                text t "on|off "              
              td():                
                text t "Turns the warning messages of the compiler on or off."            
            text t "\x0A"            
            tr():              
              td():                
                text t "hints"              
              td():                
                text t "on|off "              
              td():                
                text t "Turns the hint messages of the compiler on or off."            
            text t "\x0A"            
            tr():              
              td():                
                text t "optimization"              
              td():                
                text t "none|speed|size "              
              td():                
                text t "Optimize the code for speed or size, or disable optimization."            
            text t "\x0A"            
            tr():              
              td():                
                text t "patterns"              
              td():                
                text t "on|off "              
              td():                
                text t "Turns the term rewriting templates/macros on or off."            
            text t "\x0A"            
            tr():              
              td():                
                text t "callconv"              
              td():                
                text t "cdecl|..."              
              td():                
                text t "Specifies the default calling convention for all procedures (and procedure types) that follow."            
            text t "\x0A"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "checks"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "off"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "optimization"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "speed"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# compile without runtime checks and optimize for speed"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-push-and-pop-pragmas",href="#pragmas-push-and-pop-pragmas"):              
              text t "push and pop pragmas"          
          p():            
            text t "The "            
            span(id="pushslashpop_1"):              
              text t "push/pop"            
            text t " "            
            text t "pragmas are very similar to the option directive, but are used to override the settings temporarily. Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "push"            
            text t " "            
            span(class="Identifier"):              
              text t "checks"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "off"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# compile this section without runtime checks as it is"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# speed critical"            
            text t "\x0A"            
            span(class="Comment"):              
              text t "# ... some code ..."            
            text t "\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pop"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Comment"):              
              text t "# restore old settings"          
          p():            
            span(id="pushslashpop_2"):              
              text t "push/pop"            
            text t " "            
            text t "can switch on/off some standard library pragmas, example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "push"            
            text t " "            
            span(class="Identifier"):              
              text t "inline"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "thisIsInlined"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "42"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "func"            
            text t " "            
            span(class="Identifier"):              
              text t "willBeInlined"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "float"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="FloatNumber"):              
              text t "42.0"            
            text t "\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pop"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "notInlined"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "9"            
            text t "\x0A\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "push"            
            text t " "            
            span(class="Identifier"):              
              text t "discardable"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "boundChecks"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "off"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "compileTime"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "noSideEffect"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "experimental"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "example"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"https://nim-lang.org\""            
            text t "\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pop"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "push"            
            text t " "            
            span(class="Identifier"):              
              text t "deprecated"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "hint"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "LineTooLong"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "off"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "used"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "stackTrace"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "off"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "sample"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            text t "\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pop"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "For third party pragmas it depends on its implementation, but uses the same syntax."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-register-pragma",href="#pragmas-register-pragma"):              
              text t "register pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "register"            
            text t " "            
            text t "pragma is for variables only. It declares the variable as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "register"            
            text t ", giving the compiler a hint that the variable should be placed in a hardware register for faster access. C compilers usually ignore this though and for good reasons: Often they do a better job without it anyway."          
          text t "\x0A"          
          p():            
            text t "In highly specific cases (a dispatch loop of a bytecode interpreter for example) it may provide benefits, though."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-global-pragma",href="#pragmas-global-pragma"):              
              text t "global pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "global"            
            text t " "            
            text t "pragma can be applied to a variable within a proc to instruct the compiler to store it in a global location and initialize it once at program startup."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "isHexNumber"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "pattern"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "global"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="RawData"):              
              text t "re\"[0-9a-fA-F]+\""            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "s"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "match"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "pattern"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "When used within a generic proc, a separate unique global variable will be created for each instantiation of the proc. The order of initialization of the created global variables within a module is not defined, but all of them will be initialized after any top-level variables in their originating module and before any variable in a module that imports it."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-pragma-pragma",href="#pragmas-pragma-pragma"):              
              text t "pragma pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pragma"            
            text t " "            
            text t "pragma can be used to declare user defined pragmas. This is useful because Nim's templates and macros do not affect pragmas. User defined pragmas are in a different module-wide scope than all other symbols. They cannot be imported from a module."          
          text t "\x0A"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "when"            
            text t " "            
            span(class="Identifier"):              
              text t "appType"            
            text t " "            
            span(class="Operator"):              
              text t "=="            
            text t " "            
            span(class="StringLit"):              
              text t "\"lib\""            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pragma"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "rtl"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "exportc"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "dynlib"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "cdecl"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "else"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pragma"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "rtl"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "importc"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "dynlib"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"client.dll\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "cdecl"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "rtl"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Operator"):              
              text t "+"            
            span(class="Identifier"):              
              text t "b"          
          p():            
            text t "In the example a new pragma named "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "rtl"            
            text t " "            
            text t "is introduced that either imports a symbol from a dynamic library or exports the symbol for dynamic library generation."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-disabling-certain-messages",href="#pragmas-disabling-certain-messages"):              
              text t "Disabling certain messages"          
          p():            
            text t "Nim generates some warnings and hints (\"line too long\") that may annoy the user. A mechanism for disabling certain messages is provided: Each hint and warning message contains a symbol in brackets. This is the message\'s identifier that can be used to enable or disable it:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "hint"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "LineTooLong"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "off"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Comment"):              
              text t "# turn off the hint about too long lines"          
          p():            
            text t "This is often better than disabling all warnings at once."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-used-pragma",href="#pragmas-used-pragma"):              
              text t "used pragma"          
          p():            
            text t "Nim produces a warning for symbols that are not exported and not used either. The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "used"            
            text t " "            
            text t "pragma can be attached to a symbol to suppress this warning. This is particularly useful when the symbol was generated by a macro:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "implementArithOps"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "echoAdd"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "used"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "+"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "echoSub"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "used"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Operator"):              
              text t "-"            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# no warning produced for the unused 'echoSub'"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "implementArithOps"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echoAdd"            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "5"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "used"            
            text t " "            
            text t "can also be used as a top level statement to mark a module as \"used\". This prevents the \"Unused import\" warning:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# module: debughelper.nim"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "when"            
            text t " "            
            span(class="Identifier"):              
              text t "defined"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "nimHasUsed"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# 'import debughelper' is so useful for debugging"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# that Nim shouldn't produce a warning for that import,"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# even if currently unused:"            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "used"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="pragmas-experimental-pragma",href="#pragmas-experimental-pragma"):              
              text t "experimental pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "experimental"            
            text t " "            
            text t "pragma enables experimental language features. Depending on the concrete feature this means that the feature is either considered too unstable for an otherwise stable release or that the future of the feature is uncertain (it may be removed any time)."          
          text t "\x0A"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "experimental"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"parallel\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "useParallel"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "parallel"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"echo in parallel\""          
          p():            
            text t "As a top level statement, the experimental pragma enables a feature for the rest of the module it's enabled in. This is problematic for macro and generic instantiations that cross a module scope. Currently these usages have to be put into a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t ".push/pop"            
            text t " "            
            text t "environment:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# client.nim"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "useParallel"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "unused"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# use a generic T here to show the problem."            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "push"            
            text t " "            
            span(class="Identifier"):              
              text t "experimental"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"parallel\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "parallel"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Keyword"):              
              text t "for"            
            text t " "            
            span(class="Identifier"):              
              text t "i"            
            text t " "            
            span(class="Keyword"):              
              text t "in"            
            text t " "            
            span(class="FloatNumber"):              
              text t "0."            
            span(class="Operator"):              
              text t "."            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A      "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"echo in parallel\""            
            text t "\x0A  \x0A  "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pop"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "client"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "useParallel"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h1():            
            a(class="toc-backref",id="implementation-specific-pragmas",href="#implementation-specific-pragmas"):              
              text t "Implementation Specific Pragmas"          
          p():            
            text t "This section describes additional pragmas that the current Nim implementation supports but which should not be seen as part of the language specification."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-bitsize-pragma",href="#implementation-specific-pragmas-bitsize-pragma"):              
              text t "Bitsize pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "bitsize"            
            text t " "            
            text t "pragma is for object field members. It declares the field as a bitfield in C/C++."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "mybitfield"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "flag"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "bitsize"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="FloatNumber"):              
              text t "1."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cuint"          
          p():            
            text t "generates:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "struct"            
            text t " "            
            span(class="Identifier"):              
              text t "mybitfield"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "unsigned"            
            text t " "            
            span(class="Keyword"):              
              text t "int"            
            text t " "            
            span(class="Identifier"):              
              text t "flag"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ";"            
            text t "\x0A"            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ";"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-volatile-pragma",href="#implementation-specific-pragmas-volatile-pragma"):              
              text t "Volatile pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "volatile"            
            text t " "            
            text t "pragma is for variables only. It declares the variable as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "volatile"            
            text t ", whatever that means in C/C++ (its semantics are not well defined in C/C++)."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": This pragma will not exist for the LLVM backend."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-nodecl-pragma",href="#implementation-specific-pragmas-nodecl-pragma"):              
              text t "NoDecl pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "noDecl"            
            text t " "            
            text t "pragma can be applied to almost any symbol (variable, proc, type, etc.) and is sometimes useful for interoperability with C: It tells Nim that it should not generate a declaration for the symbol in the C code. For example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "EACCES"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importc"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "noDecl"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cint"            
            text t " "            
            span(class="Comment"):              
              text t "# pretend EACCES was a variable, as"            
            text t "\x0A                                   "            
            span(class="Comment"):              
              text t "# Nim does not know its value"          
          p():            
            text t "However, the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "header"            
            text t " "            
            text t "pragma is often the better alternative."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": This will not work for the LLVM backend."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-header-pragma",href="#implementation-specific-pragmas-header-pragma"):              
              text t "Header pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "header"            
            text t " "            
            text t "pragma is very similar to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "noDecl"            
            text t " "            
            text t "pragma: It can be applied to almost any symbol and specifies that it should not be declared and instead the generated code should contain an "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "#include"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "PFile"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importc"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"FILE*\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "header"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\""              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            text t " "            
            span(class="Identifier"):              
              text t "pointer"            
            text t "\x0A    "            
            span(class="Comment"):              
              text t "# import C's FILE* type; Nim will treat it as a new pointer type"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "header"            
            text t " "            
            text t "pragma always expects a string constant. The string contant contains the header file: As usual for C, a system header file is enclosed in angle brackets: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "<"                
                text t ">"            
            text t ". If no angle brackets are given, Nim encloses the header file in "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "\"\""            
            text t " "            
            text t "in the generated C code."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": This will not work for the LLVM backend."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-incompletestruct-pragma",href="#implementation-specific-pragmas-incompletestruct-pragma"):              
              text t "IncompleteStruct pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "incompleteStruct"            
            text t " "            
            text t "pragma tells the compiler to not use the underlying C "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "struct"            
            text t " "            
            text t "in a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "sizeof"            
            text t " "            
            text t "expression:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "DIR"            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importc"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"DIR\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "header"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\""              
              text t ","            
            text t "\x0A         "            
            span(class="Identifier"):              
              text t "pure"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "incompleteStruct"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-compile-pragma",href="#implementation-specific-pragmas-compile-pragma"):              
              text t "Compile pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "compile"            
            text t " "            
            text t "pragma can be used to compile and link a C/C++ source file with the project:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "compile"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"myfile.cpp\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            strong():              
              text t "Note"            
            text t ": Nim computes a SHA1 checksum and only recompiles the file if it has changed. You can use the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "-f"            
            text t " "            
            text t "command line option to force recompilation of the file."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-link-pragma",href="#implementation-specific-pragmas-link-pragma"):              
              text t "Link pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "link"            
            text t " "            
            text t "pragma can be used to link an additional file with the project:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "link"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"myfile.o\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-passc-pragma",href="#implementation-specific-pragmas-passc-pragma"):              
              text t "PassC pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "passC"            
            text t " "            
            text t "pragma can be used to pass additional parameters to the C compiler like you would using the commandline switch "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "--passC"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "passC"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"-Wall -Werror\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "Note that you can use "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "gorge"            
            text t " "            
            text t "from the "            
            a(class="reference external",href="system.html"):              
              text t "system module"            
            text t " "            
            text t "to embed parameters from an external command that will be executed during semantic analysis:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "passC"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "gorge"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"pkg-config --cflags sdl\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-passl-pragma",href="#implementation-specific-pragmas-passl-pragma"):              
              text t "PassL pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "passL"            
            text t " "            
            text t "pragma can be used to pass additional parameters to the linker like you would using the commandline switch "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "--passL"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "passL"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"-lSDLmain -lSDL\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "Note that you can use "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "gorge"            
            text t " "            
            text t "from the "            
            a(class="reference external",href="system.html"):              
              text t "system module"            
            text t " "            
            text t "to embed parameters from an external command that will be executed during semantic analysis:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "passL"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "gorge"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"pkg-config --libs sdl\""            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-emit-pragma",href="#implementation-specific-pragmas-emit-pragma"):              
              text t "Emit pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "emit"            
            text t " "            
            text t "pragma can be used to directly affect the output of the compiler's code generator. So it makes your code unportable to other code generators/backends. Its usage is highly discouraged! However, it can be extremely useful for interfacing with "            
            span(id="cplusplus_1"):              
              text t "C++"            
            text t " "            
            text t "or "            
            span(id="objective-c_1"):              
              text t "Objective C"            
            text t " "            
            text t "code."          
          text t "\x0A"          
          p():            
            text t "Example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "emit"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="LongStringLit"):              
              text t "\"\"\"\x0Astatic int cvariable = 420;\x0A\"\"\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "push"            
            text t " "            
            span(class="Identifier"):              
              text t "stackTrace"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="Identifier"):              
              text t "off"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "embedsC"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "nimVar"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "89"            
            text t "\x0A  "            
            span(class="Comment"):              
              text t "# access Nim symbols within an emit section outside of string literals:"            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "emit"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="LongStringLit"):              
              text t "\"\"\"fprintf(stdout, \"%d\\n\", cvariable + (int)\"\"\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "nimVar"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\");\""            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pop"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "embedsC"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nimbase.h"            
            text t " "            
            text t "defines "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "NIM_EXTERNC"            
            text t " "            
            text t "C macro that can be used for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "extern \"C\""            
            text t " "            
            text t "code to work with both "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nim c"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "nim cpp"            
            text t ", eg:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "foobar"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importc"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="StringLit"):              
              text t "\"$1\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "emit"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="LongStringLit"):              
              text t "\"\"\"\x0A#include "              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "For backwards compatibility, if the argument to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "emit"            
            text t " "            
            text t "statement is a single string literal, Nim symbols can be referred to via backticks. This usage is however deprecated."          
          text t "\x0A"          
          p():            
            text t "For a toplevel emit statement the section where in the generated C/C++ file the code should be emitted can be influenced via the prefixes "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "/*TYPESECTION*/"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "/*VARSECTION*/"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "/*INCLUDESECTION*/"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "emit"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="LongStringLit"):              
              text t "\"\"\"/*TYPESECTION*/\x0Astruct Vector3 {\x0Apublic: Vector3(): x(5) {} Vector3(float x_): x(x_) {} float x;\x0A};\x0A\"\"\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Identifier"):              
              text t "Vector3"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Vector3\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "nodecl"            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cfloat"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "constructVector3"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cfloat"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Vector3"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Vector3(@)\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "nodecl"            
            span(class="Punctuation"):              
              text t "}"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-importcpp-pragma",href="#implementation-specific-pragmas-importcpp-pragma"):              
              text t "ImportCpp pragma"          
          p():            
            strong():              
              text t "Note"            
            text t ": "            
            a(class="reference external",href="https://github.com/nim-lang/c2nim/blob/master/doc/c2nim.rst"):              
              text t "c2nim"            
            text t " "            
            text t "can parse a large subset of C++ and knows about the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "importcpp"            
            text t " "            
            text t "pragma pattern language. It is not necessary to know all the details described here."          
          text t "\x0A"          
          p():            
            text t "Similar to the "            
            a(class="reference external",href="#foreign-function-interface-importc-pragma"):              
              text t "importc pragma for C"            
            text t ", the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "importcpp"            
            text t " "            
            text t "pragma can be used to import "            
            span(id="cplusplus_2"):              
              text t "C++"            
            text t " "            
            text t "methods or C++ symbols in general. The generated code then uses the C++ method calling syntax: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "obj->method(arg)"            
            text t ".  In combination with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "header"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "emit"            
            text t " "            
            text t "pragmas this allows "            
            em():              
              text t "sloppy"            
            text t " "            
            text t "interfacing with libraries written in C++:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# Horrible example of how to interface with a C++ engine ... ;-)"            
            text t "\x0A\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "link"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"/usr/lib/libIrrlicht.so\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "emit"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="LongStringLit"):              
              text t "\"\"\"\x0Ausing namespace irr;\x0Ausing namespace core;\x0Ausing namespace scene;\x0Ausing namespace video;\x0Ausing namespace io;\x0Ausing namespace gui;\x0A\"\"\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "const"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "irr"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\""              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "IrrlichtDeviceObj"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "header"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "irr"            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A                      "            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"IrrlichtDevice\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "IrrlichtDevice"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            text t " "            
            span(class="Identifier"):              
              text t "IrrlichtDeviceObj"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "createDevice"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "IrrlichtDevice"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "header"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "irr"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"createDevice(@)\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "run"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "device"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "IrrlichtDevice"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "header"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "irr"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"#.run(@)\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "The compiler needs to be told to generate C++ (command "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "cpp"            
            text t ") for this to work. The conditional symbol "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "cpp"            
            text t " "            
            text t "is defined when the compiler emits C++ code."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-importjs-pragma",href="#implementation-specific-pragmas-importjs-pragma"):              
              text t "ImportJs pragma"          
          p():            
            text t "Similar to the "            
            a(class="reference external",href="#foreign-function-interface-importc-pragma"):              
              text t "importcpp pragma for C++"            
            text t ", the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "importjs"            
            text t " "            
            text t "pragma can be used to import Javascript methods or symbols in general. The generated code then uses the Javascript method calling syntax: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "obj.method(arg)"            
            text t "."          
          text t "\x0A\x0A"          
          h3():            
            a(class="toc-backref",id="importjs-pragma-namespaces",href="#importjs-pragma-namespaces"):              
              text t "Namespaces"          
          p():            
            text t "The "            
            em():              
              text t "sloppy interfacing"            
            text t " "            
            text t "example uses "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t ".emit"            
            text t " "            
            text t "to produce "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "using namespace"            
            text t " "            
            text t "declarations. It is usually much better to instead refer to the imported name via the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "namespace::identifier"            
            text t " "            
            text t "notation:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "IrrlichtDeviceObj"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "header"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "irr"            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A                      "            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"irr::IrrlichtDevice\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"          
          text t "\x0A"          
          h3():            
            a(class="toc-backref",id="importjs-pragma-importcpp-for-enums",href="#importjs-pragma-importcpp-for-enums"):              
              text t "Importcpp for enums"          
          p():            
            text t "When "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "importcpp"            
            text t " "            
            text t "is applied to an enum type the numerical enum values are annotated with the C++ enum type, like in this example: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "((TheCppEnum)(3))"            
            text t ". (This turned out to be the simplest way to implement it.)"          
          text t "\x0A\x0A"          
          h3():            
            a(class="toc-backref",id="importjs-pragma-importcpp-for-procs",href="#importjs-pragma-importcpp-for-procs"):              
              text t "Importcpp for procs"          
          p():            
            text t "Note that the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "importcpp"            
            text t " "            
            text t "variant for procs uses a somewhat cryptic pattern language for maximum flexibility:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "A hash "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "#"              
              text t " "              
              text t "symbol is replaced by the first or next argument."            
            text t "\x0A"            
            li():              
              text t "A dot following the hash "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "#."              
              text t " "              
              text t "indicates that the call should use C++'s dot or arrow notation."            
            text t "\x0A"            
            li():              
              text t "An at symbol "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "@"              
              text t " "              
              text t "is replaced by the remaining arguments, separated by commas."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "For example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "cppMethod"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "this"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "CppObj"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cint"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"#.CppMethod(@)\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            text t " "            
            span(class="Identifier"):              
              text t "CppObj"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "cppMethod"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Produces:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "x"            
            span(class="Operator"):              
              text t "->"            
            span(class="Identifier"):              
              text t "CppMethod"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "1"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "2"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "As a special rule to keep backwards compatibility with older versions of the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "importcpp"            
            text t " "            
            text t "pragma, if there is no special pattern character (any of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "# ' @"            
            text t ") at all, C++'s dot or arrow notation is assumed, so the above example can also be written as:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "cppMethod"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "this"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "CppObj"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "c"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cint"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"CppMethod\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "Note that the pattern language naturally also covers C++'s operator overloading capabilities:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "vectorAddition"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Vec3"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Vec3"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"# + #\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "dictLookup"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Dict"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "k"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Key"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Value"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"#[#]\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          ul(class="simple"):            
            li():              
              text t "An apostrophe "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "'"              
              text t " "              
              text t "followed by an integer "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "i"              
              text t " "              
              text t "in the range 0..9 is replaced by the i'th parameter "              
              em():                
                text t "type"              
              text t ". The 0th position is the result type. This can be used to pass types to C++ function templates. Between the "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "'"              
              text t " "              
              text t "and the digit an asterisk can be used to get to the base type of the type. (So it \"takes away a star\" from the type; "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "T*"              
              text t " "              
              text t "becomes "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "T"              
              text t ".) Two stars can be used to get to the element type of the element type etc."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "For example:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Identifier"):              
              text t "Input"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"System::Input\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "getSubsystem"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"SystemManager::getSubsystem"              
              text t "<"              
              text t "\'*0>()\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "nodecl"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            text t " "            
            span(class="Identifier"):              
              text t "Input"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "getSubsystem"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "Input"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Produces:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "SystemManager"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="Identifier"):              
              text t "getSubsystem"            
            span(class="Operator"):              
              text t "<"            
            span(class="Identifier"):              
              text t "System"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="Identifier"):              
              text t "Input"            
            span(class="Operator"):              
              text t ">"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          ul(class="simple"):            
            li():              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "#@"              
              text t " "              
              text t "is a special case to support a "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "cnew"              
              text t " "              
              text t "operation. It is required so that the call expression is inlined directly, without going through a temporary location. This is only required to circumvent a limitation of the current code generator."            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "For example C++'s "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "new"            
            text t " "            
            text t "operator can be \"imported\" like this:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "cnew"            
            span(class="Operator"):              
              text t "*"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            text t " "            
            span(class="Identifier"):              
              text t "T"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"(new \'*0#@)\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "nodecl"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# constructor of 'Foo':"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "constructFoo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cint"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Foo"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Foo(@)\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "cnew"            
            text t " "            
            span(class="Identifier"):              
              text t "constructFoo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Produces:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "new"            
            text t " "            
            span(class="Identifier"):              
              text t "Foo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "However, depending on the use case "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "new Foo"            
            text t " "            
            text t "can also be wrapped like this instead:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "newFoo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cint"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "ptr"            
            text t " "            
            span(class="Identifier"):              
              text t "Foo"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"new Foo(@)\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "let"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "newFoo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "3"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "4"            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h3():            
            a(class="toc-backref",id="importjs-pragma-wrapping-constructors",href="#importjs-pragma-wrapping-constructors"):              
              text t "Wrapping constructors"          
          p():            
            text t "Sometimes a C++ class has a private copy constructor and so code like "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Class c = Class(1,2);"            
            text t " "            
            text t "must not be generated but instead "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "Class c(1,2);"            
            text t ". For this purpose the Nim proc that wraps a C++ constructor needs to be annotated with the "            
            span(id="constructor_1"):              
              text t "constructor"            
            text t " "            
            text t "pragma. This pragma also helps to generate faster C++ code since construction then doesn't invoke the copy constructor:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# a better constructor of 'Foo':"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "constructFoo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "a"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "b"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cint"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Foo"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Foo(@)\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "constructor"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          text t "\x0A"          
          h3():            
            a(class="toc-backref",id="importjs-pragma-wrapping-destructors",href="#importjs-pragma-wrapping-destructors"):              
              text t "Wrapping destructors"          
          p():            
            text t "Since Nim generates C++ directly, any destructor is called implicitly by the C++ compiler at the scope exits. This means that often one can get away with not wrapping the destructor at all! However when it needs to be invoked explicitly, it needs to be wrapped. The pattern language provides everything that is required:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "destroyFoo"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "this"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "Foo"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"#.~Foo()\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          text t "\x0A"          
          h3():            
            a(class="toc-backref",id="importjs-pragma-importcpp-for-objects",href="#importjs-pragma-importcpp-for-objects"):              
              text t "Importcpp for objects"          
          p():            
            text t "Generic "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "importcpp"            
            text t "'ed objects are mapped to C++ templates. This means that you can import C++'s templates rather easily without the need for a pattern language for object types:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "StdMap"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"std::map\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "header"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\""              
              map():                
                text t "\""              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "K"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "V"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Operator"):              
              text t "="            
            span(class="Punctuation"):              
              text t "`"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "K"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "V"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "this"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "StdMap"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "K"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "V"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "key"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "K"            
            span(class="Punctuation"):              
              text t ";"            
            text t " "            
            span(class="Identifier"):              
              text t "val"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "V"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"#[#] = #\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "header"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\""              
              map():                
                text t "\""              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "StdMap"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "cint"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "cdouble"            
            span(class="Punctuation"):              
              text t "]"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "6"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="FloatNumber"):              
              text t "91.4"          
          p():            
            text t "Produces:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "std"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="Identifier"):              
              text t "map"            
            span(class="Operator"):              
              text t "<"            
            span(class="Keyword"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Keyword"):              
              text t "double"            
            span(class="Operator"):              
              text t ">"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ";"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t "["            
            span(class="DecNumber"):              
              text t "6"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="FloatNumber"):              
              text t "91.4"            
            span(class="Punctuation"):              
              text t ";"          
          ul(class="simple"):            
            li():              
              text t "If more precise control is needed, the apostrophe "              
              tt(class="docutils literal"):                
                span(class="pre"):                  
                  text t "'"              
              text t " "              
              text t "can be used in the supplied pattern to denote the concrete type parameters of the generic type. See the usage of the apostrophe operator in proc patterns for more details."            
            text t "\x0A"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "VectorIterator"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importcpp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"std::vector"              
              text t "<"              
              text t "\'0>::iterator\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "T"            
            span(class="Punctuation"):              
              text t "]"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "VectorIterator"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "cint"            
            span(class="Punctuation"):              
              text t "]"          
          p():            
            text t "Produces:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "std"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="Punctuation"):              
              text t ":"            
            span(class="Identifier"):              
              text t "vector"            
            span(class="Operator"):              
              text t "<"            
            span(class="Keyword"):              
              text t "int"            
            span(class="Operator"):              
              text t ">::"            
            span(class="Identifier"):              
              text t "iterator"            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ";"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-importobjc-pragma",href="#implementation-specific-pragmas-importobjc-pragma"):              
              text t "ImportObjC pragma"          
          p():            
            text t "Similar to the "            
            a(class="reference external",href="#foreign-function-interface-importc-pragma"):              
              text t "importc pragma for C"            
            text t ", the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "importobjc"            
            text t " "            
            text t "pragma can be used to import "            
            span(id="objective-c_2"):              
              text t "Objective C"            
            text t " "            
            text t "methods.  The generated code then uses the Objective C method calling syntax: "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "[obj method param1: arg]"            
            text t ". In addition with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "header"            
            text t " "            
            text t "and "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "emit"            
            text t " "            
            text t "pragmas this allows "            
            em():              
              text t "sloppy"            
            text t " "            
            text t "interfacing with libraries written in Objective C:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Comment"):              
              text t "# horrible example of how to interface with GNUStep ..."            
            text t "\x0A\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "passL"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"-lobjc\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "emit"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="LongStringLit"):              
              text t "\"\"\"\x0A#include "              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Id"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importc"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"id\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "header"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\""              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "final"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "distinct"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "newGreeter"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Id"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importobjc"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"Greeter new\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "nodecl"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "greet"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "self"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Id"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importobjc"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"greet\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "nodecl"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "free"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "self"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Id"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importobjc"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"free\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "nodecl"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "g"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "newGreeter"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "g"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "greet"            
            span(class="Punctuation"):              
              text t "("            
            span(class="DecNumber"):              
              text t "12"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="DecNumber"):              
              text t "34"            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "g"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "free"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "The compiler needs to be told to generate Objective C (command "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "objc"            
            text t ") for this to work. The conditional symbol "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "objc"            
            text t " "            
            text t "is defined when the compiler emits Objective C code."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-codegendecl-pragma",href="#implementation-specific-pragmas-codegendecl-pragma"):              
              text t "CodegenDecl pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "codegenDecl"            
            text t " "            
            text t "pragma can be used to directly influence Nim's code generator. It receives a format string that determines how the variable or proc is declared in the generated code."          
          text t "\x0A"          
          p():            
            text t "For variables $1 in the format string represents the type of the variable and $2 is the name of the variable."          
          text t "\x0A"          
          p():            
            text t "The following Nim code:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "codegenDecl"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"$# progmem $#\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"          
          p():            
            text t "will generate this C code:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "int"            
            text t " "            
            span(class="Identifier"):              
              text t "progmem"            
            text t " "            
            span(class="Identifier"):              
              text t "a"          
          p():            
            text t "For procedures $1 is the return type of the procedure, $2 is the name of the procedure and $3 is the parameter list."          
          text t "\x0A"          
          p():            
            text t "The following nim code:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "myinterrupt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "codegenDecl"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"__interrupt $# $#$#\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="StringLit"):              
              text t "\"realistic interrupt handler\""          
          p():            
            text t "will generate this code:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Identifier"):              
              text t "__interrupt"            
            text t " "            
            span(class="Keyword"):              
              text t "void"            
            text t " "            
            span(class="Identifier"):              
              text t "myinterrupt"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-injectstmt-pragma",href="#implementation-specific-pragmas-injectstmt-pragma"):              
              text t "InjectStmt pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "injectStmt"            
            text t " "            
            text t "pragma can be used to inject a statement before every other statement in the current module. It is only supposed to be used for debugging:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "injectStmt"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "gcInvariants"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Comment"):              
              text t "# ... complex code here that produces crashes ..."          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-compile-time-define-pragmas",href="#implementation-specific-pragmas-compile-time-define-pragmas"):              
              text t "compile time define pragmas"          
          p():            
            text t "The pragmas listed here can be used to optionally accept values from the -d/--define option at compile time."          
          text t "\x0A"          
          p():            
            text t "The implementation currently provides the following possible options (various others may be added later)."          
          text t "\x0A"          
          table(class="docutils",border="1"):            
            tr():              
              th():                
                text t "pragma"              
              th():                
                text t "description"            
            text t "\x0A"            
            tr():              
              td():                
                span(id="intdefine_1"):                  
                  text t "intdefine"              
              td():                
                text t "Reads in a build-time define as an integer"            
            text t "\x0A"            
            tr():              
              td():                
                span(id="strdefine_1"):                  
                  text t "strdefine"              
              td():                
                text t "Reads in a build-time define as a string"            
            text t "\x0A"            
            tr():              
              td():                
                span(id="booldefine_1"):                  
                  text t "booldefine"              
              td():                
                text t "Reads in a build-time define as a bool"            
            text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "const"            
            text t " "            
            span(class="Identifier"):              
              text t "FooBar"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "intdefine"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="DecNumber"):              
              text t "5"            
            text t "\x0A"            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "FooBar"          
          pre():            
            text t "nim c -d:FooBar=42 foobar.nim"          
          text t "\x0A"          
          p():            
            text t "In the above example, providing the -d flag causes the symbol "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "FooBar"            
            text t " "            
            text t "to be overwritten at compile time, printing out 42. If the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "-d:FooBar=42"            
            text t " "            
            text t "were to be omitted, the default value of 5 would be used. To see if a value was provided, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "defined(FooBar)"            
            text t " "            
            text t "can be used."          
          text t "\x0A"          
          p():            
            text t "The syntax "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "-d:flag"            
            text t " "            
            text t "is actually just a shortcut for "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "-d:flag=true"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="implementation-specific-pragmas-custom-annotations",href="#implementation-specific-pragmas-custom-annotations"):              
              text t "Custom annotations"          
          p():            
            text t "It is possible to define custom typed pragmas. Custom pragmas do not effect code generation directly, but their presence can be detected by macros. Custom pragmas are defined using templates annotated with pragma "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "pragma"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "dbTable"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "table_space"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"\""            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pragma"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "dbKey"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "name"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "primary_key"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "false"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pragma"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "dbForeignKey"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "t"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "typedesc"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pragma"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A"            
            span(class="Keyword"):              
              text t "template"            
            text t " "            
            span(class="Identifier"):              
              text t "dbIgnore"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "pragma"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "Consider stylized example of possible Object Relation Mapping (ORM) implementation:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "const"            
            text t " "            
            span(class="Identifier"):              
              text t "tblspace"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "strdefine"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"dev\""            
            text t " "            
            span(class="Comment"):              
              text t "# switch for dev, test and prod environments"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "User"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "dbTable"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"users\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "tblspace"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "id"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "dbKey"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "primary_key"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "name"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="RawData"):              
              text t "dbKey\"full_name\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "is_cached"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "dbIgnore"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "age"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A  \x0A  "            
            span(class="Identifier"):              
              text t "UserProfile"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "dbTable"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"profiles\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "tblspace"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "id"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "dbKey"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "primary_key"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Identifier"):              
              text t "true"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "user_id"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "dbForeignKey"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "User"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "read_access"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "write_access"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "admin_acess"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "bool"          
          p():            
            text t "In this example custom pragmas are used to describe how Nim objects are mapped to the schema of the relational database. Custom pragmas can have zero or more arguments. In order to pass multiple arguments use one of template call syntaxes. All arguments are typed and follow standard overload resolution rules for templates. Therefore, it is possible to have default values for arguments, pass by name, varargs, etc."          
          text t "\x0A"          
          p():            
            text t "Custom pragmas can be used in all locations where ordinary pragmas can be specified. It is possible to annotate procs, templates, type and variable definitions, statements, etc."          
          text t "\x0A"          
          p():            
            text t "Macros module includes helpers which can be used to simplify custom pragma access "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "hasCustomPragma"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "getCustomPragmaVal"            
            text t ". Please consult macros module documentation for details. These macros are no magic, they don't do anything you cannot do yourself by walking AST object representation."          
          text t "\x0A"          
          p():            
            text t "More examples with custom pragmas:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "Better serialization/deserialization control:"            
            text t "\x0A"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Identifier"):              
              text t "MyObj"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "a"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "dontSerialize"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "b"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "defaultDeserialize"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="FloatNumber"):              
              text t "5."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "c"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "serializationKey"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"_c\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"          
          ul(class="simple"):            
            li():              
              text t "Adopting type for gui inspector in a game engine:"            
            text t "\x0A"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t " "            
            span(class="Identifier"):              
              text t "MyComponent"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "position"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "editable"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "animatable"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "Vector3"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "alpha"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "editRange"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Punctuation"):              
              text t "["            
            span(class="FloatNumber"):              
              text t "0.0"            
            span(class="Operator"):              
              text t ".."            
            span(class="FloatNumber"):              
              text t "1.0"            
            span(class="Punctuation"):              
              text t "]"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "animatable"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "float32"          
          text t "\x0A"          
          h1():            
            a(class="toc-backref",id="foreign-function-interface",href="#foreign-function-interface"):              
              text t "Foreign function interface"          
          p():            
            text t "Nim's "            
            span(id="ffi_1"):              
              text t "FFI"            
            text t " "            
            text t "(foreign function interface) is extensive and only the parts that scale to other future backends (like the LLVM/JavaScript backends) are documented here."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="foreign-function-interface-importc-pragma",href="#foreign-function-interface-importc-pragma"):              
              text t "Importc pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "importc"            
            text t " "            
            text t "pragma provides a means to import a proc or a variable from C. The optional argument is a string containing the C identifier. If the argument is missing, the C name is the Nim identifier "            
            em():              
              text t "exactly as spelled"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "printf"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "formatstr"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "header"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\""              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "importc"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"printf\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "Note that this pragma has been abused in the past to also work in the js backand for js objects and functions. : Other backends do provide the same feature under the same name. Also, when the target language is not set to C, other pragmas are available:"          
          text t "\x0A"          
          blockquote():            
            p():              
              ul(class="simple"):                
                li():                  
                  a(class="reference external",href="manual.html#implementation-specific-pragmas-importcpp-pragma"):                    
                    text t "importcpp"                
                text t "\x0A"                
                li():                  
                  a(class="reference external",href="manual.html#implementation-specific-pragmas-importobjc-pragma"):                    
                    text t "importobjc"                
                text t "\x0A"                
                li():                  
                  a(class="reference external",href="manul.html#implementation-specific-pragmas-importjs-pragma"):                    
                    text t "importjs"                
                text t "\x0A"              
              text t "\x0A"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "importc"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"prefix$1\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "In the example the external name of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p"            
            text t " "            
            text t "is set to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "prefixp"            
            text t ". Only "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$1"            
            text t " "            
            text t "is available and a literal dollar sign must be written as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$$"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="foreign-function-interface-exportc-pragma",href="#foreign-function-interface-exportc-pragma"):              
              text t "Exportc pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "exportc"            
            text t " "            
            text t "pragma provides a means to export a type, a variable, or a procedure to C. Enums and constants can't be exported. The optional argument is a string containing the C identifier.  If the argument is missing, the C name is the Nim identifier "            
            em():              
              text t "exactly as spelled"            
            text t ":"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "callme"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "formatstr"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "exportc"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"callMe\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "Note that this pragma is somewhat of a misnomer: Other backends do provide the same feature under the same name."          
          text t "\x0A"          
          p():            
            text t "The string literal passed to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "exportc"            
            text t " "            
            text t "can be a format string:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "exportc"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"prefix$1\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "s"          
          p():            
            text t "In the example the external name of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p"            
            text t " "            
            text t "is set to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "prefixp"            
            text t ". Only "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$1"            
            text t " "            
            text t "is available and a literal dollar sign must be written as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$$"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="foreign-function-interface-extern-pragma",href="#foreign-function-interface-extern-pragma"):              
              text t "Extern pragma"          
          p():            
            text t "Like "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "exportc"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "importc"            
            text t ", the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "extern"            
            text t " "            
            text t "pragma affects name mangling. The string literal passed to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "extern"            
            text t " "            
            text t "can be a format string:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "p"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "extern"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"prefix$1\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "echo"            
            text t " "            
            span(class="Identifier"):              
              text t "s"          
          p():            
            text t "In the example the external name of "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p"            
            text t " "            
            text t "is set to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "prefixp"            
            text t ". Only "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$1"            
            text t " "            
            text t "is available and a literal dollar sign must be written as "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "$$"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="foreign-function-interface-bycopy-pragma",href="#foreign-function-interface-bycopy-pragma"):              
              text t "Bycopy pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "bycopy"            
            text t " "            
            text t "pragma can be applied to an object or tuple type and instructs the compiler to pass the type by value to procs:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "type"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "Vector"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "bycopy"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="Keyword"):              
              text t "object"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "x"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "y"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "z"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "float"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="foreign-function-interface-byref-pragma",href="#foreign-function-interface-byref-pragma"):              
              text t "Byref pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "byref"            
            text t " "            
            text t "pragma can be applied to an object or tuple type and instructs the compiler to pass the type by reference (hidden pointer) to procs."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="foreign-function-interface-varargs-pragma",href="#foreign-function-interface-varargs-pragma"):              
              text t "Varargs pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "varargs"            
            text t " "            
            text t "pragma can be applied to procedures only (and procedure types). It tells Nim that the proc can take a variable number of parameters after the last specified parameter. Nim string values will be converted to C strings automatically:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "printf"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "formatstr"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "nodecl"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "varargs"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            text t "\x0A\x0A"            
            span(class="Identifier"):              
              text t "printf"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"hallo %s\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="StringLit"):              
              text t "\"world\""            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Comment"):              
              text t "# \"world\" will be passed as C string"          
          text t "\x0A"          
          h2():            
            a(class="toc-backref",id="foreign-function-interface-union-pragma",href="#foreign-function-interface-union-pragma"):              
              text t "Union pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "union"            
            text t " "            
            text t "pragma can be applied to any "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "object"            
            text t " "            
            text t "type. It means all of the object's fields are overlaid in memory. This produces a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "union"            
            text t " "            
            text t "instead of a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "struct"            
            text t " "            
            text t "in the generated C/C++ code. The object declaration then must not use inheritance or any GC'ed memory but this is currently not checked."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Future directions"            
            text t ": GC'ed memory should be allowed in unions and the GC should scan unions conservatively."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="foreign-function-interface-packed-pragma",href="#foreign-function-interface-packed-pragma"):              
              text t "Packed pragma"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "packed"            
            text t " "            
            text t "pragma can be applied to any "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "object"            
            text t " "            
            text t "type. It ensures that the fields of an object are packed back-to-back in memory. It is useful to store packets or messages from/to network or hardware drivers, and for interoperability with C. Combining packed pragma with inheritance is not defined, and it should not be used with GC'ed memory (ref's)."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Future directions"            
            text t ": Using GC'ed memory in packed pragma will result in a static error. Usage with inheritance should be defined and documented."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="foreign-function-interface-dynlib-pragma-for-import",href="#foreign-function-interface-dynlib-pragma-for-import"):              
              text t "Dynlib pragma for import"          
          p():            
            text t "With the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "dynlib"            
            text t " "            
            text t "pragma a procedure or a variable can be imported from a dynamic library ("            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t ".dll"            
            text t " "            
            text t "files for Windows, "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "lib*.so"            
            text t " "            
            text t "files for UNIX). The non-optional argument has to be the name of the dynamic library:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "gtk_image_new"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "PGtkWidget"            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "cdecl"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "dynlib"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"libgtk-x11-2.0.so\""            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "importc"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "In general, importing a dynamic library does not require any special linker options or linking with import libraries. This also implies that no "            
            em():              
              text t "devel"            
            text t " "            
            text t "packages need to be installed."          
          text t "\x0A"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "dynlib"            
            text t " "            
            text t "import mechanism supports a versioning scheme:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "Tcl_Eval"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "interp"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "pTcl_Interp"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "script"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "cdecl"            
            span(class="Punctuation"):              
              text t ","            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "importc"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "dynlib"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="StringLit"):              
              text t "\"libtcl(|8.5|8.4|8.3).so.(1|0)\""            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "At runtime the dynamic library is searched for (in this order):"            
            pre():              
              text t "libtcl.so.1\x0Alibtcl.so.0\x0Alibtcl8.5.so.1\x0Alibtcl8.5.so.0\x0Alibtcl8.4.so.1\x0Alibtcl8.4.so.0\x0Alibtcl8.3.so.1\x0Alibtcl8.3.so.0"            
            text t "\x0A"          
          text t "\x0A"          
          p():            
            text t "The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "dynlib"            
            text t " "            
            text t "pragma supports not only constant strings as argument but also string expressions in general:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "import"            
            text t " "            
            span(class="Identifier"):              
              text t "os"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "getDllName"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"mylib.dll\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "existsFile"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "result"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "return"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "result"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"mylib2.dll\""            
            text t "\x0A  "            
            span(class="Keyword"):              
              text t "if"            
            text t " "            
            span(class="Identifier"):              
              text t "existsFile"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "result"            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Keyword"):              
              text t "return"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "quit"            
            span(class="Punctuation"):              
              text t "("            
            span(class="StringLit"):              
              text t "\"could not load dynamic library\""            
            span(class="Punctuation"):              
              text t ")"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "myImport"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "s"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "cstring"            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "cdecl"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "importc"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "dynlib"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "getDllName"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            strong():              
              text t "Note"            
            text t ": Patterns like "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "libtcl(|8.5|8.4).so"            
            text t " "            
            text t "are only supported in constant strings, because they are precompiled."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": Passing variables to the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "dynlib"            
            text t " "            
            text t "pragma will fail at runtime because of order of initialization problems."          
          text t "\x0A"          
          p():            
            strong():              
              text t "Note"            
            text t ": A "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "dynlib"            
            text t " "            
            text t "import can be overridden with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "--dynlibOverride:name"            
            text t " "            
            text t "command line option. The Compiler User Guide contains further information."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="foreign-function-interface-dynlib-pragma-for-export",href="#foreign-function-interface-dynlib-pragma-for-export"):              
              text t "Dynlib pragma for export"          
          p():            
            text t "With the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "dynlib"            
            text t " "            
            text t "pragma a procedure can also be exported to a dynamic library. The pragma then has no argument and has to be used in conjunction with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "exportc"            
            text t " "            
            text t "pragma:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "exportme"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "int"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "cdecl"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "exportc"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "dynlib"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"          
          p():            
            text t "This is only useful if the program is compiled as a dynamic library via the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "--app:lib"            
            text t " "            
            text t "command line option. This pragma only has an effect for the code generation on the Windows target, so when this pragma is forgotten and the dynamic library is only tested on Mac and/or Linux, there won't be an error. On Windows this pragma adds "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "__declspec(dllexport)"            
            text t " "            
            text t "to the function declaration."          
          text t "\x0A\x0A"          
          h1():            
            a(class="toc-backref",id="threads",href="#threads"):              
              text t "Threads"          
          p():            
            text t "To enable thread support the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "--threads:on"            
            text t " "            
            text t "command line switch needs to be used. The "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "system"            
            text t " "            
            text t "module then contains several threading primitives. See the "            
            a(class="reference external",href="threads.html"):              
              text t "threads"            
            text t " "            
            text t "and "            
            a(class="reference external",href="channels.html"):              
              text t "channels"            
            text t " "            
            text t "modules for the low level thread API. There are also high level parallelism constructs available. See "            
            a(class="reference external",href="manual_experimental.html#parallel-amp-spawn"):              
              text t "spawn"            
            text t " "            
            text t "for further details."          
          text t "\x0A"          
          p():            
            text t "Nim's memory model for threads is quite different than that of other common programming languages (C, Pascal, Java): Each thread has its own (garbage collected) heap and sharing of memory is restricted to global variables. This helps to prevent race conditions. GC efficiency is improved quite a lot, because the GC never has to stop other threads and see what they reference."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="threads-thread-pragma",href="#threads-thread-pragma"):              
              text t "Thread pragma"          
          p():            
            text t "A proc that is executed as a new thread of execution should be marked by the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "thread"            
            text t " "            
            text t "pragma for reasons of readability. The compiler checks for violations of the "            
            span(id="no-heap-sharing-restriction_1"):              
              text t "no heap sharing restriction"            
            text t ": This restriction implies that it is invalid to construct a data structure that consists of memory allocated from different (thread local) heaps."          
          text t "\x0A"          
          p():            
            text t "A thread proc is passed to "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "createThread"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "spawn"            
            text t " "            
            text t "and invoked indirectly; so the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "thread"            
            text t " "            
            text t "pragma implies "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "procvar"            
            text t "."          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="threads-gc-safety",href="#threads-gc-safety"):              
              text t "GC safety"          
          p():            
            text t "We call a proc "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "p"            
            text t " "            
            span(id="gc-safe_1"):              
              text t "GC safe"            
            text t " "            
            text t "when it doesn't access any global variable that contains GC'ed memory ("            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "string"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "seq"            
            text t ", "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ref"            
            text t " "            
            text t "or a closure) either directly or indirectly through a call to a GC unsafe proc."          
          text t "\x0A"          
          p():            
            text t "The "            
            span(id="gcsafe_1"):              
              text t "gcsafe"            
            text t " "            
            text t "annotation can be used to mark a proc to be gcsafe, otherwise this property is inferred by the compiler. Note that "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "noSideEffect"            
            text t " "            
            text t "implies "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "gcsafe"            
            text t ". The only way to create a thread is via "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "spawn"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "createThread"            
            text t ". The invoked proc must not use "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t " "            
            text t "parameters nor must any of its parameters contain a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "ref"            
            text t " "            
            text t "or "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "closure"            
            text t " "            
            text t "type. This enforces the "            
            em():              
              text t "no heap sharing restriction"            
            text t "."          
          text t "\x0A"          
          p():            
            text t "Routines that are imported from C are always assumed to be "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "gcsafe"            
            text t ". To disable the GC-safety checking the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "--threadAnalysis:off"            
            text t " "            
            text t "command line switch can be used. This is a temporary workaround to ease the porting effort from old code to the new threading model."          
          text t "\x0A"          
          p():            
            text t "To override the compiler's gcsafety analysis a "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "{.gcsafe.}"            
            text t " "            
            text t "pragma block can be used:"          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "someGlobal"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t " "            
            span(class="StringLit"):              
              text t "\"some string here\""            
            text t "\x0A  "            
            span(class="Identifier"):              
              text t "perThread"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "threadvar"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "string"            
            text t "\x0A\x0A"            
            span(class="Keyword"):              
              text t "proc"            
            text t " "            
            span(class="Identifier"):              
              text t "setPerThread"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Punctuation"):              
              text t ")"            
            text t " "            
            span(class="Operator"):              
              text t "="            
            text t "\x0A  "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "gcsafe"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t "\x0A    "            
            span(class="Identifier"):              
              text t "deepCopy"            
            span(class="Punctuation"):              
              text t "("            
            span(class="Identifier"):              
              text t "perThread"            
            span(class="Punctuation"):              
              text t ","            
            text t " "            
            span(class="Identifier"):              
              text t "someGlobal"            
            span(class="Punctuation"):              
              text t ")"          
          p():            
            text t "Future directions:"          
          text t "\x0A"          
          ul(class="simple"):            
            li():              
              text t "A shared GC'ed heap might be provided."            
            text t "\x0A"          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="threads-threadvar-pragma",href="#threads-threadvar-pragma"):              
              text t "Threadvar pragma"          
          p():            
            text t "A variable can be marked with the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "threadvar"            
            text t " "            
            text t "pragma, which makes it a "            
            span(id="threadminuslocal_1"):              
              text t "thread-local"            
            text t " "            
            text t "variable; Additionally, this implies all the effects of the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "global"            
            text t " "            
            text t "pragma."          
          text t "\x0A"          
          pre(class="listing"):            
            span(class="Keyword"):              
              text t "var"            
            text t " "            
            span(class="Identifier"):              
              text t "checkpoints"            
            span(class="Operator"):              
              text t "*"            
            text t " "            
            span(class="Punctuation"):              
              text t "{"            
            span(class="Operator"):              
              text t "."            
            span(class="Identifier"):              
              text t "threadvar"            
            span(class="Operator"):              
              text t "."            
            span(class="Punctuation"):              
              text t "}"            
            span(class="Punctuation"):              
              text t ":"            
            text t " "            
            span(class="Identifier"):              
              text t "seq"            
            span(class="Punctuation"):              
              text t "["            
            span(class="Identifier"):              
              text t "string"            
            span(class="Punctuation"):              
              text t "]"          
          p():            
            text t "Due to implementation restrictions thread local variables cannot be initialized within the "            
            tt(class="docutils literal"):              
              span(class="pre"):                
                text t "var"            
            text t " "            
            text t "section. (Every thread local variable needs to be replicated at thread creation.)"          
          text t "\x0A\x0A"          
          h2():            
            a(class="toc-backref",id="threads-threads-and-exceptions",href="#threads-threads-and-exceptions"):              
              text t "Threads and exceptions"          
          p():            
            text t "The interaction between threads and exceptions is simple: A "            
            em():              
              text t "handled"            
            text t " "            
            text t "exception in one thread cannot affect any other thread. However, an "            
            em():              
              text t "unhandled"            
            text t " "            
            text t "exception in one thread terminates the whole "            
            em():              
              text t "process"            
            text t "! "          
          text t "\x0A"        
        text t "\x0A"      
      text t "\x0A\x0A    "      
      tdiv(class="row"):        
        text t "\x0A      "        
        tdiv(class="twelve-columns footer"):          
          text t "\x0A        "          
          text t "\x0A        "          
          text t "\x0A        "          
          small():            
            text t "Made with Nim. Generated: 2019-10-21 08:36:22 UTC"          
          text t "\x0A      "        
        text t "\x0A    "      
      text t "\x0A  "    
    text t "\x0A"
    tdiv(style="position:fixed;right:0;top:5%;font-size:50%;"):
      a(onclick = zhCN):span: text "Chinese |"
      a(onclick = enUS):span: text " English"  
  
setRenderer createDom