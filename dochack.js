/* Generated by the Nim Compiler v1.0.99 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI42032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI193071 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI45462 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI195578 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI82448 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82444 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82432 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82428 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82416 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82412 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82404 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82400 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82396 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82388 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82384 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82380 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82372 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI82205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI82283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI82281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI82227 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI82565 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI82563 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI82561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI82231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI82229 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI84305 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI45450 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45458 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI42006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI61156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI45408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45514 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI42016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI42040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI42042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI45508 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI45426 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45428 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI45446 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI45446 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45446.node = NNI45446;
var NNI45442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45442.node = NNI45442;
var NNI45428 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45428.node = NNI45428;
NTI45508.base = NTI45426;
NTI45514.base = NTI45426;
var NNI45426 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI45508, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI42042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI42040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI42040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI42016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI45514, name: "up", sons: null}]};
NTI45426.node = NNI45426;
var NNI45408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45408.node = NNI45408;
NTI45426.base = NTI45408;
NTI45428.base = NTI45426;
NTI45442.base = NTI45428;
NTI45446.base = NTI45442;
var NNI61156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI42042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI42006, name: "Field1", sons: null}]};
NTI61156.node = NNI61156;
var NNI45458 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45458.node = NNI45458;
NTI45458.base = NTI45428;
var NNI45450 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45450.node = NNI45450;
NTI45450.base = NTI45428;
NTI82561.base = NTI82229;
NTI82563.base = NTI82229;
NTI82565.base = NTI82229;
var NNI82227 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI82227, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI82227, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI82227, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI82227, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI82227, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI82227, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI82227, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI82227, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI82227, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI82227, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI82227, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI82227, name: "NotationNode", len: 0, sons: null}}};
NTI82227.node = NNI82227;
var NNI82283 = {kind: 2, len: 92, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI42042, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI42042, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI42042, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI42042, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI42042, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI42042, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI42042, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI42042, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI42042, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI42042, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI42042, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI42042, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI42042, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI42042, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI42042, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI42042, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI42042, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI42042, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI42042, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI42042, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI42042, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI42042, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI42042, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI42042, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI42042, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI42042, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI42042, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI42042, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI42042, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI42042, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI42042, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI42042, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI42042, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI42042, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI42042, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI42042, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI42042, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI42042, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI42042, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI42042, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI42042, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI42042, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI42042, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI42042, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI42042, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI42042, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI42042, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI42042, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI42042, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI42042, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI42042, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI42042, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI42042, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI42042, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI42042, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI42042, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI42042, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI42042, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI42042, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI42042, name: "minWidth", sons: null}, 
{kind: 1, offset: "opacity", len: 0, typ: NTI42042, name: "opacity", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI42042, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI42042, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI42042, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI42042, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI42042, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI42042, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI42042, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI42042, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI42042, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI42042, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI42042, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI42042, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI42042, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI42042, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI42042, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI42042, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI42042, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI42042, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI42042, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI42042, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI42042, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI42042, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI42042, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI42042, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI42042, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI42042, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI42042, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI42042, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI42042, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI42042, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI42006, name: "zIndex", sons: null}]};
NTI82283.node = NNI82283;
NTI82283.base = NTI45408;
NTI82281.base = NTI82283;
var NNI82231 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI82561, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI82563, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI82565, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI42042, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI82229, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI82229, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI82229, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI42042, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI82227, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI42042, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI82229, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI82229, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI42042, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI82281, name: "style", sons: null}]};
NTI82231.node = NNI82231;
var NNI82205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI82372, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI82376, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI82380, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI82384, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI82388, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI82392, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI82396, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI82400, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI82404, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI82408, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI82412, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI82416, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI82420, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI82424, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI82428, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI82432, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI82436, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI82440, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI82444, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI82448, name: "onunload", sons: null}]};
NTI82205.node = NNI82205;
NTI82205.base = NTI45408;
NTI82231.base = NTI82205;
NTI82229.base = NTI82231;
NTI84305.base = NTI82229;
NTI195578.base = NTI42042;
var NNI45462 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI45462.node = NNI45462;
NTI45462.base = NTI45428;
var NNI193071 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI42006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI42032, name: "Field1", sons: null}]};
NTI193071.node = NNI193071;

function makeNimstrLit(c_63270) {
		  var ln = c_63270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_63270.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_64827, src_64828, ti_64829) {
	var result_65019 = null;

		switch (ti_64829.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_64801(ti_64829))) {
			result_65019 = src_64828;
			}
			else {
				result_65019 = [src_64828[0], src_64828[1]];
			}
			
			break;
		case 19:
			      if (dest_64827 === null || dest_64827 === undefined) {
        dest_64827 = {};
      }
      else {
        for (var key in dest_64827) { delete dest_64827[key]; }
      }
      for (var key in src_64828) { dest_64827[key] = src_64828[key]; }
      result_65019 = dest_64827;
    
			break;
		case 18:
		case 17:
			if (!((ti_64829.base == null))) {
			result_65019 = nimCopy(dest_64827, src_64828, ti_64829.base);
			}
			else {
			if ((ti_64829.kind == 17)) {
			result_65019 = (dest_64827 === null || dest_64827 === undefined) ? {m_type: ti_64829} : dest_64827;
			}
			else {
				result_65019 = (dest_64827 === null || dest_64827 === undefined) ? {} : dest_64827;
			}
			}
			nimCopyAux(result_65019, src_64828, ti_64829.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_64828 === null) {
        result_65019 = null;
      }
      else {
        if (dest_64827 === null || dest_64827 === undefined) {
          dest_64827 = new Array(src_64828.length);
        }
        else {
          dest_64827.length = src_64828.length;
        }
        result_65019 = dest_64827;
        for (var i = 0; i < src_64828.length; ++i) {
          result_65019[i] = nimCopy(result_65019[i], src_64828[i], ti_64829.base);
        }
      }
    
			break;
		case 28:
			      if (src_64828 !== null) {
        result_65019 = src_64828.slice(0);
      }
    
			break;
		default: 
			result_65019 = src_64828;
			break;
		}

	return result_65019;

}

function arrayConstr(len_65086, value_65087, typ_65088) {
		    var result = new Array(len_65086);
    for (var i = 0; i < len_65086; ++i) result[i] = nimCopy(null, value_65087, typ_65088);
    return result;
  

	
}

function cstrToNimstr(c_63287) {
		  var ln = c_63287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_63287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_63287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_63304) {
										var Tmp5;
						var Tmp7;

	var result_63305 = null;

		var res_63363 = new_seq_63336((s_63304 != null ? s_63304.length : 0));
		var i_63365 = 0;
		var j_63367 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_63365 < (s_63304 != null ? s_63304.length : 0))) break L2;
					var c_63368 = s_63304[i_63365];
					if ((c_63368 < 128)) {
					res_63363[j_63367] = String.fromCharCode(c_63368);
					i_63365 += 1;
					}
					else {
						var helper_63391 = new_seq_63336(0);
						L3: do {
								L4: while (true) {
								if (!true) break L4;
									var code_63392 = c_63368.toString(16);
									if (((code_63392 != null ? code_63392.length : 0) == 1)) {
									if (helper_63391 != null) { helper_63391.push("%0"); } else { helper_63391 = ["%0"]; };
									}
									else {
									if (helper_63391 != null) { helper_63391.push("%"); } else { helper_63391 = ["%"]; };
									}
									
									if (helper_63391 != null) { helper_63391.push(code_63392); } else { helper_63391 = [code_63392]; };
									i_63365 += 1;
										if (((s_63304 != null ? s_63304.length : 0) <= i_63365)) Tmp5 = true; else {											Tmp5 = (s_63304[i_63365] < 128);										}									if (Tmp5) {
									break L3;
									}
									
									c_63368 = s_63304[i_63365];
								}
						} while(false);
++excHandler;
						Tmp7 = framePtr;
						try {
						res_63363[j_63367] = decodeURIComponent(helper_63391.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = Tmp7;
						res_63363[j_63367] = helper_63391.join("");
						lastJSError = prevJSError;
						} finally {
						framePtr = Tmp7;
						}
					}
					
					j_63367 += 1;
				}
		} while(false);
		if (res_63363 === null) res_63363 = [];
               if (res_63363.length < j_63367) { for (var i=res_63363.length;i<j_63367;++i) res_63363.push(null); }
               else { res_63363.length = j_63367; };
		result_63305 = res_63363.join("");

	return result_63305;

}

function raiseException(e_61618, ename_61619) {
		e_61618.name = ename_61619;
		if ((excHandler == 0)) {
		unhandledException(e_61618);
		}
		
		e_61618.trace = nimCopy(null, raw_write_stack_trace_61467(), NTI42040);
		throw e_61618;

	
}

function addInt(a_63803, b_63804) {
		    var result = a_63803 + b_63804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_65105, a_65106, b_65107) {
			var Tmp1;

	var result_65108 = 0;

	BeforeRet: do {
			if (!(a_65106 <= i_65105)) Tmp1 = false; else {				Tmp1 = (i_65105 <= b_65107);			}		if (Tmp1) {
		result_65108 = i_65105;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_65105, a_65106, b_65107);
		}
		
	} while (false);

	return result_65108;

}

function subInt(a_63821, b_63822) {
		    var result = a_63821 - b_63822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_65124, a_65125, b_65126) {
			var Tmp1;

	var result_65127 = 0;

	BeforeRet: do {
			if (!(a_65125 <= i_65124)) Tmp1 = false; else {				Tmp1 = (i_65124 <= b_65126);			}		if (Tmp1) {
		result_65127 = i_65124;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_65127;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);

function mulInt(a_63839, b_63840) {
		    var result = a_63839 * b_63840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_64221, b_64222) {
		var Tmp1;

	var result_64223 = 0;

	BeforeRet: do {
		if ((b_64222 <= a_64221)) {
		Tmp1 = a_64221;
		}
		else {
		Tmp1 = b_64222;
		}
		
		result_64223 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_64223;

}

function nimMin(a_64203, b_64204) {
		var Tmp1;

	var result_64205 = 0;

	BeforeRet: do {
		if ((a_64203 <= b_64204)) {
		Tmp1 = a_64203;
		}
		else {
		Tmp1 = b_64204;
		}
		
		result_64205 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_64205;

}
var nim_program_result = 0;
var global_raise_hook_58618 = [null];
var local_raise_hook_58623 = [null];
var out_of_mem_hook_58626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var alternative_195319 = [null];

function is_fat_pointer_64801(ti_64803) {
	var result_64804 = false;

	BeforeRet: do {
		result_64804 = !((ConstSet1[ti_64803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_64804;

}

function nimCopyAux(dest_64832, src_64833, n_64835) {
		switch (n_64835.kind) {
		case 0:
			break;
		case 1:
			      dest_64832[n_64835.offset] = nimCopy(dest_64832[n_64835.offset], src_64833[n_64835.offset], n_64835.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_64835.sons.length; i++) {
      nimCopyAux(dest_64832, src_64833, n_64835.sons[i]);
    }
    
			break;
		case 3:
			      dest_64832[n_64835.offset] = nimCopy(dest_64832[n_64835.offset], src_64833[n_64835.offset], n_64835.typ);
      for (var i = 0; i < n_64835.sons.length; ++i) {
        nimCopyAux(dest_64832, src_64833, n_64835.sons[i][1]);
      }
    
			break;
		}

	
}

function add_58638(x_58641, x_58641_Idx, y_58642) {
		      if (x_58641[x_58641_Idx] === null) { x_58641[x_58641_Idx] = []; }
      var off = x_58641[x_58641_Idx].length;
      x_58641[x_58641_Idx].length += y_58642.length;
      for (var i = 0; i < y_58642.length; ++i) {
        x_58641[x_58641_Idx][off+i] = y_58642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_61151(f_61153) {
					var Tmp3;

	var result_61154 = [null];

		var it_61162 = f_61153;
		var i_61164 = 0;
		var total_61166 = 0;
		var temp_frames_61173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI61156);
		L1: do {
				L2: while (true) {
					if (!!((it_61162 == null))) Tmp3 = false; else {						Tmp3 = (i_61164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_61173[i_61164].Field0 = it_61162.procname;
					temp_frames_61173[i_61164].Field1 = it_61162.line;
					i_61164 += 1;
					total_61166 += 1;
					it_61162 = it_61162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_61162 == null))) break L5;
					total_61166 += 1;
					it_61162 = it_61162.prev;
				}
		} while(false);
		result_61154[0] = nimCopy(null, [], NTI42040);
		if (!((total_61166 == i_61164))) {
		if (result_61154[0] != null) { result_61154[0] = (result_61154[0]).concat(makeNimstrLit("(")); } else { result_61154[0] = makeNimstrLit("("); };
		if (result_61154[0] != null) { result_61154[0] = (result_61154[0]).concat(cstrToNimstr(((total_61166 - i_61164))+"")); } else { result_61154[0] = cstrToNimstr(((total_61166 - i_61164))+"").slice(); };
		if (result_61154[0] != null) { result_61154[0] = (result_61154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_61154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_61421 = 0;
			var colontmp__195466 = 0;
			colontmp__195466 = (i_61164 - 1);
			var res_195471 = colontmp__195466;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_195471)) break L8;
						j_61421 = res_195471;
						add_58638(result_61154, 0, temp_frames_61173[j_61421].Field0);
						if ((0 < temp_frames_61173[j_61421].Field1)) {
						if (result_61154[0] != null) { result_61154[0] = (result_61154[0]).concat(makeNimstrLit(", line: ")); } else { result_61154[0] = makeNimstrLit(", line: "); };
						if (result_61154[0] != null) { result_61154[0] = (result_61154[0]).concat(cstrToNimstr((temp_frames_61173[j_61421].Field1)+"")); } else { result_61154[0] = cstrToNimstr((temp_frames_61173[j_61421].Field1)+"").slice(); };
						}
						
						if (result_61154[0] != null) { result_61154[0] = (result_61154[0]).concat(makeNimstrLit("\x0A")); } else { result_61154[0] = makeNimstrLit("\x0A"); };
						res_195471 -= 1;
					}
			} while(false);
		} while(false);

	return result_61154[0];

}

function raw_write_stack_trace_61467() {
	var result_61469 = null;

		if (!((framePtr == null))) {
		result_61469 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_61151(framePtr) || []), NTI42040);
		}
		else {
			result_61469 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI42040);
		}
		

	return result_61469;

}

function new_seq_63336(len_63339) {
	var result_63341 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 996;
		result_63341 = new Array(len_63339); for (var i=0;i<len_63339;++i) {result_63341[i]=null;}	framePtr = F.prev;

	return result_63341;

}

function unhandledException(e_61528) {
		var buf_61529 = [[]];
		if (!(((e_61528.message != null ? e_61528.message.length : 0) == 0))) {
		if (buf_61529[0] != null) { buf_61529[0] = (buf_61529[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_61529[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_61529[0] != null) { buf_61529[0] = (buf_61529[0]).concat(e_61528.message); } else { buf_61529[0] = e_61528.message.slice(); };
		}
		else {
		if (buf_61529[0] != null) { buf_61529[0] = (buf_61529[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_61529[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_61529[0] != null) { buf_61529[0] = (buf_61529[0]).concat(makeNimstrLit(" [")); } else { buf_61529[0] = makeNimstrLit(" ["); };
		add_58638(buf_61529, 0, e_61528.name);
		if (buf_61529[0] != null) { buf_61529[0] = (buf_61529[0]).concat(makeNimstrLit("]\x0A")); } else { buf_61529[0] = makeNimstrLit("]\x0A"); };
		if (buf_61529[0] != null) { buf_61529[0] = (buf_61529[0]).concat(raw_write_stack_trace_61467()); } else { buf_61529[0] = raw_write_stack_trace_61467().slice(); };
		var cbuf_61601 = toJSStr(buf_61529[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_61601);
  }
  else {
    throw cbuf_61601;
  }
  

	
}

function raiseOverflow() {
		var eHEX60gensym62058_62203 = null;
		eHEX60gensym62058_62203 = {m_type: NTI45446, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym62058_62203.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI42040);
		eHEX60gensym62058_62203.parent = null;
		raiseException(eHEX60gensym62058_62203, "OverflowError");

	
}

function is_whitespace_194654(text_194656) {
		     return !/[^\s]/.test(text_194656);
  

	
}

function is_whitespace_194671(x_194673) {
		var Tmp1;
		var Tmp2;

	var result_194674 = false;

	var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 134;
		if (!(x_194673.nodeName == "#text")) Tmp2 = false; else {			Tmp2 = is_whitespace_194654(x_194673.textContent);		}		if (Tmp2) Tmp1 = true; else {			Tmp1 = (x_194673.nodeName == "#comment");		}		result_194674 = Tmp1;
	framePtr = F.prev;

	return result_194674;

}

function raiseIndexError(i_62655, a_62656, b_62657) {
		var Tmp1;

		var eHEX60gensym62802_63003 = null;
		eHEX60gensym62802_63003 = {m_type: NTI45458, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		if ((b_62657 < a_62656)) {
		Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
		}
		else {
		Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_62655)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_62656)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_62657)+"") || []);
		}
		
		eHEX60gensym62802_63003.message = nimCopy(null, Tmp1, NTI42040);
		eHEX60gensym62802_63003.parent = null;
		raiseException(eHEX60gensym62802_63003, "IndexError");

	
}

function to_toc_194688(x_194690, father_194691) {
								var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;
			var Tmp15;

	var F={procname:"dochack.toToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if ((x_194690.nodeName == "UL")) {
		F.line = 139;
		var f_194712 = {heading: null, kids: [], sortId: (father_194691.kids != null ? father_194691.kids.length : 0), doSort: false};
		F.line = 140;
		var i_194714 = 0;
		L1: do {
			F.line = 141;
				L2: while (true) {
				if (!(i_194714 < x_194690.childNodes.length)) break L2;
					F.line = 142;
					var nxt_194715 = addInt(i_194714, 1);
					L3: do {
						F.line = 143;
							L4: while (true) {
								if (!(nxt_194715 < x_194690.childNodes.length)) Tmp5 = false; else {									Tmp5 = is_whitespace_194671(x_194690.childNodes[nxt_194715]);								}							if (!Tmp5) break L4;
								F.line = 144;
								nxt_194715 = addInt(nxt_194715, 1);
							}
					} while(false);
						if (!(nxt_194715 < x_194690.childNodes.length)) Tmp8 = false; else {							Tmp8 = (x_194690.childNodes[i_194714].nodeName == "LI");						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (x_194690.childNodes[i_194714].childNodes.length == 1);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (x_194690.childNodes[nxt_194715].nodeName == "UL");						}					if (Tmp6) {
					F.line = 147;
					var e_194742 = {heading: x_194690.childNodes[i_194714].childNodes[0], kids: [], sortId: (f_194712.kids != null ? f_194712.kids.length : 0), doSort: false};
					F.line = 148;
					var it_194743 = x_194690.childNodes[nxt_194715];
					L9: do {
						F.line = 149;
						var j_194751 = 0;
						F.line = 2755;
						var colontmp__195442 = 0;
						F.line = 149;
						colontmp__195442 = it_194743.childNodes.length;
						F.line = 2757;
						var i_195443 = 0;
						L10: do {
							F.line = 2758;
								L11: while (true) {
								if (!(i_195443 < colontmp__195442)) break L11;
									F.line = 149;
									j_194751 = i_195443;
									F.line = 150;
									to_toc_194688(it_194743.childNodes[j_194751], e_194742);
									F.line = 2760;
									i_195443 = addInt(i_195443, 1);
								}
						} while(false);
					} while(false);
					F.line = 151;
					if (f_194712.kids != null) { f_194712.kids.push(e_194742); } else { f_194712.kids = [e_194742]; };
					F.line = 152;
					i_194714 = addInt(nxt_194715, 1);
					}
					else {
						F.line = 154;
						to_toc_194688(x_194690.childNodes[i_194714], f_194712);
						F.line = 155;
						i_194714 = addInt(i_194714, 1);
					}
					
				}
		} while(false);
		F.line = 156;
		if (father_194691.kids != null) { father_194691.kids.push(f_194712); } else { father_194691.kids = [f_194712]; };
		}
		else {
		if (is_whitespace_194671(x_194690)) {
		}
		else {
		if ((x_194690.nodeName == "LI")) {
		F.line = 160;
		var idx_194788 = [];
		L12: do {
			F.line = 161;
			var i_194796 = 0;
			F.line = 2755;
			var colontmp__195447 = 0;
			F.line = 161;
			colontmp__195447 = x_194690.childNodes.length;
			F.line = 2757;
			var i_195448 = 0;
			L13: do {
				F.line = 2758;
					L14: while (true) {
					if (!(i_195448 < colontmp__195447)) break L14;
						F.line = 161;
						i_194796 = i_195448;
						if (!(is_whitespace_194671(x_194690.childNodes[i_194796]))) {
						F.line = 162;
						if (idx_194788 != null) { idx_194788.push(i_194796); } else { idx_194788 = [i_194796]; };
						}
						
						F.line = 2760;
						i_195448 = addInt(i_195448, 1);
					}
			} while(false);
		} while(false);
			if (!((idx_194788 != null ? idx_194788.length : 0) == 2)) Tmp15 = false; else {				Tmp15 = (x_194690.childNodes[idx_194788[chckIndx(1, 0, idx_194788.length+0-1)-0]].nodeName == "UL");			}		if (Tmp15) {
		F.line = 164;
		var e_194829 = {heading: x_194690.childNodes[idx_194788[chckIndx(0, 0, idx_194788.length+0-1)-0]], kids: [], sortId: (father_194691.kids != null ? father_194691.kids.length : 0), doSort: false};
		F.line = 166;
		var it_194830 = x_194690.childNodes[idx_194788[chckIndx(1, 0, idx_194788.length+0-1)-0]];
		L16: do {
			F.line = 167;
			var j_194838 = 0;
			F.line = 2755;
			var colontmp__195453 = 0;
			F.line = 167;
			colontmp__195453 = it_194830.childNodes.length;
			F.line = 2757;
			var i_195454 = 0;
			L17: do {
				F.line = 2758;
					L18: while (true) {
					if (!(i_195454 < colontmp__195453)) break L18;
						F.line = 167;
						j_194838 = i_195454;
						F.line = 168;
						to_toc_194688(it_194830.childNodes[j_194838], e_194829);
						F.line = 2760;
						i_195454 = addInt(i_195454, 1);
					}
			} while(false);
		} while(false);
		F.line = 169;
		if (father_194691.kids != null) { father_194691.kids.push(e_194829); } else { father_194691.kids = [e_194829]; };
		}
		else {
			L19: do {
				F.line = 171;
				var i_194853 = 0;
				F.line = 2755;
				var colontmp__195458 = 0;
				F.line = 171;
				colontmp__195458 = x_194690.childNodes.length;
				F.line = 2757;
				var i_195459 = 0;
				L20: do {
					F.line = 2758;
						L21: while (true) {
						if (!(i_195459 < colontmp__195458)) break L21;
							F.line = 171;
							i_194853 = i_195459;
							F.line = 172;
							to_toc_194688(x_194690.childNodes[i_194853], father_194691);
							F.line = 2760;
							i_195459 = addInt(i_195459, 1);
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 174;
		if (father_194691.kids != null) { father_194691.kids.push({heading: x_194690, kids: [], sortId: (father_194691.kids != null ? father_194691.kids.length : 0), doSort: false}); } else { father_194691.kids = [{heading: x_194690, kids: [], sortId: (father_194691.kids != null ? father_194691.kids.length : 0), doSort: false}]; };
		}
		}}
	framePtr = F.prev;

	
}

function extract_items_194339(x_194341, heading_194342, items_194345, items_194345_Idx) {
			var Tmp1;

	var F={procname:"dochack.extractItems",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_194341 == null)) {
		F.line = 81;
		break BeforeRet;
		}
		
			if (!!((x_194341.heading == null))) Tmp1 = false; else {				Tmp1 = (x_194341.heading.textContent == heading_194342);			}		if (Tmp1) {
		L2: do {
			F.line = 83;
			var i_194374 = 0;
			F.line = 2755;
			var colontmp__195487 = 0;
			F.line = 83;
			colontmp__195487 = (x_194341.kids != null ? x_194341.kids.length : 0);
			F.line = 2757;
			var i_195488 = 0;
			L3: do {
				F.line = 2758;
					L4: while (true) {
					if (!(i_195488 < colontmp__195487)) break L4;
						F.line = 83;
						i_194374 = i_195488;
						F.line = 84;
						if (items_194345[items_194345_Idx] != null) { items_194345[items_194345_Idx].push(x_194341.kids[chckIndx(i_194374, 0, x_194341.kids.length+0-1)-0].heading); } else { items_194345[items_194345_Idx] = [x_194341.kids[chckIndx(i_194374, 0, x_194341.kids.length+0-1)-0].heading]; };
						F.line = 2760;
						i_195488 = addInt(i_195488, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L5: do {
				F.line = 86;
				var i_194394 = 0;
				F.line = 2755;
				var colontmp__195492 = 0;
				F.line = 86;
				colontmp__195492 = (x_194341.kids != null ? x_194341.kids.length : 0);
				F.line = 2757;
				var i_195493 = 0;
				L6: do {
					F.line = 2758;
						L7: while (true) {
						if (!(i_195493 < colontmp__195492)) break L7;
							F.line = 86;
							i_194394 = i_195493;
							F.line = 87;
							var it_194395 = x_194341.kids[chckIndx(i_194394, 0, x_194341.kids.length+0-1)-0];
							F.line = 88;
							extract_items_194339(it_194395, heading_194342, items_194345, items_194345_Idx);
							F.line = 2760;
							i_195493 = addInt(i_195493, 1);
						}
				} while(false);
			} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function tree_194020(tag_194022, kids_194024) {
	var result_194025 = null;

	var F={procname:"dochack.tree",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 11;
		result_194025 = document.createElement(toJSStr(tag_194022));
		L1: do {
			F.line = 12;
			var k_194056 = null;
			F.line = 3;
			var i_195510 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_195510 < (kids_194024 != null ? kids_194024.length : 0))) break L3;
						F.line = 12;
						k_194056 = kids_194024[chckIndx(i_195510, 0, kids_194024.length+0-1)-0];
						F.line = 13;
						result_194025.appendChild(k_194056);
						F.line = 6;
						i_195510 = addInt(i_195510, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_194025;

}

function text_194152(s_194154) {
	var result_194155 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_194155 = document.createTextNode(s_194154);
	framePtr = F.prev;

	return result_194155;

}

function sys_fatal_55462(message_55466) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_55603 = null;
		F.line = 37;
		e_55603 = {m_type: NTI45450, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_55603.message = nimCopy(null, message_55466, NTI42040);
		F.line = 39;
		raiseException(e_55603, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_55458(msg_55460) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_55462(msg_55460);
	framePtr = F.prev;

	
}

function failed_assert_impl_55666(msg_55668) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_55458(msg_55668);
	framePtr = F.prev;

	
}

function uncovered_194950(x_194952) {
			var Tmp1;
		var Tmp2;

	var result_194953 = null;

	var F={procname:"dochack.uncovered",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
			if (!((x_194952.kids != null ? x_194952.kids.length : 0) == 0)) Tmp1 = false; else {				Tmp1 = !((x_194952.heading == null));			}		if (Tmp1) {
		F.line = 194;
		if (!(x_194952.heading.hasOwnProperty('__karaxMarker__'))) {
		Tmp2 = x_194952;
		}
		else {
		Tmp2 = null;
		}
		
		result_194953 = Tmp2;
		break BeforeRet;
		}
		
		F.line = 195;
		result_194953 = {heading: x_194952.heading, kids: [], sortId: x_194952.sortId, doSort: x_194952.doSort};
		L3: do {
			F.line = 197;
			var i_194994 = 0;
			F.line = 2755;
			var colontmp__195522 = 0;
			F.line = 197;
			colontmp__195522 = (x_194952.kids != null ? x_194952.kids.length : 0);
			F.line = 2757;
			var i_195523 = 0;
			L4: do {
				F.line = 2758;
					L5: while (true) {
					if (!(i_195523 < colontmp__195522)) break L5;
						F.line = 197;
						i_194994 = i_195523;
						F.line = 198;
						var y_194995 = uncovered_194950(x_194952.kids[chckIndx(i_194994, 0, x_194952.kids.length+0-1)-0]);
						if (!((y_194995 == null))) {
						F.line = 199;
						if (result_194953.kids != null) { result_194953.kids.push(y_194995); } else { result_194953.kids = [y_194995]; };
						}
						
						F.line = 2760;
						i_195523 = addInt(i_195523, 1);
					}
			} while(false);
		} while(false);
		if (((result_194953.kids != null ? result_194953.kids.length : 0) == 0)) {
		F.line = 200;
		result_194953 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_194953;

}

function merge_tocs_195029(orig_195031, news_195032) {
	var result_195033 = null;

	var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 203;
		result_195033 = uncovered_194950(orig_195031);
		if ((result_195033 == null)) {
		F.line = 205;
		result_195033 = news_195032;
		}
		else {
			L1: do {
				F.line = 207;
				var i_195054 = 0;
				F.line = 2755;
				var colontmp__195516 = 0;
				F.line = 207;
				colontmp__195516 = (news_195032.kids != null ? news_195032.kids.length : 0);
				F.line = 2757;
				var i_195517 = 0;
				L2: do {
					F.line = 2758;
						L3: while (true) {
						if (!(i_195517 < colontmp__195516)) break L3;
							F.line = 207;
							i_195054 = i_195517;
							F.line = 208;
							if (result_195033.kids != null) { result_195033.kids.push(news_195032.kids[chckIndx(i_195054, 0, news_195032.kids.length+0-1)-0]); } else { result_195033.kids = [news_195032.kids[chckIndx(i_195054, 0, news_195032.kids.length+0-1)-0]]; };
							F.line = 2760;
							i_195517 = addInt(i_195517, 1);
						}
				} while(false);
			} while(false);
		}
		
	framePtr = F.prev;

	return result_195033;

}

function build_toc_195075(orig_195077, types_195079, procs_195080) {
	var result_195081 = null;

	var F={procname:"dochack.buildToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 211;
		var new_stuff_195097 = {heading: null, kids: [], doSort: true, sortId: 0};
		L1: do {
			F.line = 212;
			var t_195214 = null;
			F.line = 184;
			var i_195505 = 0;
			F.line = 185;
			var l_195506 = (types_195079 != null ? types_195079.length : 0);
			L2: do {
				F.line = 186;
					L3: while (true) {
					if (!(i_195505 < l_195506)) break L3;
						F.line = 212;
						t_195214 = types_195079[chckIndx(i_195505, 0, types_195079.length+0-1)-0];
						F.line = 213;
						var c_195230 = {heading: t_195214.cloneNode(true), kids: [], doSort: true, sortId: 0};
						F.line = 214;
						t_195214.__karaxMarker__ = true;
						L4: do {
							F.line = 215;
							var p_195237 = null;
							F.line = 184;
							var i_195502 = 0;
							F.line = 185;
							var l_195503 = (procs_195080 != null ? procs_195080.length : 0);
							L5: do {
								F.line = 186;
									L6: while (true) {
									if (!(i_195502 < l_195503)) break L6;
										F.line = 215;
										p_195237 = procs_195080[chckIndx(i_195502, 0, procs_195080.length+0-1)-0];
										if (!(p_195237.hasOwnProperty('__karaxMarker__'))) {
										F.line = 217;
										var xx_195238 = p_195237.parentNode.getElementsByClassName("attachedType");
										if ((((xx_195238 != null ? xx_195238.length : 0) == 1) && (xx_195238[chckIndx(0, 0, xx_195238.length+0-1)-0].textContent == t_195214.textContent))) {
										F.line = 220;
										var q_195246 = tree_194020(makeNimstrLit("A"), [text_194152(p_195237.title)]);
										F.line = 221;
										q_195246.setAttribute("href", p_195237.getAttribute("href"));
										F.line = 222;
										if (c_195230.kids != null) { c_195230.kids.push({heading: q_195246, kids: [], sortId: 0, doSort: false}); } else { c_195230.kids = [{heading: q_195246, kids: [], sortId: 0, doSort: false}]; };
										F.line = 223;
										p_195237.__karaxMarker__ = true;
										}
										
										}
										
										F.line = 188;
										i_195502 = addInt(i_195502, 1);
										if (!(((procs_195080 != null ? procs_195080.length : 0) == l_195503))) {
										F.line = 189;
										failed_assert_impl_55666(makeNimstrLit("/mnt/c/Nim/lib/system/iterators.nim(189, 11) `len(a) ==\x0A    L` the length of the seq changed while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 224;
						if (new_stuff_195097.kids != null) { new_stuff_195097.kids.push(c_195230); } else { new_stuff_195097.kids = [c_195230]; };
						F.line = 188;
						i_195505 = addInt(i_195505, 1);
						if (!(((types_195079 != null ? types_195079.length : 0) == l_195506))) {
						F.line = 189;
						failed_assert_impl_55666(makeNimstrLit("/mnt/c/Nim/lib/system/iterators.nim(189, 11) `len(a) ==\x0A    L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 225;
		result_195081 = merge_tocs_195029(orig_195077, new_stuff_195097);
	framePtr = F.prev;

	return result_195081;

}

function add_194085(parent_194087, kid_194088) {
			var Tmp1;
				var Tmp2;

	var F={procname:"dochack.add",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
			if (!(parent_194087.nodeName == "TR")) Tmp1 = false; else {				if ((kid_194088.nodeName == "TD")) Tmp2 = true; else {					Tmp2 = (kid_194088.nodeName == "TH");				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 18;
		var k_194089 = document.createElement("TD");
		F.line = 19;
		k_194089.appendChild(kid_194088);
		F.line = 20;
		parent_194087.appendChild(k_194089);
		}
		else {
			F.line = 22;
		parent_194087.appendChild(kid_194088);
		}
		
	framePtr = F.prev;

	
}

function set_class_194103(e_194105, value_194106) {
	var F={procname:"dochack.setClass",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 25;
		e_194105.setAttribute("class", toJSStr(value_194106));
	framePtr = F.prev;

	
}

function to_html_194424(x_194426, is_root_194427) {
			var Tmp1;

		function HEX3Aanonymous_194467(a_194469, b_194470) {
					var Tmp1;

			var result_194471 = 0;

			var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
			BeforeRet: do {
					if (!!((a_194469.heading == null))) Tmp1 = false; else {						Tmp1 = !((b_194470.heading == null));					}				if (Tmp1) {
				F.line = 106;
				var x_194488 = a_194469.heading.textContent;
				F.line = 107;
				var y_194489 = b_194470.heading.textContent;
				if ((x_194488 < y_194489)) {
				F.line = 108;
				result_194471 = -1;
				break BeforeRet;
				}
				
				if ((y_194489 < x_194488)) {
				F.line = 109;
				result_194471 = 1;
				break BeforeRet;
				}
				
				F.line = 110;
				result_194471 = 0;
				break BeforeRet;
				}
				else {
					F.line = 113;
					result_194471 = subInt(a_194469.sortId, b_194470.sortId);
					break BeforeRet;
				}
				
			} while (false);
			framePtr = F.prev;

			return result_194471;

		}

	var result_194428 = null;

	var F={procname:"dochack.toHtml",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_194426 == null)) {
		F.line = 91;
		result_194428 = null;
		break BeforeRet;
		}
		
		if (((x_194426.kids != null ? x_194426.kids.length : 0) == 0)) {
		if ((x_194426.heading == null)) {
		F.line = 93;
		result_194428 = null;
		break BeforeRet;
		}
		
		F.line = 94;
		result_194428 = x_194426.heading.cloneNode(true);
		break BeforeRet;
		}
		
		F.line = 95;
		result_194428 = tree_194020(makeNimstrLit("DIV"), []);
			if (!!((x_194426.heading == null))) Tmp1 = false; else {				Tmp1 = !(x_194426.heading.hasOwnProperty('__karaxMarker__'));			}		if (Tmp1) {
		F.line = 97;
		add_194085(result_194428, x_194426.heading.cloneNode(true));
		}
		
		F.line = 98;
		var ul_194464 = tree_194020(makeNimstrLit("UL"), []);
		if (is_root_194427) {
		F.line = 100;
		set_class_194103(ul_194464, makeNimstrLit("simple simple-toc"));
		}
		else {
			F.line = 102;
		set_class_194103(ul_194464, makeNimstrLit("simple"));
		}
		
		if (x_194426.doSort) {
		F.line = 104;
		x_194426.kids.sort(HEX3Aanonymous_194467);
		}
		
		L2: do {
			F.line = 115;
			var k_194614 = null;
			F.line = 182;
			var colontmp__195529 = null;
			F.line = 115;
			colontmp__195529 = x_194426.kids;
			F.line = 184;
			var i_195531 = 0;
			F.line = 185;
			var l_195532 = (colontmp__195529 != null ? colontmp__195529.length : 0);
			L3: do {
				F.line = 186;
					L4: while (true) {
					if (!(i_195531 < l_195532)) break L4;
						F.line = 115;
						k_194614 = colontmp__195529[chckIndx(i_195531, 0, colontmp__195529.length+0-1)-0];
						F.line = 116;
						var y_194615 = to_html_194424(k_194614, false);
						if (!((y_194615 == null))) {
						F.line = 118;
						add_194085(ul_194464, tree_194020(makeNimstrLit("LI"), [y_194615]));
						}
						
						F.line = 188;
						i_195531 = addInt(i_195531, 1);
						if (!(((colontmp__195529 != null ? colontmp__195529.length : 0) == l_195532))) {
						F.line = 189;
						failed_assert_impl_55666(makeNimstrLit("/mnt/c/Nim/lib/system/iterators.nim(189, 11) `len(a) ==\x0A    L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ul_194464.childNodes.length == 0))) {
		F.line = 119;
		add_194085(result_194428, ul_194464);
		}
		
		if ((result_194428.childNodes.length == 0)) {
		F.line = 120;
		result_194428 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_194428;

}

function replace_by_id_194172(id_194174, new_tree_194175) {
	var F={procname:"dochack.replaceById",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 32;
		var x_194176 = document.getElementById(id_194174);
		F.line = 33;
		x_194176.parentNode.replaceChild(new_tree_194175, x_194176);
		F.line = 34;
		new_tree_194175.id = id_194174;
	framePtr = F.prev;

	
}

function togglevis_195333(d_195335) {
	var F={procname:"dochack.togglevis",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 230;
		    if (d_195335.style.display == 'none')
      d_195335.style.display = 'inline';
    else
      d_195335.style.display = 'none';
  
	framePtr = F.prev;

	
}

function groupBy(value_195351) {
	var F={procname:"dochack.groupBy",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 238;
		var toc_195352 = document.getElementById("toc-list");
		if ((alternative_195319[0] == null)) {
		F.line = 240;
		var tt_195373 = {heading: null, kids: [], sortId: 0, doSort: false};
		F.line = 241;
		to_toc_194688(toc_195352, tt_195373);
		F.line = 242;
		tt_195373 = tt_195373.kids[chckIndx(0, 0, tt_195373.kids.length+0-1)-0];
		F.line = 244;
		var types_195390 = [[]];
		F.line = 245;
		var procs_195407 = [[]];
		F.line = 247;
		extract_items_194339(tt_195373, "Types", types_195390, 0);
		F.line = 248;
		extract_items_194339(tt_195373, "Procs", procs_195407, 0);
		F.line = 249;
		extract_items_194339(tt_195373, "Converters", procs_195407, 0);
		F.line = 250;
		extract_items_194339(tt_195373, "Methods", procs_195407, 0);
		F.line = 251;
		extract_items_194339(tt_195373, "Templates", procs_195407, 0);
		F.line = 252;
		extract_items_194339(tt_195373, "Macros", procs_195407, 0);
		F.line = 253;
		extract_items_194339(tt_195373, "Iterators", procs_195407, 0);
		F.line = 255;
		var ntoc_195415 = build_toc_195075(tt_195373, types_195390[0], procs_195407[0]);
		F.line = 256;
		var x_195416 = to_html_194424(ntoc_195415, true);
		F.line = 257;
		alternative_195319[0] = tree_194020(makeNimstrLit("DIV"), [x_195416]);
		}
		
		if ((value_195351 == "type")) {
		F.line = 259;
		replace_by_id_194172("tocRoot", alternative_195319[0]);
		}
		else {
			F.line = 261;
		replace_by_id_194172("tocRoot", tree_194020(makeNimstrLit("DIV"), []));
		}
		
		F.line = 262;
		togglevis_195333(document.getElementById("toc-list"));
	framePtr = F.prev;

	
}
var db_195535 = [null];
var contents_195537 = [null];
var oldtoc_195961 = [null];
var timer_195962 = [null];

function raiseRangeError() {
		var eHEX60gensym62457_62603 = null;
		eHEX60gensym62457_62603 = {m_type: NTI45462, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym62457_62603.message = nimCopy(null, makeNimstrLit("value out of range"), NTI42040);
		eHEX60gensym62457_62603.parent = null;
		raiseException(eHEX60gensym62457_62603, "RangeError");

	
}

function nsuToLowerAsciiChar(c_183380) {
	var result_183381 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet2[c_183380] != undefined)) {
		F.line = 222;
		result_183381 = chckRange(addInt(c_183380, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_183381 = c_183380;
		}
		
	framePtr = F.prev;

	return result_183381;

}

function fuzzy_match_193067(pattern_193069, str_193070) {
							var Tmp4;
							var Tmp5;
								var Tmp6;

	var result_193074 = {Field0: 0, Field1: false};

	var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"fuzzysearch.nim",line:0};
	framePtr = F;
		F.line = 37;
		var score_state_193075 = -100;
		F.line = 38;
		var header_matched_193076 = false;
		F.line = 39;
		var unmatched_leading_char_count_193078 = 0;
		F.line = 40;
		var consecutive_match_count_193080 = 0;
		F.line = 41;
		var str_index_193082 = 0;
		F.line = 42;
		var pat_index_193084 = 0;
		F.line = 43;
		var score_193086 = 0;
		L1: do {
			F.line = 49;
				L2: while (true) {
				if (!((str_index_193082 < (str_193070 != null ? str_193070.length : 0)) && (pat_index_193084 < (pattern_193069 != null ? pattern_193069.length : 0)))) break L2;
					L3: do {
						F.line = 51;
						var pattern_char_193092 = nsuToLowerAsciiChar(pattern_193069.charCodeAt(chckIndx(pat_index_193084, 0, pattern_193069.length+0-1)-0));
						F.line = 52;
						var str_char_193093 = nsuToLowerAsciiChar(str_193070.charCodeAt(chckIndx(str_index_193082, 0, str_193070.length+0-1)-0));
						if ((ConstSet3[pattern_char_193092] != undefined)) {
						F.line = 56;
						pat_index_193084 = addInt(pat_index_193084, 1);
						F.line = 57;
						break L3;
						}
						
						if ((ConstSet4[str_char_193093] != undefined)) {
						F.line = 59;
						str_index_193082 = addInt(str_index_193082, 1);
						F.line = 60;
						break L3;
						}
						
						if ((!(header_matched_193076) && (str_char_193093 == 58))) {
						F.line = 65;
						header_matched_193076 = true;
						F.line = 66;
						score_state_193075 = -100;
						F.line = 67;
						score_193086 = ((Math.floor((5.0000000000000000e-01 * score_193086)))|0);
						F.line = 68;
						pat_index_193084 = 0;
						F.line = 69;
						str_index_193082 = addInt(str_index_193082, 1);
						F.line = 70;
						break L3;
						}
						
						if ((str_char_193093 == pattern_char_193092)) {
						F.line = 73;
						switch (score_state_193075) {
						case -100:
						case 20:
							F.line = 75;
							score_state_193075 = 10;
							break;
						case 0:
							F.line = 78;
							score_state_193075 = 5;
							F.line = 78;
							score_193086 = addInt(score_193086, score_state_193075);
							break;
						case 10:
						case 5:
							F.line = 81;
							consecutive_match_count_193080 = addInt(consecutive_match_count_193080, 1);
							F.line = 82;
							score_state_193075 = 5;
							F.line = 83;
							score_193086 = addInt(score_193086, mulInt(5, consecutive_match_count_193080));
							if ((score_state_193075 == 10)) {
							F.line = 86;
							score_193086 = addInt(score_193086, 10);
							}
							
							F.line = 88;
							var on_boundary_193167 = (pat_index_193084 == (pattern_193069 != null ? (pattern_193069.length-1) : -1));
							if ((!(on_boundary_193167) && (str_index_193082 < (str_193070 != null ? (str_193070.length-1) : -1)))) {
							F.line = 91;
							var next_pattern_char_193168 = nsuToLowerAsciiChar(pattern_193069.charCodeAt(chckIndx(addInt(pat_index_193084, 1), 0, pattern_193069.length+0-1)-0));
							F.line = 92;
							var next_str_char_193169 = nsuToLowerAsciiChar(str_193070.charCodeAt(chckIndx(addInt(str_index_193082, 1), 0, str_193070.length+0-1)-0));
							F.line = 95;
							if (!!((ConstSet5[next_str_char_193169] != undefined))) Tmp4 = false; else {								Tmp4 = !((next_str_char_193169 == next_pattern_char_193168));							}							on_boundary_193167 = Tmp4;
							}
							
							if (on_boundary_193167) {
							F.line = 100;
							score_state_193075 = 20;
							F.line = 100;
							score_193086 = addInt(score_193086, score_state_193075);
							}
							
							break;
						case -1:
						case -3:
							F.line = 103;
							if (!((ConstSet6[str_193070.charCodeAt(chckIndx(subInt(str_index_193082, 1), 0, str_193070.length+0-1)-0)] != undefined))) Tmp5 = true; else {								if (!(ConstSet7[str_193070.charCodeAt(chckIndx(subInt(str_index_193082, 1), 0, str_193070.length+0-1)-0)] != undefined)) Tmp6 = false; else {									Tmp6 = (ConstSet8[str_193070.charCodeAt(chckIndx(str_index_193082, 0, str_193070.length+0-1)-0)] != undefined);								}								Tmp5 = Tmp6;							}							var is_leading_char_193207 = Tmp5;
							if (is_leading_char_193207) {
							F.line = 110;
							score_state_193075 = 10;
							}
							else {
								F.line = 114;
								score_state_193075 = 0;
								F.line = 114;
								score_193086 = addInt(score_193086, score_state_193075);
							}
							
							break;
						}
						F.line = 115;
						pat_index_193084 = addInt(pat_index_193084, 1);
						}
						else {
							F.line = 118;
							switch (score_state_193075) {
							case -100:
								F.line = 120;
								score_state_193075 = -3;
								F.line = 120;
								score_193086 = addInt(score_193086, score_state_193075);
								break;
							case 5:
								F.line = 123;
								score_state_193075 = -1;
								F.line = 123;
								score_193086 = addInt(score_193086, score_state_193075);
								F.line = 124;
								consecutive_match_count_193080 = 0;
								break;
							case -3:
								if ((unmatched_leading_char_count_193078 < 3)) {
								F.line = 128;
								score_state_193075 = -3;
								F.line = 128;
								score_193086 = addInt(score_193086, score_state_193075);
								}
								
								F.line = 129;
								unmatched_leading_char_count_193078 = addInt(unmatched_leading_char_count_193078, 1);
								break;
							default: 
								F.line = 132;
								score_state_193075 = -1;
								F.line = 132;
								score_193086 = addInt(score_193086, score_state_193075);
								break;
							}
						}
						
						F.line = 134;
						str_index_193082 = addInt(str_index_193082, 1);
					} while(false);
				}
		} while(false);
		F.line = 137;
		var colontmp__196067 = nimMax(0, score_193086);
		F.line = 138;
		var colontmp__196068 = (0 < score_193086);
		F.line = 136;
		nimCopy(result_193074, {Field0: colontmp__196067, Field1: colontmp__196068}, NTI193071);
	framePtr = F.prev;

	return result_193074;

}

function text_194120(s_194122) {
	var result_194123 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_194123 = document.createTextNode(toJSStr(s_194122));
	framePtr = F.prev;

	return result_194123;

}

function dosearch_195554(value_195556) {

		function HEX3Aanonymous_195873(a_195882, b_195883) {
			var result_195887 = 0;

			var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 305;
				result_195887 = subInt(b_195883["Field1"], a_195882["Field1"]);
			framePtr = F.prev;

			return result_195887;

		}

	var result_195557 = null;

	var F={procname:"dochack.dosearch",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (((db_195535[0] != null ? db_195535[0].length : 0) == 0)) {
		F.line = 272;
		var stuff_195563 = null;
		F.line = 273;
		    var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_195563 = doc.documentElement;
    
		F.line = 286;
		db_195535[0] = nimCopy(null, stuff_195563.getElementsByClassName("reference"), NTI84305);
		F.line = 287;
		contents_195537[0] = nimCopy(null, [], NTI195578);
		L1: do {
			F.line = 288;
			var ahref_195814 = null;
			F.line = 184;
			var i_196045 = 0;
			F.line = 185;
			var l_196046 = (db_195535[0] != null ? db_195535[0].length : 0);
			L2: do {
				F.line = 186;
					L3: while (true) {
					if (!(i_196045 < l_196046)) break L3;
						F.line = 288;
						ahref_195814 = db_195535[0][chckIndx(i_196045, 0, db_195535[0].length+0-1)-0];
						F.line = 289;
						if (contents_195537[0] != null) { contents_195537[0].push(ahref_195814.getAttribute("data-doc-search-tag")); } else { contents_195537[0] = [ahref_195814.getAttribute("data-doc-search-tag")]; };
						F.line = 188;
						i_196045 = addInt(i_196045, 1);
						if (!(((db_195535[0] != null ? db_195535[0].length : 0) == l_196046))) {
						F.line = 189;
						failed_assert_impl_55666(makeNimstrLit("/mnt/c/Nim/lib/system/iterators.nim(189, 11) `len(a) ==\x0A    L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 290;
		var ul_195825 = tree_194020(makeNimstrLit("UL"), []);
		F.line = 291;
		result_195557 = tree_194020(makeNimstrLit("DIV"), []);
		F.line = 292;
		set_class_194103(result_195557, makeNimstrLit("search_results"));
		F.line = 293;
		var matches_195846 = [];
		L4: do {
			F.line = 294;
			var i_195859 = 0;
			F.line = 2755;
			var colontmp__196052 = 0;
			F.line = 294;
			colontmp__196052 = (db_195535[0] != null ? db_195535[0].length : 0);
			F.line = 2757;
			var i_196053 = 0;
			L5: do {
				F.line = 2758;
					L6: while (true) {
					if (!(i_196053 < colontmp__196052)) break L6;
						F.line = 294;
						i_195859 = i_196053;
						L7: do {
							F.line = 295;
							var c_195860 = contents_195537[0][chckIndx(i_195859, 0, contents_195537[0].length+0-1)-0];
							if (((c_195860 == "Examples") || (c_195860 == "PEG construction"))) {
							F.line = 300;
							break L7;
							}
							
							F.line = 301;
							var colontmp__196062 = {Field0: 0, Field1: false};
							F.line = 301;
							var score_195861 = 0;
							F.line = 301;
							var matched_195862 = false;
							F.line = 301;
							nimCopy(colontmp__196062, fuzzy_match_193067(value_195556, c_195860), NTI193071);
							F.line = 301;
							score_195861 = colontmp__196062["Field0"];
							F.line = 301;
							matched_195862 = colontmp__196062["Field1"];
							if (matched_195862) {
							F.line = 303;
							if (matches_195846 != null) { matches_195846.push({Field0: db_195535[0][chckIndx(i_195859, 0, db_195535[0].length+0-1)-0], Field1: score_195861}); } else { matches_195846 = [{Field0: db_195535[0][chckIndx(i_195859, 0, db_195535[0].length+0-1)-0], Field1: score_195861}]; };
							}
							
						} while(false);
						F.line = 2760;
						i_196053 = addInt(i_196053, 1);
					}
			} while(false);
		} while(false);
		F.line = 305;
		matches_195846.sort(HEX3Aanonymous_195873);
		L8: do {
			F.line = 306;
			var i_195926 = 0;
			F.line = 2755;
			var colontmp__196058 = 0;
			F.line = 306;
			colontmp__196058 = nimMin((matches_195846 != null ? matches_195846.length : 0), 19);
			F.line = 2757;
			var i_196059 = 0;
			L9: do {
				F.line = 2758;
					L10: while (true) {
					if (!(i_196059 < colontmp__196058)) break L10;
						F.line = 306;
						i_195926 = i_196059;
						F.line = 307;
						matches_195846[chckIndx(i_195926, 0, matches_195846.length+0-1)-0]["Field0"].innerHTML = matches_195846[chckIndx(i_195926, 0, matches_195846.length+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
						F.line = 308;
						add_194085(ul_195825, tree_194020(makeNimstrLit("LI"), [matches_195846[chckIndx(i_195926, 0, matches_195846.length+0-1)-0]["Field0"]]));
						F.line = 2760;
						i_196059 = addInt(i_196059, 1);
					}
			} while(false);
		} while(false);
		if ((ul_195825.childNodes.length == 0)) {
		F.line = 310;
		add_194085(result_195557, tree_194020(makeNimstrLit("B"), [text_194120(makeNimstrLit("no search results"))]));
		}
		else {
			F.line = 312;
			add_194085(result_195557, tree_194020(makeNimstrLit("B"), [text_194120(makeNimstrLit("search results"))]));
			F.line = 313;
			add_194085(result_195557, ul_195825);
		}
		
	framePtr = F.prev;

	return result_195557;

}

function search() {

		function wrapper_195993() {
			var F={procname:"search.wrapper",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 320;
				var elem_195995 = document.getElementById("searchInput");
				F.line = 321;
				var value_195996 = elem_195995.value;
				if (!(((value_195996 != null ? value_195996.length : 0) == 0))) {
				if ((oldtoc_195961[0] == null)) {
				F.line = 324;
				oldtoc_195961[0] = document.getElementById("tocRoot");
				}
				
				F.line = 325;
				var results_196002 = dosearch_195554(value_195996);
				F.line = 326;
				replace_by_id_194172("tocRoot", results_196002);
				}
				else {
				if (!((oldtoc_195961[0] == null))) {
				F.line = 328;
				replace_by_id_194172("tocRoot", oldtoc_195961[0]);
				}
				}
			framePtr = F.prev;

			
		}

	var F={procname:"dochack.search",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (!((timer_195962[0] == null))) {
		F.line = 330;
		clearTimeout(timer_195962[0]);
		}
		
		F.line = 331;
		timer_195962[0] = setTimeout(wrapper_195993, 400);
	framePtr = F.prev;

	
}
